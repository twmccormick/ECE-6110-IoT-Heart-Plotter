
finalProject_heart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b974  0800b974  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b97c  0800b97c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b984  0800b984  0001b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  20000074  0800b9fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  0800b9fc  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a8e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036e3  00000000  00000000  00040b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  00044218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001888  00000000  00000000  00045c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c7d9  00000000  00000000  00047498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001419a  00000000  00000000  00073c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd430  00000000  00000000  00087e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018523b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a80  00000000  00000000  001852b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab9c 	.word	0x0800ab9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800ab9c 	.word	0x0800ab9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <_ZN8MAX30105C1Ev>:
static const uint8_t SLOT_IR_PILOT = 			0x06;
static const uint8_t SLOT_GREEN_PILOT = 		0x07;

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  // Constructor
}
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_ZN8MAX301055beginEP19__I2C_HandleTypeDefh>:

bool MAX30105::begin(I2C_HandleTypeDef *i2c_handler, uint8_t i2caddr) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71fb      	strb	r3, [r7, #7]
 // _i2cPort = &wirePort; //Grab which port the user wants us to use

  //_i2cPort->begin();
  //_i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	701a      	strb	r2, [r3, #0]
  _i2c_handler = i2c_handler;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	605a      	str	r2, [r3, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f962 	bl	80010b6 <_ZN8MAX3010510readPartIDEv>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b15      	cmp	r3, #21
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <_ZN8MAX301055beginEP19__I2C_HandleTypeDefh+0x34>
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e003      	b.n	8000e0e <_ZN8MAX301055beginEP19__I2C_HandleTypeDefh+0x3c>
  }

  // Populate revision ID
  readRevisionID();
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f965 	bl	80010d6 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8000e1e:	2340      	movs	r3, #64	; 0x40
 8000e20:	22bf      	movs	r2, #191	; 0xbf
 8000e22:	2109      	movs	r1, #9
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fbe6 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fc64 	bl	80016f8 <_ZN8MAX301056millisEv>
 8000e30:	60f8      	str	r0, [r7, #12]
  while (millis() - startTime < 100)
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fc60 	bl	80016f8 <_ZN8MAX301056millisEv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b63      	cmp	r3, #99	; 0x63
 8000e40:	bf94      	ite	ls
 8000e42:	2301      	movls	r3, #1
 8000e44:	2300      	movhi	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <_ZN8MAX301059softResetEv+0x5e>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2209      	movs	r2, #9
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fbf6 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	72fb      	strb	r3, [r7, #11]
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <_ZN8MAX301059softResetEv+0x5c>
    delay(1); //Let's not over burden the I2C bus
 8000e68:	2101      	movs	r1, #1
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fc4f 	bl	800170e <_ZN8MAX301055delayEm>
  while (millis() - startTime < 100)
 8000e70:	e7df      	b.n	8000e32 <_ZN8MAX301059softResetEv+0x1c>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 8000e72:	bf00      	nop
  }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::wakeUp(void) {
  // Pull IC out of low power mode (datasheet pg. 19)
  bitMask(MAX30105_MODECONFIG, MAX30105_SHUTDOWN_MASK, MAX30105_WAKEUP);
}

void MAX30105::setLEDMode(uint8_t mode) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	22f8      	movs	r2, #248	; 0xf8
 8000e8c:	2109      	movs	r1, #9
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 fbb1 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN8MAX3010511setADCRangeEh>:

void MAX30105::setADCRange(uint8_t adcRange) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	229f      	movs	r2, #159	; 0x9f
 8000eac:	210a      	movs	r1, #10
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fba1 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_ZN8MAX3010513setSampleRateEh>:

void MAX30105::setSampleRate(uint8_t sampleRate) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	22e3      	movs	r2, #227	; 0xe3
 8000ecc:	210a      	movs	r1, #10
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fb91 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN8MAX3010513setPulseWidthEh>:

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	22fc      	movs	r2, #252	; 0xfc
 8000eec:	210a      	movs	r1, #10
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fb81 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_ZN8MAX3010520setPulseAmplitudeRedEh>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7819      	ldrb	r1, [r3, #0]
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	220c      	movs	r2, #12
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fbd1 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN8MAX3010519setPulseAmplitudeIREh>:

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	70fb      	strb	r3, [r7, #3]
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7819      	ldrb	r1, [r3, #0]
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	220d      	movs	r2, #13
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fbc0 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7819      	ldrb	r1, [r3, #0]
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	220e      	movs	r2, #14
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fbaf 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7819      	ldrb	r1, [r3, #0]
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	2210      	movs	r2, #16
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb9e 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZN8MAX3010510enableSlotEhh>:

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
 8000f90:	4613      	mov	r3, r2
 8000f92:	70bb      	strb	r3, [r7, #2]

  uint8_t originalContents;

  switch (slotNumber) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d82b      	bhi.n	8000ff4 <_ZN8MAX3010510enableSlotEhh+0x70>
 8000f9c:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <_ZN8MAX3010510enableSlotEhh+0x20>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08000fc3 	.word	0x08000fc3
 8000fac:	08000fd5 	.word	0x08000fd5
 8000fb0:	08000fe3 	.word	0x08000fe3
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 8000fb4:	78bb      	ldrb	r3, [r7, #2]
 8000fb6:	22f8      	movs	r2, #248	; 0xf8
 8000fb8:	2111      	movs	r1, #17
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fb1b 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
      break;
 8000fc0:	e019      	b.n	8000ff6 <_ZN8MAX3010510enableSlotEhh+0x72>
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	228f      	movs	r2, #143	; 0x8f
 8000fca:	2111      	movs	r1, #17
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fb12 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
      break;
 8000fd2:	e010      	b.n	8000ff6 <_ZN8MAX3010510enableSlotEhh+0x72>
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	22f8      	movs	r2, #248	; 0xf8
 8000fd8:	2112      	movs	r1, #18
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fb0b 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
      break;
 8000fe0:	e009      	b.n	8000ff6 <_ZN8MAX3010510enableSlotEhh+0x72>
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	228f      	movs	r2, #143	; 0x8f
 8000fea:	2112      	movs	r1, #18
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fb02 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
      break;
 8000ff2:	e000      	b.n	8000ff6 <_ZN8MAX3010510enableSlotEhh+0x72>
    default:
      //Shouldn't be here!
      break;
 8000ff4:	bf00      	nop
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop

08001000 <_ZN8MAX3010514setFIFOAverageEh>:
//
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	221f      	movs	r2, #31
 8001010:	2108      	movs	r1, #8
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 faef 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN8MAX301059clearFIFOEv>:

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7819      	ldrb	r1, [r3, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	2204      	movs	r2, #4
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fb41 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7819      	ldrb	r1, [r3, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	2205      	movs	r2, #5
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fb3a 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7819      	ldrb	r1, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2206      	movs	r2, #6
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fb33 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZN8MAX3010518enableFIFORolloverEv>:

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 8001062:	2310      	movs	r3, #16
 8001064:	22ef      	movs	r2, #239	; 0xef
 8001066:	2108      	movs	r1, #8
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 fac4 	bl	80015f6 <_ZN8MAX301057bitMaskEhhh>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZN8MAX3010515getWritePointerEv>:
void MAX30105::setFIFOAlmostFull(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2204      	movs	r2, #4
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fadd 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN8MAX3010514getReadPointerEv>:

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2206      	movs	r2, #6
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 facd 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZN8MAX3010510readPartIDEv>:


//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fabd 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN8MAX3010514readRevisionIDEv>:

void MAX30105::readRevisionID() {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	22fe      	movs	r2, #254	; 0xfe
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 faad 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	725a      	strb	r2, [r3, #9]
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4603      	mov	r3, r0
 800110c:	70fb      	strb	r3, [r7, #3]
 800110e:	460b      	mov	r3, r1
 8001110:	70bb      	strb	r3, [r7, #2]
 8001112:	4613      	mov	r3, r2
 8001114:	707b      	strb	r3, [r7, #1]
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fe7d 	bl	8000e16 <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 800111c:	78bb      	ldrb	r3, [r7, #2]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d104      	bne.n	800112c <_ZN8MAX301055setupEhhhiii+0x30>
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff6b 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800112a:	e02b      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 800112c:	78bb      	ldrb	r3, [r7, #2]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d104      	bne.n	800113c <_ZN8MAX301055setupEhhhiii+0x40>
 8001132:	2120      	movs	r1, #32
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff63 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800113a:	e023      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 800113c:	78bb      	ldrb	r3, [r7, #2]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d104      	bne.n	800114c <_ZN8MAX301055setupEhhhiii+0x50>
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff5b 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800114a:	e01b      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d104      	bne.n	800115c <_ZN8MAX301055setupEhhhiii+0x60>
 8001152:	2160      	movs	r1, #96	; 0x60
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff53 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800115a:	e013      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d104      	bne.n	800116c <_ZN8MAX301055setupEhhhiii+0x70>
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff4b 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800116a:	e00b      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 800116c:	78bb      	ldrb	r3, [r7, #2]
 800116e:	2b20      	cmp	r3, #32
 8001170:	d104      	bne.n	800117c <_ZN8MAX301055setupEhhhiii+0x80>
 8001172:	21a0      	movs	r1, #160	; 0xa0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff43 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>
 800117a:	e003      	b.n	8001184 <_ZN8MAX301055setupEhhhiii+0x88>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);
 800117c:	2140      	movs	r1, #64	; 0x40
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff3e 	bl	8001000 <_ZN8MAX3010514setFIFOAverageEh>

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff68 	bl	800105a <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 800118a:	787b      	ldrb	r3, [r7, #1]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d104      	bne.n	800119a <_ZN8MAX301055setupEhhhiii+0x9e>
 8001190:	2107      	movs	r1, #7
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fe72 	bl	8000e7c <_ZN8MAX3010510setLEDModeEh>
 8001198:	e00b      	b.n	80011b2 <_ZN8MAX301055setupEhhhiii+0xb6>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 800119a:	787b      	ldrb	r3, [r7, #1]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d104      	bne.n	80011aa <_ZN8MAX301055setupEhhhiii+0xae>
 80011a0:	2103      	movs	r1, #3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe6a 	bl	8000e7c <_ZN8MAX3010510setLEDModeEh>
 80011a8:	e003      	b.n	80011b2 <_ZN8MAX301055setupEhhhiii+0xb6>
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80011aa:	2102      	movs	r1, #2
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fe65 	bl	8000e7c <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	787a      	ldrb	r2, [r7, #1]
 80011b6:	721a      	strb	r2, [r3, #8]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011be:	da04      	bge.n	80011ca <_ZN8MAX301055setupEhhhiii+0xce>
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fe6a 	bl	8000e9c <_ZN8MAX3010511setADCRangeEh>
 80011c8:	e01e      	b.n	8001208 <_ZN8MAX301055setupEhhhiii+0x10c>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d0:	da04      	bge.n	80011dc <_ZN8MAX301055setupEhhhiii+0xe0>
 80011d2:	2120      	movs	r1, #32
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fe61 	bl	8000e9c <_ZN8MAX3010511setADCRangeEh>
 80011da:	e015      	b.n	8001208 <_ZN8MAX301055setupEhhhiii+0x10c>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011e2:	da04      	bge.n	80011ee <_ZN8MAX301055setupEhhhiii+0xf2>
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe58 	bl	8000e9c <_ZN8MAX3010511setADCRangeEh>
 80011ec:	e00c      	b.n	8001208 <_ZN8MAX301055setupEhhhiii+0x10c>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011f4:	d104      	bne.n	8001200 <_ZN8MAX301055setupEhhhiii+0x104>
 80011f6:	2160      	movs	r1, #96	; 0x60
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe4f 	bl	8000e9c <_ZN8MAX3010511setADCRangeEh>
 80011fe:	e003      	b.n	8001208 <_ZN8MAX301055setupEhhhiii+0x10c>
  else setADCRange(MAX30105_ADCRANGE_2048);
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe4a 	bl	8000e9c <_ZN8MAX3010511setADCRangeEh>

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b63      	cmp	r3, #99	; 0x63
 800120c:	dc04      	bgt.n	8001218 <_ZN8MAX301055setupEhhhiii+0x11c>
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fe53 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 8001216:	e041      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2bc7      	cmp	r3, #199	; 0xc7
 800121c:	dc04      	bgt.n	8001228 <_ZN8MAX301055setupEhhhiii+0x12c>
 800121e:	2104      	movs	r1, #4
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe4b 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 8001226:	e039      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800122e:	da04      	bge.n	800123a <_ZN8MAX301055setupEhhhiii+0x13e>
 8001230:	2108      	movs	r1, #8
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe42 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 8001238:	e030      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001240:	da04      	bge.n	800124c <_ZN8MAX301055setupEhhhiii+0x150>
 8001242:	210c      	movs	r1, #12
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe39 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 800124a:	e027      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	da04      	bge.n	800125e <_ZN8MAX301055setupEhhhiii+0x162>
 8001254:	2110      	movs	r1, #16
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe30 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 800125c:	e01e      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001264:	da04      	bge.n	8001270 <_ZN8MAX301055setupEhhhiii+0x174>
 8001266:	2114      	movs	r1, #20
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe27 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 800126e:	e015      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001276:	da04      	bge.n	8001282 <_ZN8MAX301055setupEhhhiii+0x186>
 8001278:	2118      	movs	r1, #24
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fe1e 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 8001280:	e00c      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001288:	d104      	bne.n	8001294 <_ZN8MAX301055setupEhhhiii+0x198>
 800128a:	211c      	movs	r1, #28
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fe15 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>
 8001292:	e003      	b.n	800129c <_ZN8MAX301055setupEhhhiii+0x1a0>
  else setSampleRate(MAX30105_SAMPLERATE_50);
 8001294:	2100      	movs	r1, #0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe10 	bl	8000ebc <_ZN8MAX3010513setSampleRateEh>

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b75      	cmp	r3, #117	; 0x75
 80012a0:	dc04      	bgt.n	80012ac <_ZN8MAX301055setupEhhhiii+0x1b0>
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff fe19 	bl	8000edc <_ZN8MAX3010513setPulseWidthEh>
 80012aa:	e01e      	b.n	80012ea <_ZN8MAX301055setupEhhhiii+0x1ee>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2bd6      	cmp	r3, #214	; 0xd6
 80012b0:	dc04      	bgt.n	80012bc <_ZN8MAX301055setupEhhhiii+0x1c0>
 80012b2:	2101      	movs	r1, #1
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe11 	bl	8000edc <_ZN8MAX3010513setPulseWidthEh>
 80012ba:	e016      	b.n	80012ea <_ZN8MAX301055setupEhhhiii+0x1ee>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80012c2:	dc04      	bgt.n	80012ce <_ZN8MAX301055setupEhhhiii+0x1d2>
 80012c4:	2102      	movs	r1, #2
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fe08 	bl	8000edc <_ZN8MAX3010513setPulseWidthEh>
 80012cc:	e00d      	b.n	80012ea <_ZN8MAX301055setupEhhhiii+0x1ee>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f240 129b 	movw	r2, #411	; 0x19b
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d104      	bne.n	80012e2 <_ZN8MAX301055setupEhhhiii+0x1e6>
 80012d8:	2103      	movs	r1, #3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fdfe 	bl	8000edc <_ZN8MAX3010513setPulseWidthEh>
 80012e0:	e003      	b.n	80012ea <_ZN8MAX301055setupEhhhiii+0x1ee>
  else setPulseWidth(MAX30105_PULSEWIDTH_69);
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fdf9 	bl	8000edc <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe04 	bl	8000efc <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fe10 	bl	8000f1e <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fe1c 	bl	8000f40 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fe28 	bl	8000f62 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fe34 	bl	8000f84 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d904      	bls.n	800132c <_ZN8MAX301055setupEhhhiii+0x230>
 8001322:	2202      	movs	r2, #2
 8001324:	2102      	movs	r1, #2
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fe2c 	bl	8000f84 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d904      	bls.n	800133c <_ZN8MAX301055setupEhhhiii+0x240>
 8001332:	2203      	movs	r2, #3
 8001334:	2103      	movs	r1, #3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fe24 	bl	8000f84 <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe6f 	bl	8001020 <_ZN8MAX301059clearFIFOEv>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 8001352:	21fa      	movs	r1, #250	; 0xfa
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f91e 	bl	8001596 <_ZN8MAX301059safeCheckEh>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <_ZN8MAX301055getIREv+0x28>
    return (sense.IR[sense.head]);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	3306      	adds	r3, #6
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	e000      	b.n	8001374 <_ZN8MAX301055getIREv+0x2a>
  else
    return(0); //Sensor failed to find new data
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  uint8_t readPointer = getReadPointer();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fe86 	bl	8001096 <_ZN8MAX3010514getReadPointerEv>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t writePointer = getWritePointer();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fe70 	bl	8001076 <_ZN8MAX3010515getWritePointerEv>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  int numberOfSamples = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]

  //Do we have new data?
  if (readPointer != writePointer)
 80013a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f000 80ee 	beq.w	800158a <_ZN8MAX301055checkEv+0x20e>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
 80013ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	613b      	str	r3, [r7, #16]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da02      	bge.n	80013c6 <_ZN8MAX301055checkEv+0x4a>
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3320      	adds	r3, #32
 80013c4:	613b      	str	r3, [r7, #16]

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7a1b      	ldrb	r3, [r3, #8]
 80013ca:	461a      	mov	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    //int storeToGet = to

    while (bytesLeftToRead > 0)
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f340 80d4 	ble.w	800158a <_ZN8MAX301055checkEv+0x20e>
        }

        toGet -= activeLEDs * 3;
      }

    } //End while (bytesLeftToRead > 0)
 80013e2:	466b      	mov	r3, sp
 80013e4:	461d      	mov	r5, r3
      int toGet = bytesLeftToRead;
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (toGet > I2C_BUFFER_LENGTH)
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	dd0e      	ble.n	800140e <_ZN8MAX301055checkEv+0x92>
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7a1b      	ldrb	r3, [r3, #8]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	2208      	movs	r2, #8
 80013fe:	fb92 f1f3 	sdiv	r1, r2, r3
 8001402:	fb03 f301 	mul.w	r3, r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f1c3 0308 	rsb	r3, r3, #8
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
      bytesLeftToRead -= toGet;
 800140e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
      int storeToGet = toGet;
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	623b      	str	r3, [r7, #32]
      uint8_t newData[toGet] = {0};
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	1e58      	subs	r0, r3, #1
 800141e:	61f8      	str	r0, [r7, #28]
 8001420:	4603      	mov	r3, r0
 8001422:	3301      	adds	r3, #1
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	f04f 0400 	mov.w	r4, #0
 8001432:	00d4      	lsls	r4, r2, #3
 8001434:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001438:	00cb      	lsls	r3, r1, #3
 800143a:	4603      	mov	r3, r0
 800143c:	3301      	adds	r3, #1
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f04f 0400 	mov.w	r4, #0
 800144c:	00d4      	lsls	r4, r2, #3
 800144e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001452:	00cb      	lsls	r3, r1, #3
 8001454:	4603      	mov	r3, r0
 8001456:	3301      	adds	r3, #1
 8001458:	3307      	adds	r3, #7
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	ebad 0d03 	sub.w	sp, sp, r3
 8001462:	ab02      	add	r3, sp, #8
 8001464:	3300      	adds	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4601      	mov	r1, r0
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	1e4b      	subs	r3, r1, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	db04      	blt.n	8001482 <_ZN8MAX301055checkEv+0x106>
 8001478:	2100      	movs	r1, #0
 800147a:	7011      	strb	r1, [r2, #0]
 800147c:	3201      	adds	r2, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	e7f8      	b.n	8001474 <_ZN8MAX301055checkEv+0xf8>
      readMult(MAX30105_READ_ADDRESS, MAX30105_FIFODATA, newData, (uint16_t)toGet);
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	b29b      	uxth	r3, r3
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	2207      	movs	r2, #7
 800148e:	21af      	movs	r1, #175	; 0xaf
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f8f5 	bl	8001680 <_ZN8MAX301058readMultEhhPht>
      while (toGet > 0)
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd74      	ble.n	8001586 <_ZN8MAX301055checkEv+0x20a>
        sense.head++; //Advance the head of the storage struct
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        sense.head %= STORAGE_SIZE; //Wrap condition
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        int index = storeToGet - toGet;
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
        temp[3] = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
        temp[2] = newData[index+0];
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	73bb      	strb	r3, [r7, #14]
		temp[1] = newData[index+1];
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	737b      	strb	r3, [r7, #13]
		temp[0] = newData[index+2];
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3302      	adds	r3, #2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	733b      	strb	r3, [r7, #12]
        memcpy(&tempLong, temp, sizeof(tempLong));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	60bb      	str	r3, [r7, #8]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80014f2:	60bb      	str	r3, [r7, #8]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	3302      	adds	r3, #2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	605a      	str	r2, [r3, #4]
        if (activeLEDs > 1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7a1b      	ldrb	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d91f      	bls.n	800154e <_ZN8MAX301055checkEv+0x1d2>
          temp[3] = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
          temp[2] = newData[index+3];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3303      	adds	r3, #3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	73bb      	strb	r3, [r7, #14]
          temp[1] = newData[index+4];
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3304      	adds	r3, #4
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	737b      	strb	r3, [r7, #13]
          temp[0] = newData[index+5];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3305      	adds	r3, #5
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	733b      	strb	r3, [r7, #12]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	60bb      	str	r3, [r7, #8]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800153a:	60bb      	str	r3, [r7, #8]
		  sense.IR[sense.head] = tempLong;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	3306      	adds	r3, #6
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	605a      	str	r2, [r3, #4]
        if (activeLEDs > 2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7a1b      	ldrb	r3, [r3, #8]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d90e      	bls.n	8001574 <_ZN8MAX301055checkEv+0x1f8>
          memcpy(&tempLong, temp, sizeof(tempLong));
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	60bb      	str	r3, [r7, #8]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001560:	60bb      	str	r3, [r7, #8]
          sense.green[sense.head] = tempLong;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	330a      	adds	r3, #10
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	605a      	str	r2, [r3, #4]
        toGet -= activeLEDs * 3;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7a1b      	ldrb	r3, [r3, #8]
 8001578:	461a      	mov	r2, r3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001580:	4413      	add	r3, r2
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (toGet > 0)
 8001584:	e787      	b.n	8001496 <_ZN8MAX301055checkEv+0x11a>
 8001586:	46ad      	mov	sp, r5
    while (bytesLeftToRead > 0)
 8001588:	e727      	b.n	80013da <_ZN8MAX301055checkEv+0x5e>

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}

08001596 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	70fb      	strb	r3, [r7, #3]
  uint32_t markTime = millis();
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f8a8 	bl	80016f8 <_ZN8MAX301056millisEv>
 80015a8:	60f8      	str	r0, [r7, #12]
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f8a4 	bl	80016f8 <_ZN8MAX301056millisEv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	bf8c      	ite	hi
 80015bc:	2301      	movhi	r3, #1
 80015be:	2300      	movls	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZN8MAX301059safeCheckEh+0x34>
 80015c6:	2300      	movs	r3, #0
 80015c8:	e011      	b.n	80015ee <_ZN8MAX301059safeCheckEh+0x58>

	if(check() == true) //We found new data!
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fed6 	bl	800137c <_ZN8MAX301055checkEv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_ZN8MAX301059safeCheckEh+0x4e>
	  return(true);
 80015e0:	2301      	movs	r3, #1
 80015e2:	e004      	b.n	80015ee <_ZN8MAX301059safeCheckEh+0x58>

	delay(1);
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f891 	bl	800170e <_ZN8MAX301055delayEm>
	if(millis() - markTime > maxTimeToCheck) return(false);
 80015ec:	e7dd      	b.n	80015aa <_ZN8MAX301059safeCheckEh+0x14>
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZN8MAX301057bitMaskEhhh>:

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	4608      	mov	r0, r1
 8001600:	4611      	mov	r1, r2
 8001602:	461a      	mov	r2, r3
 8001604:	4603      	mov	r3, r0
 8001606:	70fb      	strb	r3, [r7, #3]
 8001608:	460b      	mov	r3, r1
 800160a:	70bb      	strb	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f814 	bl	8001646 <_ZN8MAX3010513readRegister8Ehh>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	78bb      	ldrb	r3, [r7, #2]
 8001626:	4013      	ands	r3, r2
 8001628:	73fb      	strb	r3, [r7, #15]

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	4313      	orrs	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f83d 	bl	80016b8 <_ZN8MAX3010514writeRegister8Ehhh>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZN8MAX3010513readRegister8Ehh>:

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 8001646:	b580      	push	{r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af04      	add	r7, sp, #16
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	4613      	mov	r3, r2
 8001654:	70bb      	strb	r3, [r7, #2]
  return (0); //Fail
  */
  
  uint8_t read_value;
  
  HAL_I2C_Mem_Read(_i2c_handler, MAX30105_READ_ADDRESS, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6858      	ldr	r0, [r3, #4]
 800165a:	78bb      	ldrb	r3, [r7, #2]
 800165c:	b29a      	uxth	r2, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	f107 030f 	add.w	r3, r7, #15
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	21af      	movs	r1, #175	; 0xaf
 8001672:	f003 ff73 	bl	800555c <HAL_I2C_Mem_Read>
  
  return read_value;
 8001676:	7bfb      	ldrb	r3, [r7, #15]

}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN8MAX301058readMultEhhPht>:

void MAX30105::readMult(uint8_t address, uint8_t reg, uint8_t *Buffer, uint16_t Length) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	72fb      	strb	r3, [r7, #11]
 800168e:	4613      	mov	r3, r2
 8001690:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Mem_Read(_i2c_handler, MAX30105_READ_ADDRESS, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length, 1000);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6858      	ldr	r0, [r3, #4]
 8001696:	7abb      	ldrb	r3, [r7, #10]
 8001698:	b29a      	uxth	r2, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	21af      	movs	r1, #175	; 0xaf
 80016ac:	f003 ff56 	bl	800555c <HAL_I2C_Mem_Read>

	return;
 80016b0:	bf00      	nop

}
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af04      	add	r7, sp, #16
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	70fb      	strb	r3, [r7, #3]
 80016ca:	460b      	mov	r3, r1
 80016cc:	70bb      	strb	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	707b      	strb	r3, [r7, #1]
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
  */
  
  HAL_I2C_Mem_Write(_i2c_handler, MAX30105_WRITE_ADDRESS, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6858      	ldr	r0, [r3, #4]
 80016d6:	78bb      	ldrb	r3, [r7, #2]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	1c7b      	adds	r3, r7, #1
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	21ae      	movs	r1, #174	; 0xae
 80016ec:	f003 fe22 	bl	8005334 <HAL_I2C_Mem_Write>
  
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN8MAX301056millisEv>:

uint32_t MAX30105::millis() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	
	//unsigned long tick = HAL_GetTick();
	
	return HAL_GetTick();
 8001700:	f003 fa18 	bl	8004b34 <HAL_GetTick>
 8001704:	4603      	mov	r3, r0

}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZN8MAX301055delayEm>:

void MAX30105::delay(uint32_t msDelay) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	
	HAL_Delay(msDelay);
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f003 fa17 	bl	8004b4c <HAL_Delay>
	
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b2f      	cmp	r3, #47	; 0x2f
 8001734:	d906      	bls.n	8001744 <Hex2Num+0x1e>
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b39      	cmp	r3, #57	; 0x39
 800173a:	d803      	bhi.n	8001744 <Hex2Num+0x1e>
        return a - '0';
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3b30      	subs	r3, #48	; 0x30
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e014      	b.n	800176e <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b60      	cmp	r3, #96	; 0x60
 8001748:	d906      	bls.n	8001758 <Hex2Num+0x32>
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b66      	cmp	r3, #102	; 0x66
 800174e:	d803      	bhi.n	8001758 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3b57      	subs	r3, #87	; 0x57
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e00a      	b.n	800176e <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d906      	bls.n	800176c <Hex2Num+0x46>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b46      	cmp	r3, #70	; 0x46
 8001762:	d803      	bhi.n	800176c <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3b37      	subs	r3, #55	; 0x37
 8001768:	b2db      	uxtb	r3, r3
 800176a:	e000      	b.n	800176e <Hex2Num+0x48>
    }

    return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800178c:	e012      	b.n	80017b4 <ParseHexNumber+0x3a>
        sum <<= 4;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ffc4 	bl	8001726 <Hex2Num>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
        ptr++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
        i++;
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	3301      	adds	r3, #1
 80017b2:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b2f      	cmp	r3, #47	; 0x2f
 80017ba:	d903      	bls.n	80017c4 <ParseHexNumber+0x4a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b39      	cmp	r3, #57	; 0x39
 80017c2:	d9e4      	bls.n	800178e <ParseHexNumber+0x14>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b60      	cmp	r3, #96	; 0x60
 80017ca:	d903      	bls.n	80017d4 <ParseHexNumber+0x5a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b66      	cmp	r3, #102	; 0x66
 80017d2:	d9dc      	bls.n	800178e <ParseHexNumber+0x14>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b40      	cmp	r3, #64	; 0x40
 80017da:	d903      	bls.n	80017e4 <ParseHexNumber+0x6a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b46      	cmp	r3, #70	; 0x46
 80017e2:	d9d4      	bls.n	800178e <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <ParseHexNumber+0x76>
        *cnt = i;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	7afa      	ldrb	r2, [r7, #11]
 80017ee:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b2d      	cmp	r3, #45	; 0x2d
 8001816:	d119      	bne.n	800184c <ParseNumber+0x52>
        minus = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
        i++;
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	3301      	adds	r3, #1
 8001826:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001828:	e010      	b.n	800184c <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3b30      	subs	r3, #48	; 0x30
 800183c:	4413      	add	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
        i++;
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	3301      	adds	r3, #1
 800184a:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b2f      	cmp	r3, #47	; 0x2f
 8001852:	d903      	bls.n	800185c <ParseNumber+0x62>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b39      	cmp	r3, #57	; 0x39
 800185a:	d9e6      	bls.n	800182a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <ParseNumber+0x6e>
        *cnt = i;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	7bba      	ldrb	r2, [r7, #14]
 8001866:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <ParseNumber+0x7a>
        return 0 - sum;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	425b      	negs	r3, r3
 8001872:	e000      	b.n	8001876 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8001874:	68bb      	ldr	r3, [r7, #8]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001890:	e019      	b.n	80018c6 <ParseMAC+0x44>
    hexcnt = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b3a      	cmp	r3, #58	; 0x3a
 800189c:	d00e      	beq.n	80018bc <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800189e:	f107 030e 	add.w	r3, r7, #14
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff68 	bl	800177a <ParseHexNumber>
 80018aa:	4601      	mov	r1, r0
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	73fa      	strb	r2, [r7, #15]
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	b2ca      	uxtb	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e1      	bne.n	8001892 <ParseMAC+0x10>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80018e4:	e019      	b.n	800191a <ParseIP+0x44>
    hexcnt = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b2e      	cmp	r3, #46	; 0x2e
 80018f0:	d00e      	beq.n	8001910 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80018f2:	f107 030e 	add.w	r3, r7, #14
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff7e 	bl	80017fa <ParseNumber>
 80018fe:	4601      	mov	r1, r0
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	73fa      	strb	r2, [r7, #15]
 8001906:	461a      	mov	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e1      	bne.n	80018e6 <ParseIP+0x10>
  }
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3302      	adds	r3, #2
 800193e:	4934      	ldr	r1, [pc, #208]	; (8001a10 <AT_ParseInfo+0xe4>)
 8001940:	4618      	mov	r0, r3
 8001942:	f008 f869 	bl	8009a18 <strtok>
 8001946:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001948:	e05a      	b.n	8001a00 <AT_ParseInfo+0xd4>
    switch (num++) {
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	72fa      	strb	r2, [r7, #11]
 8001950:	2b06      	cmp	r3, #6
 8001952:	d84f      	bhi.n	80019f4 <AT_ParseInfo+0xc8>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <AT_ParseInfo+0x30>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	08001979 	.word	0x08001979
 8001960:	08001987 	.word	0x08001987
 8001964:	08001997 	.word	0x08001997
 8001968:	080019a7 	.word	0x080019a7
 800196c:	080019b7 	.word	0x080019b7
 8001970:	080019c7 	.word	0x080019c7
 8001974:	080019db 	.word	0x080019db
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f008 f81b 	bl	80099ba <strncpy>
      break;
 8001984:	e037      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3320      	adds	r3, #32
 800198a:	2218      	movs	r2, #24
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	4618      	mov	r0, r3
 8001990:	f008 f813 	bl	80099ba <strncpy>
      break;
 8001994:	e02f      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3338      	adds	r3, #56	; 0x38
 800199a:	2210      	movs	r2, #16
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 f80b 	bl	80099ba <strncpy>
      break;
 80019a4:	e027      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3348      	adds	r3, #72	; 0x48
 80019aa:	2210      	movs	r2, #16
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f008 f803 	bl	80099ba <strncpy>
      break;
 80019b4:	e01f      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3358      	adds	r3, #88	; 0x58
 80019ba:	2210      	movs	r2, #16
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	f007 fffb 	bl	80099ba <strncpy>
      break;
 80019c4:	e017      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80019c6:	2100      	movs	r1, #0
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff ff16 	bl	80017fa <ParseNumber>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80019d8:	e00d      	b.n	80019f6 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <AT_ParseInfo+0xe8>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f008 f81b 	bl	8009a18 <strtok>
 80019e2:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3368      	adds	r3, #104	; 0x68
 80019e8:	2220      	movs	r2, #32
 80019ea:	68f9      	ldr	r1, [r7, #12]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f007 ffe4 	bl	80099ba <strncpy>
      break;
 80019f2:	e000      	b.n	80019f6 <AT_ParseInfo+0xca>

    default: break;
 80019f4:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80019f6:	4906      	ldr	r1, [pc, #24]	; (8001a10 <AT_ParseInfo+0xe4>)
 80019f8:	2000      	movs	r0, #0
 80019fa:	f008 f80d 	bl	8009a18 <strtok>
 80019fe:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1a1      	bne.n	800194a <AT_ParseInfo+0x1e>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	0800abe4 	.word	0x0800abe4
 8001a14:	0800abe8 	.word	0x0800abe8

08001a18 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	4952      	ldr	r1, [pc, #328]	; (8001b74 <AT_ParseConnSettings+0x15c>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f007 fff3 	bl	8009a18 <strtok>
 8001a32:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001a34:	e095      	b.n	8001b62 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	73fa      	strb	r2, [r7, #15]
 8001a3c:	2b0b      	cmp	r3, #11
 8001a3e:	d87f      	bhi.n	8001b40 <AT_ParseConnSettings+0x128>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <AT_ParseConnSettings+0x30>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a79 	.word	0x08001a79
 8001a4c:	08001a87 	.word	0x08001a87
 8001a50:	08001a97 	.word	0x08001a97
 8001a54:	08001aab 	.word	0x08001aab
 8001a58:	08001abf 	.word	0x08001abf
 8001a5c:	08001ad3 	.word	0x08001ad3
 8001a60:	08001ae1 	.word	0x08001ae1
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001afd 	.word	0x08001afd
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b19 	.word	0x08001b19
 8001a74:	08001b2d 	.word	0x08001b2d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2221      	movs	r2, #33	; 0x21
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 ff9b 	bl	80099ba <strncpy>
      break;
 8001a84:	e05d      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	3321      	adds	r3, #33	; 0x21
 8001a8a:	2221      	movs	r2, #33	; 0x21
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 ff93 	bl	80099ba <strncpy>
      break;
 8001a94:	e055      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001a96:	2100      	movs	r1, #0
 8001a98:	68b8      	ldr	r0, [r7, #8]
 8001a9a:	f7ff feae 	bl	80017fa <ParseNumber>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001aa8:	e04b      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	68b8      	ldr	r0, [r7, #8]
 8001aae:	f7ff fea4 	bl	80017fa <ParseNumber>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001abc:	e041      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f7ff fe9a 	bl	80017fa <ParseNumber>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001ad0:	e037      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3348      	adds	r3, #72	; 0x48
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	f7ff fefc 	bl	80018d6 <ParseIP>
      break;
 8001ade:	e030      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	334c      	adds	r3, #76	; 0x4c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff fef5 	bl	80018d6 <ParseIP>
      break;
 8001aec:	e029      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	3350      	adds	r3, #80	; 0x50
 8001af2:	4619      	mov	r1, r3
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7ff feee 	bl	80018d6 <ParseIP>
      break;
 8001afa:	e022      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	3354      	adds	r3, #84	; 0x54
 8001b00:	4619      	mov	r1, r3
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f7ff fee7 	bl	80018d6 <ParseIP>
      break;
 8001b08:	e01b      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3358      	adds	r3, #88	; 0x58
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68b8      	ldr	r0, [r7, #8]
 8001b12:	f7ff fee0 	bl	80018d6 <ParseIP>
      break;
 8001b16:	e014      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	68b8      	ldr	r0, [r7, #8]
 8001b1c:	f7ff fe6d 	bl	80017fa <ParseNumber>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001b2a:	e00a      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f7ff fe63 	bl	80017fa <ParseNumber>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001b3e:	e000      	b.n	8001b42 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001b40:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001b42:	490c      	ldr	r1, [pc, #48]	; (8001b74 <AT_ParseConnSettings+0x15c>)
 8001b44:	2000      	movs	r0, #0
 8001b46:	f007 ff67 	bl	8009a18 <strtok>
 8001b4a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <AT_ParseConnSettings+0x14a>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b2c      	cmp	r3, #44	; 0x2c
 8001b5a:	d102      	bne.n	8001b62 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f af66 	bne.w	8001a36 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800abe4 	.word	0x0800abe4

08001b78 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3302      	adds	r3, #2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b31      	cmp	r3, #49	; 0x31
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	f7fe fb06 	bl	80001d0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b299      	uxth	r1, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	47a0      	blx	r4
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dd3e      	ble.n	8001c5c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001bea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001bf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	dd27      	ble.n	8001c4e <AT_ExecuteCommand+0xaa>
 8001bfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c06:	dc22      	bgt.n	8001c4e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001c08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c10:	d105      	bne.n	8001c1e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001c12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001c1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8001c2a:	490f      	ldr	r1, [pc, #60]	; (8001c68 <AT_ExecuteCommand+0xc4>)
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f007 fed9 	bl	80099e4 <strstr>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e010      	b.n	8001c5e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001c3c:	490b      	ldr	r1, [pc, #44]	; (8001c6c <AT_ExecuteCommand+0xc8>)
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f007 fed0 	bl	80099e4 <strstr>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e007      	b.n	8001c5e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001c4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c52:	f113 0f04 	cmn.w	r3, #4
 8001c56:	d101      	bne.n	8001c5c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	e000      	b.n	8001c5e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001c5c:	2304      	movs	r3, #4
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800abf8 	.word	0x0800abf8
 8001c6c:	0800ac04 	.word	0x0800ac04

08001c70 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	f7fe faa0 	bl	80001d0 <strlen>
 8001c90:	4603      	mov	r3, r0
 8001c92:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <AT_RequestSendData+0x32>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e053      	b.n	8001d4a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001cae:	8a79      	ldrh	r1, [r7, #18]
 8001cb0:	68b8      	ldr	r0, [r7, #8]
 8001cb2:	4798      	blx	r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001cb8:	8a3a      	ldrh	r2, [r7, #16]
 8001cba:	8a7b      	ldrh	r3, [r7, #18]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d143      	bne.n	8001d48 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001ccc:	8879      	ldrh	r1, [r7, #2]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001cd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d131      	bne.n	8001d44 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001cec:	2100      	movs	r1, #0
 8001cee:	6a38      	ldr	r0, [r7, #32]
 8001cf0:	4798      	blx	r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001cf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd19      	ble.n	8001d32 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001cfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001d0a:	4912      	ldr	r1, [pc, #72]	; (8001d54 <AT_RequestSendData+0xe4>)
 8001d0c:	6a38      	ldr	r0, [r7, #32]
 8001d0e:	f007 fe69 	bl	80099e4 <strstr>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e016      	b.n	8001d4a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <AT_RequestSendData+0xe8>)
 8001d1e:	6a38      	ldr	r0, [r7, #32]
 8001d20:	f007 fe60 	bl	80099e4 <strstr>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e00d      	b.n	8001d4a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e00b      	b.n	8001d4a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001d32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d36:	f113 0f04 	cmn.w	r3, #4
 8001d3a:	d101      	bne.n	8001d40 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e004      	b.n	8001d4a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e002      	b.n	8001d4a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001d44:	2302      	movs	r3, #2
 8001d46:	e000      	b.n	8001d4a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001d48:	2304      	movs	r3, #4
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0800abf8 	.word	0x0800abf8
 8001d58:	0800ac04 	.word	0x0800ac04

08001d5c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d70:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	f7fe fa29 	bl	80001d0 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b299      	uxth	r1, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68b8      	ldr	r0, [r7, #8]
 8001d8c:	47a0      	blx	r4
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd6f      	ble.n	8001e74 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001da0:	2100      	movs	r1, #0
 8001da2:	6938      	ldr	r0, [r7, #16]
 8001da4:	4798      	blx	r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b0d      	cmp	r3, #13
 8001db0:	d104      	bne.n	8001dbc <AT_RequestReceiveData+0x60>
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b0a      	cmp	r3, #10
 8001dba:	d001      	beq.n	8001dc0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e05a      	b.n	8001e76 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3b02      	subs	r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
    p+=2;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d94a      	bls.n	8001e68 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001dd2:	e002      	b.n	8001dda <AT_RequestReceiveData+0x7e>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <AT_RequestReceiveData+0x92>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b15      	cmp	r3, #21
 8001dec:	d0f2      	beq.n	8001dd4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	491f      	ldr	r1, [pc, #124]	; (8001e80 <AT_RequestReceiveData+0x124>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f007 fdee 	bl	80099e4 <strstr>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b08      	subs	r3, #8
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d202      	bcs.n	8001e2a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f007 fcf1 	bl	800981a <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e01c      	b.n	8001e76 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	2204      	movs	r2, #4
 8001e46:	490f      	ldr	r1, [pc, #60]	; (8001e84 <AT_RequestReceiveData+0x128>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f007 fcd7 	bl	80097fc <memcmp>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	e00b      	b.n	8001e76 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001e64:	2305      	movs	r3, #5
 8001e66:	e006      	b.n	8001e76 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f113 0f04 	cmn.w	r3, #4
 8001e6e:	d101      	bne.n	8001e74 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001e70:	2306      	movs	r3, #6
 8001e72:	e000      	b.n	8001e76 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001e74:	2304      	movs	r3, #4
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	0800abf8 	.word	0x0800abf8
 8001e84:	0800ac0c 	.word	0x0800ac0c

08001e88 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001e90:	2302      	movs	r3, #2
 8001e92:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e9a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	4798      	blx	r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d113      	bne.n	8001ed6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <ES_WIFI_Init+0x58>)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fe73 	bl	8001ba4 <AT_ExecuteCommand>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fd2b 	bl	800192c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	0800ac14 	.word	0x0800ac14

08001ee4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00b      	beq.n	8001f10 <ES_WIFI_RegisterBusIO+0x2c>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <ES_WIFI_RegisterBusIO+0x2c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <ES_WIFI_RegisterBusIO+0x2c>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <ES_WIFI_RegisterBusIO+0x2c>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001f10:	2302      	movs	r3, #2
 8001f12:	e014      	b.n	8001f3e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	4931      	ldr	r1, [pc, #196]	; (8002028 <ES_WIFI_Connect+0xdc>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 fce7 	bl	8009938 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f76:	461a      	mov	r2, r3
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff fe13 	bl	8001ba4 <AT_ExecuteCommand>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d14a      	bne.n	800201e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4926      	ldr	r1, [pc, #152]	; (800202c <ES_WIFI_Connect+0xe0>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f007 fcd0 	bl	8009938 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fdfc 	bl	8001ba4 <AT_ExecuteCommand>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d133      	bne.n	800201e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	491a      	ldr	r1, [pc, #104]	; (8002030 <ES_WIFI_Connect+0xe4>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f007 fcb5 	bl	8009938 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff fde1 	bl	8001ba4 <AT_ExecuteCommand>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d118      	bne.n	800201e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <ES_WIFI_Connect+0xe8>)
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002004:	461a      	mov	r2, r3
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff fdcc 	bl	8001ba4 <AT_ExecuteCommand>
 800200c:	4603      	mov	r3, r0
 800200e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	0800ac2c 	.word	0x0800ac2c
 800202c:	0800ac34 	.word	0x0800ac34
 8002030:	0800ac3c 	.word	0x0800ac3c
 8002034:	0800ac44 	.word	0x0800ac44

08002038 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <ES_WIFI_IsConnected+0x54>)
 8002048:	6810      	ldr	r0, [r2, #0]
 800204a:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002058:	461a      	mov	r2, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fda2 	bl	8001ba4 <AT_ExecuteCommand>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	33d2      	adds	r3, #210	; 0xd2
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7ff fd7e 	bl	8001b78 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800ac48 	.word	0x0800ac48

08002090 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800209e:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <ES_WIFI_GetNetworkSettings+0x50>)
 80020a0:	6810      	ldr	r0, [r2, #0]
 80020a2:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020b0:	461a      	mov	r2, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd76 	bl	8001ba4 <AT_ExecuteCommand>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	338d      	adds	r3, #141	; 0x8d
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff fca2 	bl	8001a18 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	0800ac50 	.word	0x0800ac50

080020e4 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <ES_WIFI_GetMACAddress+0x58>)
 80020f6:	6810      	ldr	r0, [r2, #0]
 80020f8:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002106:	461a      	mov	r2, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fd4b 	bl	8001ba4 <AT_ExecuteCommand>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10c      	bne.n	8002132 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800211e:	3302      	adds	r3, #2
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <ES_WIFI_GetMACAddress+0x5c>)
 8002122:	4618      	mov	r0, r3
 8002124:	f007 fc78 	bl	8009a18 <strtok>
 8002128:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	68b8      	ldr	r0, [r7, #8]
 800212e:	f7ff fba8 	bl	8001882 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	0800acac 	.word	0x0800acac
 8002140:	0800acb0 	.word	0x0800acb0

08002144 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	461a      	mov	r2, r3
 800215e:	494d      	ldr	r1, [pc, #308]	; (8002294 <ES_WIFI_StartServerSingleConn+0x150>)
 8002160:	f007 fbea 	bl	8009938 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002170:	461a      	mov	r2, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fd16 	bl	8001ba4 <AT_ExecuteCommand>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	e082      	b.n	800228c <ES_WIFI_StartServerSingleConn+0x148>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d01c      	beq.n	80021c8 <ES_WIFI_StartServerSingleConn+0x84>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d018      	beq.n	80021c8 <ES_WIFI_StartServerSingleConn+0x84>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800219c:	493e      	ldr	r1, [pc, #248]	; (8002298 <ES_WIFI_StartServerSingleConn+0x154>)
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	cb03      	ldmia	r3!, {r0, r1}
 80021a4:	6010      	str	r0, [r2, #0]
 80021a6:	6051      	str	r1, [r2, #4]
 80021a8:	8819      	ldrh	r1, [r3, #0]
 80021aa:	789b      	ldrb	r3, [r3, #2]
 80021ac:	8111      	strh	r1, [r2, #8]
 80021ae:	7293      	strb	r3, [r2, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021bc:	461a      	mov	r2, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fcf0 	bl	8001ba4 <AT_ExecuteCommand>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d15d      	bne.n	800228a <ES_WIFI_StartServerSingleConn+0x146>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4930      	ldr	r1, [pc, #192]	; (800229c <ES_WIFI_StartServerSingleConn+0x158>)
 80021dc:	f007 fbac 	bl	8009938 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ec:	461a      	mov	r2, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fcd8 	bl	8001ba4 <AT_ExecuteCommand>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d145      	bne.n	800228a <ES_WIFI_StartServerSingleConn+0x146>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	7c1b      	ldrb	r3, [r3, #16]
 8002208:	461a      	mov	r2, r3
 800220a:	4925      	ldr	r1, [pc, #148]	; (80022a0 <ES_WIFI_StartServerSingleConn+0x15c>)
 800220c:	f007 fb94 	bl	8009938 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800221c:	461a      	mov	r2, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fcc0 	bl	8001ba4 <AT_ExecuteCommand>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12d      	bne.n	800228a <ES_WIFI_StartServerSingleConn+0x146>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	889b      	ldrh	r3, [r3, #4]
 8002238:	461a      	mov	r2, r3
 800223a:	491a      	ldr	r1, [pc, #104]	; (80022a4 <ES_WIFI_StartServerSingleConn+0x160>)
 800223c:	f007 fb7c 	bl	8009938 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800224c:	461a      	mov	r2, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fca8 	bl	8001ba4 <AT_ExecuteCommand>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <ES_WIFI_StartServerSingleConn+0x146>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <ES_WIFI_StartServerSingleConn+0x164>)
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	6018      	str	r0, [r3, #0]
 800226a:	8891      	ldrh	r1, [r2, #4]
 800226c:	7992      	ldrb	r2, [r2, #6]
 800226e:	8099      	strh	r1, [r3, #4]
 8002270:	719a      	strb	r2, [r3, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800227e:	461a      	mov	r2, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fc8f 	bl	8001ba4 <AT_ExecuteCommand>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	0800ad14 	.word	0x0800ad14
 8002298:	0800ad5c 	.word	0x0800ad5c
 800229c:	0800ad1c 	.word	0x0800ad1c
 80022a0:	0800ad68 	.word	0x0800ad68
 80022a4:	0800ad24 	.word	0x0800ad24
 80022a8:	0800ad70 	.word	0x0800ad70

080022ac <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 80022be:	f002 fc39 	bl	8004b34 <HAL_GetTick>
 80022c2:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d201      	bcs.n	80022d8 <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f007 faa3 	bl	8009830 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022f0:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <ES_WIFI_WaitServerConnection+0x20c>)
 80022f2:	6810      	ldr	r0, [r2, #0]
 80022f4:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002302:	461a      	mov	r2, r3
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fc4d 	bl	8001ba4 <AT_ExecuteCommand>
 800230a:	4603      	mov	r3, r0
 800230c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8002310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002314:	2b00      	cmp	r3, #0
 8002316:	d136      	bne.n	8002386 <ES_WIFI_WaitServerConnection+0xda>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800231e:	4967      	ldr	r1, [pc, #412]	; (80024bc <ES_WIFI_WaitServerConnection+0x210>)
 8002320:	4618      	mov	r0, r3
 8002322:	f007 fb5f 	bl	80099e4 <strstr>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03b      	beq.n	80023a4 <ES_WIFI_WaitServerConnection+0xf8>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002332:	4963      	ldr	r1, [pc, #396]	; (80024c0 <ES_WIFI_WaitServerConnection+0x214>)
 8002334:	4618      	mov	r0, r3
 8002336:	f007 fb55 	bl	80099e4 <strstr>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d031      	beq.n	80023a4 <ES_WIFI_WaitServerConnection+0xf8>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002346:	495f      	ldr	r1, [pc, #380]	; (80024c4 <ES_WIFI_WaitServerConnection+0x218>)
 8002348:	4618      	mov	r0, r3
 800234a:	f007 fb4b 	bl	80099e4 <strstr>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d127      	bne.n	80023a4 <ES_WIFI_WaitServerConnection+0xf8>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800235a:	495b      	ldr	r1, [pc, #364]	; (80024c8 <ES_WIFI_WaitServerConnection+0x21c>)
 800235c:	4618      	mov	r0, r3
 800235e:	f007 fb41 	bl	80099e4 <strstr>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <ES_WIFI_WaitServerConnection+0xf8>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8002368:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800236c:	4957      	ldr	r1, [pc, #348]	; (80024cc <ES_WIFI_WaitServerConnection+0x220>)
 800236e:	4858      	ldr	r0, [pc, #352]	; (80024d0 <ES_WIFI_WaitServerConnection+0x224>)
 8002370:	f007 fa66 	bl	8009840 <iprintf>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800237a:	4619      	mov	r1, r3
 800237c:	4855      	ldr	r0, [pc, #340]	; (80024d4 <ES_WIFI_WaitServerConnection+0x228>)
 800237e:	f007 fa5f 	bl	8009840 <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8002382:	2302      	movs	r3, #2
 8002384:	e094      	b.n	80024b0 <ES_WIFI_WaitServerConnection+0x204>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8002386:	f44f 62e9 	mov.w	r2, #1864	; 0x748
 800238a:	4950      	ldr	r1, [pc, #320]	; (80024cc <ES_WIFI_WaitServerConnection+0x220>)
 800238c:	4850      	ldr	r0, [pc, #320]	; (80024d0 <ES_WIFI_WaitServerConnection+0x224>)
 800238e:	f007 fa57 	bl	8009840 <iprintf>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002398:	4619      	mov	r1, r3
 800239a:	484f      	ldr	r0, [pc, #316]	; (80024d8 <ES_WIFI_WaitServerConnection+0x22c>)
 800239c:	f007 fa50 	bl	8009840 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e085      	b.n	80024b0 <ES_WIFI_WaitServerConnection+0x204>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 fa3d 	bl	8009830 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023bc:	4a47      	ldr	r2, [pc, #284]	; (80024dc <ES_WIFI_WaitServerConnection+0x230>)
 80023be:	6810      	ldr	r0, [r2, #0]
 80023c0:	6018      	str	r0, [r3, #0]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023ce:	461a      	mov	r2, r3
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fbe7 	bl	8001ba4 <AT_ExecuteCommand>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 80023dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d13f      	bne.n	8002464 <ES_WIFI_WaitServerConnection+0x1b8>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023ea:	220c      	movs	r2, #12
 80023ec:	493c      	ldr	r1, [pc, #240]	; (80024e0 <ES_WIFI_WaitServerConnection+0x234>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f007 fad1 	bl	8009996 <strncmp>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d043      	beq.n	8002482 <ES_WIFI_WaitServerConnection+0x1d6>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002400:	3302      	adds	r3, #2
 8002402:	4938      	ldr	r1, [pc, #224]	; (80024e4 <ES_WIFI_WaitServerConnection+0x238>)
 8002404:	4618      	mov	r0, r3
 8002406:	f007 fb07 	bl	8009a18 <strtok>
 800240a:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 800240c:	4935      	ldr	r1, [pc, #212]	; (80024e4 <ES_WIFI_WaitServerConnection+0x238>)
 800240e:	2000      	movs	r0, #0
 8002410:	f007 fb02 	bl	8009a18 <strtok>
 8002414:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3306      	adds	r3, #6
 800241a:	4619      	mov	r1, r3
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f7ff fa5a 	bl	80018d6 <ParseIP>
        ptr = strtok(0, ","); //port
 8002422:	4930      	ldr	r1, [pc, #192]	; (80024e4 <ES_WIFI_WaitServerConnection+0x238>)
 8002424:	2000      	movs	r0, #0
 8002426:	f007 faf7 	bl	8009a18 <strtok>
 800242a:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 800242c:	2100      	movs	r1, #0
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff f9e3 	bl	80017fa <ParseNumber>
 8002434:	4603      	mov	r3, r0
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 800243c:	4929      	ldr	r1, [pc, #164]	; (80024e4 <ES_WIFI_WaitServerConnection+0x238>)
 800243e:	2000      	movs	r0, #0
 8002440:	f007 faea 	bl	8009a18 <strtok>
 8002444:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <ES_WIFI_WaitServerConnection+0x238>)
 8002448:	2000      	movs	r0, #0
 800244a:	f007 fae5 	bl	8009a18 <strtok>
 800244e:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8002450:	2100      	movs	r1, #0
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff f9d1 	bl	80017fa <ParseNumber>
 8002458:	4603      	mov	r3, r0
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e025      	b.n	80024b0 <ES_WIFI_WaitServerConnection+0x204>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8002464:	f240 7263 	movw	r2, #1891	; 0x763
 8002468:	4918      	ldr	r1, [pc, #96]	; (80024cc <ES_WIFI_WaitServerConnection+0x220>)
 800246a:	4819      	ldr	r0, [pc, #100]	; (80024d0 <ES_WIFI_WaitServerConnection+0x224>)
 800246c:	f007 f9e8 	bl	8009840 <iprintf>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002476:	4619      	mov	r1, r3
 8002478:	481b      	ldr	r0, [pc, #108]	; (80024e8 <ES_WIFI_WaitServerConnection+0x23c>)
 800247a:	f007 f9e1 	bl	8009840 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 800247e:	2302      	movs	r3, #2
 8002480:	e016      	b.n	80024b0 <ES_WIFI_WaitServerConnection+0x204>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002488:	2064      	movs	r0, #100	; 0x64
 800248a:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 800248c:	f002 fb52 	bl	8004b34 <HAL_GetTick>
 8002490:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f43f af1f 	beq.w	80022d8 <ES_WIFI_WaitServerConnection+0x2c>
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	429a      	cmp	r2, r3
 80024a0:	f4ff af1a 	bcc.w	80022d8 <ES_WIFI_WaitServerConnection+0x2c>
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f4ff af15 	bcc.w	80022d8 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	0800ac24 	.word	0x0800ac24
 80024bc:	0800ad78 	.word	0x0800ad78
 80024c0:	0800ad80 	.word	0x0800ad80
 80024c4:	0800ad88 	.word	0x0800ad88
 80024c8:	0800ad94 	.word	0x0800ad94
 80024cc:	0800ada4 	.word	0x0800ada4
 80024d0:	0800adbc 	.word	0x0800adbc
 80024d4:	0800adc4 	.word	0x0800adc4
 80024d8:	0800addc 	.word	0x0800addc
 80024dc:	0800adf4 	.word	0x0800adf4
 80024e0:	0800adf8 	.word	0x0800adf8
 80024e4:	0800abe4 	.word	0x0800abe4
 80024e8:	0800ae08 	.word	0x0800ae08

080024ec <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4926      	ldr	r1, [pc, #152]	; (8002598 <ES_WIFI_CloseServerConnection+0xac>)
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fa19 	bl	8009938 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002512:	461a      	mov	r2, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fb45 	bl	8001ba4 <AT_ExecuteCommand>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8002524:	f240 727f 	movw	r2, #1919	; 0x77f
 8002528:	491c      	ldr	r1, [pc, #112]	; (800259c <ES_WIFI_CloseServerConnection+0xb0>)
 800252a:	481d      	ldr	r0, [pc, #116]	; (80025a0 <ES_WIFI_CloseServerConnection+0xb4>)
 800252c:	f007 f988 	bl	8009840 <iprintf>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <ES_WIFI_CloseServerConnection+0xb8>)
 800253a:	f007 f981 	bl	8009840 <iprintf>
    UNLOCK_WIFI();
    return ret;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	e026      	b.n	8002590 <ES_WIFI_CloseServerConnection+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <ES_WIFI_CloseServerConnection+0xbc>)
 800254a:	6810      	ldr	r0, [r2, #0]
 800254c:	6018      	str	r0, [r3, #0]
 800254e:	8891      	ldrh	r1, [r2, #4]
 8002550:	7992      	ldrb	r2, [r2, #6]
 8002552:	8099      	strh	r1, [r3, #4]
 8002554:	719a      	strb	r2, [r3, #6]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002562:	461a      	mov	r2, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fb1d 	bl	8001ba4 <AT_ExecuteCommand>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <ES_WIFI_CloseServerConnection+0xa2>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8002574:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8002578:	4908      	ldr	r1, [pc, #32]	; (800259c <ES_WIFI_CloseServerConnection+0xb0>)
 800257a:	4809      	ldr	r0, [pc, #36]	; (80025a0 <ES_WIFI_CloseServerConnection+0xb4>)
 800257c:	f007 f960 	bl	8009840 <iprintf>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002586:	4619      	mov	r1, r3
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <ES_WIFI_CloseServerConnection+0xc0>)
 800258a:	f007 f959 	bl	8009840 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0800ad14 	.word	0x0800ad14
 800259c:	0800ada4 	.word	0x0800ada4
 80025a0:	0800adbc 	.word	0x0800adbc
 80025a4:	0800ae20 	.word	0x0800ae20
 80025a8:	0800ae3c 	.word	0x0800ae3c
 80025ac:	0800ae44 	.word	0x0800ae44

080025b0 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4926      	ldr	r1, [pc, #152]	; (800265c <ES_WIFI_StopServerSingleConn+0xac>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f007 f9b7 	bl	8009938 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025d6:	461a      	mov	r2, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fae3 	bl	8001ba4 <AT_ExecuteCommand>
 80025de:	4603      	mov	r3, r0
 80025e0:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 80025e8:	f240 729e 	movw	r2, #1950	; 0x79e
 80025ec:	491c      	ldr	r1, [pc, #112]	; (8002660 <ES_WIFI_StopServerSingleConn+0xb0>)
 80025ee:	481d      	ldr	r0, [pc, #116]	; (8002664 <ES_WIFI_StopServerSingleConn+0xb4>)
 80025f0:	f007 f926 	bl	8009840 <iprintf>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025fa:	4619      	mov	r1, r3
 80025fc:	481a      	ldr	r0, [pc, #104]	; (8002668 <ES_WIFI_StopServerSingleConn+0xb8>)
 80025fe:	f007 f91f 	bl	8009840 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	e026      	b.n	8002654 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <ES_WIFI_StopServerSingleConn+0xbc>)
 800260e:	6810      	ldr	r0, [r2, #0]
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	8892      	ldrh	r2, [r2, #4]
 8002614:	809a      	strh	r2, [r3, #4]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002622:	461a      	mov	r2, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fabd 	bl	8001ba4 <AT_ExecuteCommand>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8002634:	f240 72a7 	movw	r2, #1959	; 0x7a7
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <ES_WIFI_StopServerSingleConn+0xb0>)
 800263a:	480a      	ldr	r0, [pc, #40]	; (8002664 <ES_WIFI_StopServerSingleConn+0xb4>)
 800263c:	f007 f900 	bl	8009840 <iprintf>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002646:	4619      	mov	r1, r3
 8002648:	4809      	ldr	r0, [pc, #36]	; (8002670 <ES_WIFI_StopServerSingleConn+0xc0>)
 800264a:	f007 f8f9 	bl	8009840 <iprintf>
    UNLOCK_WIFI();
    return ret;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	e000      	b.n	8002654 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	0800ad14 	.word	0x0800ad14
 8002660:	0800ada4 	.word	0x0800ada4
 8002664:	0800adbc 	.word	0x0800adbc
 8002668:	0800ae5c 	.word	0x0800ae5c
 800266c:	0800ae7c 	.word	0x0800ae7c
 8002670:	0800ae84 	.word	0x0800ae84

08002674 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	460b      	mov	r3, r1
 8002682:	72fb      	strb	r3, [r7, #11]
 8002684:	4613      	mov	r3, r2
 8002686:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002688:	2302      	movs	r3, #2
 800268a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002692:	2301      	movs	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e001      	b.n	800269c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026a2:	d302      	bcc.n	80026aa <ES_WIFI_SendData+0x36>
 80026a4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80026a8:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026b6:	7afa      	ldrb	r2, [r7, #11]
 80026b8:	4942      	ldr	r1, [pc, #264]	; (80027c4 <ES_WIFI_SendData+0x150>)
 80026ba:	4618      	mov	r0, r3
 80026bc:	f007 f93c 	bl	8009938 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026cc:	461a      	mov	r2, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fa68 	bl	8001ba4 <AT_ExecuteCommand>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d15e      	bne.n	800279c <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4938      	ldr	r1, [pc, #224]	; (80027c8 <ES_WIFI_SendData+0x154>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f007 f925 	bl	8009938 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026fa:	461a      	mov	r2, r3
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff fa51 	bl	8001ba4 <AT_ExecuteCommand>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13d      	bne.n	8002788 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	492d      	ldr	r1, [pc, #180]	; (80027cc <ES_WIFI_SendData+0x158>)
 8002716:	4618      	mov	r0, r3
 8002718:	f007 f90e 	bl	8009938 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002728:	893a      	ldrh	r2, [r7, #8]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fa9d 	bl	8001c70 <AT_RequestSendData>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d119      	bne.n	8002774 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002746:	4922      	ldr	r1, [pc, #136]	; (80027d0 <ES_WIFI_SendData+0x15c>)
 8002748:	4618      	mov	r0, r3
 800274a:	f007 f94b 	bl	80099e4 <strstr>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02c      	beq.n	80027ae <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002754:	f640 025b 	movw	r2, #2139	; 0x85b
 8002758:	491e      	ldr	r1, [pc, #120]	; (80027d4 <ES_WIFI_SendData+0x160>)
 800275a:	481f      	ldr	r0, [pc, #124]	; (80027d8 <ES_WIFI_SendData+0x164>)
 800275c:	f007 f870 	bl	8009840 <iprintf>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002766:	4619      	mov	r1, r3
 8002768:	481c      	ldr	r0, [pc, #112]	; (80027dc <ES_WIFI_SendData+0x168>)
 800276a:	f007 f869 	bl	8009840 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800276e:	2302      	movs	r3, #2
 8002770:	74fb      	strb	r3, [r7, #19]
 8002772:	e01c      	b.n	80027ae <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002774:	f640 0261 	movw	r2, #2145	; 0x861
 8002778:	4916      	ldr	r1, [pc, #88]	; (80027d4 <ES_WIFI_SendData+0x160>)
 800277a:	4817      	ldr	r0, [pc, #92]	; (80027d8 <ES_WIFI_SendData+0x164>)
 800277c:	f007 f860 	bl	8009840 <iprintf>
 8002780:	4817      	ldr	r0, [pc, #92]	; (80027e0 <ES_WIFI_SendData+0x16c>)
 8002782:	f007 f8d1 	bl	8009928 <puts>
 8002786:	e012      	b.n	80027ae <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002788:	f640 0266 	movw	r2, #2150	; 0x866
 800278c:	4911      	ldr	r1, [pc, #68]	; (80027d4 <ES_WIFI_SendData+0x160>)
 800278e:	4812      	ldr	r0, [pc, #72]	; (80027d8 <ES_WIFI_SendData+0x164>)
 8002790:	f007 f856 	bl	8009840 <iprintf>
 8002794:	4813      	ldr	r0, [pc, #76]	; (80027e4 <ES_WIFI_SendData+0x170>)
 8002796:	f007 f8c7 	bl	8009928 <puts>
 800279a:	e008      	b.n	80027ae <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800279c:	f640 026b 	movw	r2, #2155	; 0x86b
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <ES_WIFI_SendData+0x160>)
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <ES_WIFI_SendData+0x164>)
 80027a4:	f007 f84c 	bl	8009840 <iprintf>
 80027a8:	480f      	ldr	r0, [pc, #60]	; (80027e8 <ES_WIFI_SendData+0x174>)
 80027aa:	f007 f8bd 	bl	8009928 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d102      	bne.n	80027ba <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	0800ad14 	.word	0x0800ad14
 80027c8:	0800aec8 	.word	0x0800aec8
 80027cc:	0800aed0 	.word	0x0800aed0
 80027d0:	0800aedc 	.word	0x0800aedc
 80027d4:	0800ada4 	.word	0x0800ada4
 80027d8:	0800adbc 	.word	0x0800adbc
 80027dc:	0800aee4 	.word	0x0800aee4
 80027e0:	0800af00 	.word	0x0800af00
 80027e4:	0800af1c 	.word	0x0800af1c
 80027e8:	0800af30 	.word	0x0800af30

080027ec <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	72fb      	strb	r3, [r7, #11]
 80027fc:	4613      	mov	r3, r2
 80027fe:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002800:	2302      	movs	r3, #2
 8002802:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800280a:	2301      	movs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e001      	b.n	8002814 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8002814:	893b      	ldrh	r3, [r7, #8]
 8002816:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800281a:	f200 808a 	bhi.w	8002932 <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002824:	7afa      	ldrb	r2, [r7, #11]
 8002826:	4945      	ldr	r1, [pc, #276]	; (800293c <ES_WIFI_ReceiveData+0x150>)
 8002828:	4618      	mov	r0, r3
 800282a:	f007 f885 	bl	8009938 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800283a:	461a      	mov	r2, r3
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff f9b1 	bl	8001ba4 <AT_ExecuteCommand>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d164      	bne.n	8002916 <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002852:	893a      	ldrh	r2, [r7, #8]
 8002854:	493a      	ldr	r1, [pc, #232]	; (8002940 <ES_WIFI_ReceiveData+0x154>)
 8002856:	4618      	mov	r0, r3
 8002858:	f007 f86e 	bl	8009938 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002868:	461a      	mov	r2, r3
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff f99a 	bl	8001ba4 <AT_ExecuteCommand>
 8002870:	4603      	mov	r3, r0
 8002872:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d140      	bne.n	80028fc <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4930      	ldr	r1, [pc, #192]	; (8002944 <ES_WIFI_ReceiveData+0x158>)
 8002884:	4618      	mov	r0, r3
 8002886:	f007 f857 	bl	8009938 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002896:	461a      	mov	r2, r3
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff f983 	bl	8001ba4 <AT_ExecuteCommand>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11f      	bne.n	80028e8 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028ae:	4a26      	ldr	r2, [pc, #152]	; (8002948 <ES_WIFI_ReceiveData+0x15c>)
 80028b0:	6810      	ldr	r0, [r2, #0]
 80028b2:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028ba:	893a      	ldrh	r2, [r7, #8]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fa49 	bl	8001d5c <AT_RequestReceiveData>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02e      	beq.n	8002932 <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 80028d4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80028d8:	491c      	ldr	r1, [pc, #112]	; (800294c <ES_WIFI_ReceiveData+0x160>)
 80028da:	481d      	ldr	r0, [pc, #116]	; (8002950 <ES_WIFI_ReceiveData+0x164>)
 80028dc:	f006 ffb0 	bl	8009840 <iprintf>
 80028e0:	481c      	ldr	r0, [pc, #112]	; (8002954 <ES_WIFI_ReceiveData+0x168>)
 80028e2:	f007 f821 	bl	8009928 <puts>
 80028e6:	e024      	b.n	8002932 <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 80028e8:	f640 1201 	movw	r2, #2305	; 0x901
 80028ec:	4917      	ldr	r1, [pc, #92]	; (800294c <ES_WIFI_ReceiveData+0x160>)
 80028ee:	4818      	ldr	r0, [pc, #96]	; (8002950 <ES_WIFI_ReceiveData+0x164>)
 80028f0:	f006 ffa6 	bl	8009840 <iprintf>
 80028f4:	4818      	ldr	r0, [pc, #96]	; (8002958 <ES_WIFI_ReceiveData+0x16c>)
 80028f6:	f007 f817 	bl	8009928 <puts>
 80028fa:	e01a      	b.n	8002932 <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 80028fc:	f640 1206 	movw	r2, #2310	; 0x906
 8002900:	4912      	ldr	r1, [pc, #72]	; (800294c <ES_WIFI_ReceiveData+0x160>)
 8002902:	4813      	ldr	r0, [pc, #76]	; (8002950 <ES_WIFI_ReceiveData+0x164>)
 8002904:	f006 ff9c 	bl	8009840 <iprintf>
 8002908:	4814      	ldr	r0, [pc, #80]	; (800295c <ES_WIFI_ReceiveData+0x170>)
 800290a:	f007 f80d 	bl	8009928 <puts>
        *Receivedlen = 0;
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2200      	movs	r2, #0
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	e00d      	b.n	8002932 <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8002916:	f640 120c 	movw	r2, #2316	; 0x90c
 800291a:	490c      	ldr	r1, [pc, #48]	; (800294c <ES_WIFI_ReceiveData+0x160>)
 800291c:	480c      	ldr	r0, [pc, #48]	; (8002950 <ES_WIFI_ReceiveData+0x164>)
 800291e:	f006 ff8f 	bl	8009840 <iprintf>
 8002922:	480f      	ldr	r0, [pc, #60]	; (8002960 <ES_WIFI_ReceiveData+0x174>)
 8002924:	f007 f800 	bl	8009928 <puts>
      issue15++;
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <ES_WIFI_ReceiveData+0x178>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <ES_WIFI_ReceiveData+0x178>)
 8002930:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8002932:	7cfb      	ldrb	r3, [r7, #19]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800ad14 	.word	0x0800ad14
 8002940:	0800af54 	.word	0x0800af54
 8002944:	0800af5c 	.word	0x0800af5c
 8002948:	0800af64 	.word	0x0800af64
 800294c:	0800ada4 	.word	0x0800ada4
 8002950:	0800adbc 	.word	0x0800adbc
 8002954:	0800af68 	.word	0x0800af68
 8002958:	0800af88 	.word	0x0800af88
 800295c:	0800afa0 	.word	0x0800afa0
 8002960:	0800afc0 	.word	0x0800afc0
 8002964:	20000090 	.word	0x20000090

08002968 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002970:	4b56      	ldr	r3, [pc, #344]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a55      	ldr	r2, [pc, #340]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 8002976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002994:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a0:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a49      	ldr	r2, [pc, #292]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b47      	ldr	r3, [pc, #284]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a43      	ldr	r2, [pc, #268]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <SPI_WIFI_MspInit+0x164>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80029d0:	2200      	movs	r2, #0
 80029d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d6:	483e      	ldr	r0, [pc, #248]	; (8002ad0 <SPI_WIFI_MspInit+0x168>)
 80029d8:	f002 fbec 	bl	80051b4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80029dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	4836      	ldr	r0, [pc, #216]	; (8002ad0 <SPI_WIFI_MspInit+0x168>)
 80029f6:	f002 fa1d 	bl	8004e34 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80029fe:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <SPI_WIFI_MspInit+0x16c>)
 8002a00:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4831      	ldr	r0, [pc, #196]	; (8002ad8 <SPI_WIFI_MspInit+0x170>)
 8002a12:	f002 fa0f 	bl	8004e34 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	4829      	ldr	r0, [pc, #164]	; (8002ad8 <SPI_WIFI_MspInit+0x170>)
 8002a34:	f002 f9fe 	bl	8004e34 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4826      	ldr	r0, [pc, #152]	; (8002ad8 <SPI_WIFI_MspInit+0x170>)
 8002a3e:	f002 fbb9 	bl	80051b4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	481f      	ldr	r0, [pc, #124]	; (8002ad8 <SPI_WIFI_MspInit+0x170>)
 8002a5a:	f002 f9eb 	bl	8004e34 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002a70:	2306      	movs	r3, #6
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4818      	ldr	r0, [pc, #96]	; (8002adc <SPI_WIFI_MspInit+0x174>)
 8002a7c:	f002 f9da 	bl	8004e34 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002a92:	2306      	movs	r3, #6
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480f      	ldr	r0, [pc, #60]	; (8002adc <SPI_WIFI_MspInit+0x174>)
 8002a9e:	f002 f9c9 	bl	8004e34 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002ab4:	2306      	movs	r3, #6
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <SPI_WIFI_MspInit+0x174>)
 8002ac0:	f002 f9b8 	bl	8004e34 <HAL_GPIO_Init>
}
 8002ac4:	bf00      	nop
 8002ac6:	3730      	adds	r7, #48	; 0x30
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	48000400 	.word	0x48000400
 8002ad4:	10110000 	.word	0x10110000
 8002ad8:	48001000 	.word	0x48001000
 8002adc:	48000800 	.word	0x48000800

08002ae0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d145      	bne.n	8002b80 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002af6:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <SPI_WIFI_Init+0xb8>)
 8002af8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002afa:	4826      	ldr	r0, [pc, #152]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002afc:	f7ff ff34 	bl	8002968 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b02:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b06:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b10:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002b14:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002b48:	4812      	ldr	r0, [pc, #72]	; (8002b94 <SPI_WIFI_Init+0xb4>)
 8002b4a:	f004 fbd3 	bl	80072f4 <HAL_SPI_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	e018      	b.n	8002b8c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2007      	movs	r0, #7
 8002b60:	f002 f8f1 	bl	8004d46 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002b64:	2007      	movs	r0, #7
 8002b66:	f002 f90a 	bl	8004d7e <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2033      	movs	r0, #51	; 0x33
 8002b70:	f002 f8e9 	bl	8004d46 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002b74:	2033      	movs	r0, #51	; 0x33
 8002b76:	f002 f902 	bl	8004d7e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002b7a:	200a      	movs	r0, #10
 8002b7c:	f000 f9fe 	bl	8002f7c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8002b80:	f000 f80c 	bl	8002b9c <SPI_WIFI_ResetModule>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200007e8 	.word	0x200007e8
 8002b98:	40003c00 	.word	0x40003c00

08002b9c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002ba2:	f001 ffc7 	bl	8004b34 <HAL_GetTick>
 8002ba6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8002bac:	2200      	movs	r2, #0
 8002bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb2:	4830      	ldr	r0, [pc, #192]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002bb4:	f002 fafe 	bl	80051b4 <HAL_GPIO_WritePin>
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f001 ffc7 	bl	8004b4c <HAL_Delay>
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc4:	482b      	ldr	r0, [pc, #172]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002bc6:	f002 faf5 	bl	80051b4 <HAL_GPIO_WritePin>
 8002bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bce:	f001 ffbd 	bl	8004b4c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4827      	ldr	r0, [pc, #156]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002bd8:	f002 faec 	bl	80051b4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002bdc:	200f      	movs	r0, #15
 8002bde:	f000 f9cd 	bl	8002f7c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8002be2:	e020      	b.n	8002c26 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	463a      	mov	r2, r7
 8002be8:	18d1      	adds	r1, r2, r3
 8002bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4821      	ldr	r0, [pc, #132]	; (8002c78 <SPI_WIFI_ResetModule+0xdc>)
 8002bf2:	f004 fc45 	bl	8007480 <HAL_SPI_Receive>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002c00:	f001 ff98 	bl	8004b34 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d202      	bcs.n	8002c16 <SPI_WIFI_ResetModule+0x7a>
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8002c16:	2201      	movs	r2, #1
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4816      	ldr	r0, [pc, #88]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002c1c:	f002 faca 	bl	80051b4 <HAL_GPIO_WritePin>
      return -1;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	e021      	b.n	8002c6a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8002c26:	2102      	movs	r1, #2
 8002c28:	4812      	ldr	r0, [pc, #72]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002c2a:	f002 faab 	bl	8005184 <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d0d7      	beq.n	8002be4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8002c34:	2201      	movs	r2, #1
 8002c36:	2101      	movs	r1, #1
 8002c38:	480e      	ldr	r0, [pc, #56]	; (8002c74 <SPI_WIFI_ResetModule+0xd8>)
 8002c3a:	f002 fabb 	bl	80051b4 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002c3e:	783b      	ldrb	r3, [r7, #0]
 8002c40:	2b15      	cmp	r3, #21
 8002c42:	d10e      	bne.n	8002c62 <SPI_WIFI_ResetModule+0xc6>
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b15      	cmp	r3, #21
 8002c48:	d10b      	bne.n	8002c62 <SPI_WIFI_ResetModule+0xc6>
 8002c4a:	78bb      	ldrb	r3, [r7, #2]
 8002c4c:	2b0d      	cmp	r3, #13
 8002c4e:	d108      	bne.n	8002c62 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002c50:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d105      	bne.n	8002c62 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002c56:	793b      	ldrb	r3, [r7, #4]
 8002c58:	2b3e      	cmp	r3, #62	; 0x3e
 8002c5a:	d102      	bne.n	8002c62 <SPI_WIFI_ResetModule+0xc6>
 8002c5c:	797b      	ldrb	r3, [r7, #5]
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d002      	beq.n	8002c68 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	e000      	b.n	8002c6a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	48001000 	.word	0x48001000
 8002c78:	200007e8 	.word	0x200007e8

08002c7c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <SPI_WIFI_DeInit+0x10>)
 8002c82:	f004 fbc1 	bl	8007408 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200007e8 	.word	0x200007e8

08002c90 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002c98:	f001 ff4c 	bl	8004b34 <HAL_GetTick>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8002ca0:	e00a      	b.n	8002cb8 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002ca2:	f001 ff47 	bl	8004b34 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d902      	bls.n	8002cb8 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e007      	b.n	8002cc8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <wait_cmddata_rdy_high+0x40>)
 8002cbc:	f002 fa62 	bl	8005184 <HAL_GPIO_ReadPin>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d1ed      	bne.n	8002ca2 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	48001000 	.word	0x48001000

08002cd4 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002cdc:	f001 ff2a 	bl	8004b34 <HAL_GetTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8002ce4:	e00a      	b.n	8002cfc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002ce6:	f001 ff25 	bl	8004b34 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d902      	bls.n	8002cfc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e004      	b.n	8002d06 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <wait_cmddata_rdy_rising_event+0x3c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d0f0      	beq.n	8002ce6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002d04:	2300      	movs	r3, #0
#endif
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000009c 	.word	0x2000009c

08002d14 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002d1c:	f001 ff0a 	bl	8004b34 <HAL_GetTick>
 8002d20:	4603      	mov	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8002d24:	e00a      	b.n	8002d3c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002d26:	f001 ff05 	bl	8004b34 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d902      	bls.n	8002d3c <wait_spi_rx_event+0x28>
    {
      return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e004      	b.n	8002d46 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <wait_spi_rx_event+0x3c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d0f0      	beq.n	8002d26 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002d44:	2300      	movs	r3, #0
#endif
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000094 	.word	0x20000094

08002d54 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002d5c:	f001 feea 	bl	8004b34 <HAL_GetTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8002d64:	e00a      	b.n	8002d7c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002d66:	f001 fee5 	bl	8004b34 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d902      	bls.n	8002d7c <wait_spi_tx_event+0x28>
    {
      return -1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e004      	b.n	8002d86 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <wait_spi_tx_event+0x3c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d0f0      	beq.n	8002d66 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002d84:	2300      	movs	r3, #0
#endif
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000098 	.word	0x20000098

08002d94 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8002da6:	2201      	movs	r2, #1
 8002da8:	2101      	movs	r1, #1
 8002daa:	4834      	ldr	r0, [pc, #208]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002dac:	f002 fa02 	bl	80051b4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f000 f8e3 	bl	8002f7c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff8b 	bl	8002cd4 <wait_cmddata_rdy_rising_event>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da02      	bge.n	8002dca <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002dc4:	f06f 0302 	mvn.w	r3, #2
 8002dc8:	e054      	b.n	8002e74 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2101      	movs	r1, #1
 8002dce:	482b      	ldr	r0, [pc, #172]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002dd0:	f002 f9f0 	bl	80051b4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002dd4:	200f      	movs	r0, #15
 8002dd6:	f000 f8d1 	bl	8002f7c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002dda:	e03d      	b.n	8002e58 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	db02      	blt.n	8002dec <SPI_WIFI_ReceiveData+0x58>
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d13c      	bne.n	8002e66 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <SPI_WIFI_ReceiveData+0xec>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	2201      	movs	r2, #1
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4822      	ldr	r0, [pc, #136]	; (8002e84 <SPI_WIFI_ReceiveData+0xf0>)
 8002dfc:	f004 ff02 	bl	8007c04 <HAL_SPI_Receive_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002e06:	2201      	movs	r2, #1
 8002e08:	2101      	movs	r1, #1
 8002e0a:	481c      	ldr	r0, [pc, #112]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002e0c:	f002 f9d2 	bl	80051b4 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295
 8002e14:	e02e      	b.n	8002e74 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff7b 	bl	8002d14 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002e1e:	7d3a      	ldrb	r2, [r7, #20]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3301      	adds	r3, #1
 8002e28:	7d7a      	ldrb	r2, [r7, #21]
 8002e2a:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002e2c:	8afb      	ldrh	r3, [r7, #22]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3302      	adds	r3, #2
 8002e38:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002e3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e42:	db09      	blt.n	8002e58 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002e44:	2201      	movs	r2, #1
 8002e46:	2101      	movs	r1, #1
 8002e48:	480c      	ldr	r0, [pc, #48]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002e4a:	f002 f9b3 	bl	80051b4 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002e4e:	f7ff fea5 	bl	8002b9c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002e52:	f06f 0303 	mvn.w	r3, #3
 8002e56:	e00d      	b.n	8002e74 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002e58:	2102      	movs	r1, #2
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002e5c:	f002 f992 	bl	8005184 <HAL_GPIO_ReadPin>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d0ba      	beq.n	8002ddc <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002e66:	2201      	movs	r2, #1
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4804      	ldr	r0, [pc, #16]	; (8002e7c <SPI_WIFI_ReceiveData+0xe8>)
 8002e6c:	f002 f9a2 	bl	80051b4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002e70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	48001000 	.word	0x48001000
 8002e80:	20000094 	.word	0x20000094
 8002e84:	200007e8 	.word	0x200007e8

08002e88 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	460b      	mov	r3, r1
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fef9 	bl	8002c90 <wait_cmddata_rdy_high>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da02      	bge.n	8002eaa <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	e04f      	b.n	8002f4a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <SPI_WIFI_SendData+0xcc>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4828      	ldr	r0, [pc, #160]	; (8002f58 <SPI_WIFI_SendData+0xd0>)
 8002eb6:	f002 f97d 	bl	80051b4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f000 f85e 	bl	8002f7c <SPI_WIFI_DelayUs>
  if (len > 1)
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d919      	bls.n	8002efa <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <SPI_WIFI_SendData+0xd4>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	4822      	ldr	r0, [pc, #136]	; (8002f60 <SPI_WIFI_SendData+0xd8>)
 8002ed8:	f004 fe0e 	bl	8007af8 <HAL_SPI_Transmit_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	481c      	ldr	r0, [pc, #112]	; (8002f58 <SPI_WIFI_SendData+0xd0>)
 8002ee8:	f002 f964 	bl	80051b4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	e02b      	b.n	8002f4a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff2d 	bl	8002d54 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002f04:	897b      	ldrh	r3, [r7, #10]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002f10:	230a      	movs	r3, #10
 8002f12:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <SPI_WIFI_SendData+0xd4>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4619      	mov	r1, r3
 8002f22:	480f      	ldr	r0, [pc, #60]	; (8002f60 <SPI_WIFI_SendData+0xd8>)
 8002f24:	f004 fde8 	bl	8007af8 <HAL_SPI_Transmit_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2101      	movs	r1, #1
 8002f32:	4809      	ldr	r0, [pc, #36]	; (8002f58 <SPI_WIFI_SendData+0xd0>)
 8002f34:	f002 f93e 	bl	80051b4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e005      	b.n	8002f4a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff07 	bl	8002d54 <wait_spi_tx_event>
    
  }
  return len;
 8002f46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	2000009c 	.word	0x2000009c
 8002f58:	48001000 	.word	0x48001000
 8002f5c:	20000098 	.word	0x20000098
 8002f60:	200007e8 	.word	0x200007e8

08002f64 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 fded 	bl	8004b4c <HAL_Delay>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <SPI_WIFI_DelayUs+0x94>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d122      	bne.n	8002fda <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8002f94:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <SPI_WIFI_DelayUs+0x98>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <SPI_WIFI_DelayUs+0x9c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002faa:	f001 fdc3 	bl	8004b34 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002fb0:	e002      	b.n	8002fb8 <SPI_WIFI_DelayUs+0x3c>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f9      	bne.n	8002fb2 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8002fbe:	f001 fdb9 	bl	8004b34 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <SPI_WIFI_DelayUs+0x94>)
 8002fca:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <SPI_WIFI_DelayUs+0x94>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <SPI_WIFI_DelayUs+0x5e>
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <SPI_WIFI_DelayUs+0x94>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <SPI_WIFI_DelayUs+0x98>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <SPI_WIFI_DelayUs+0xa0>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	0c9a      	lsrs	r2, r3, #18
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <SPI_WIFI_DelayUs+0x94>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002ffa:	e002      	b.n	8003002 <SPI_WIFI_DelayUs+0x86>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <SPI_WIFI_DelayUs+0x80>
  return;
 8003008:	bf00      	nop
}
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200000a0 	.word	0x200000a0
 8003014:	20000004 	.word	0x20000004
 8003018:	10624dd3 	.word	0x10624dd3
 800301c:	431bde83 	.word	0x431bde83

08003020 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_SPI_RxCpltCallback+0x24>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_SPI_RxCpltCallback+0x24>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000094 	.word	0x20000094

08003048 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_SPI_TxCpltCallback+0x24>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_SPI_TxCpltCallback+0x24>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000098 	.word	0x20000098

08003070 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <SPI_WIFI_ISR+0x1c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <SPI_WIFI_ISR+0x1c>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
   }
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	2000009c 	.word	0x2000009c

08003090 <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  bool beatDetected = false;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 800309c:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <_Z12checkForBeatl+0x178>)
 800309e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <_Z12checkForBeatl+0x17c>)
 80030a4:	801a      	strh	r2, [r3, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	4858      	ldr	r0, [pc, #352]	; (8003210 <_Z12checkForBeatl+0x180>)
 80030ae:	f000 f8bf 	bl	8003230 <_Z18averageDCEstimatorPlt>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <_Z12checkForBeatl+0x184>)
 80030b8:	801a      	strh	r2, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <_Z12checkForBeatl+0x184>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f8cb 	bl	8003268 <_Z16lowPassFIRFilters>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <_Z12checkForBeatl+0x178>)
 80030d8:	801a      	strh	r2, [r3, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <_Z12checkForBeatl+0x17c>)
 80030dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	0bdb      	lsrs	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4b48      	ldr	r3, [pc, #288]	; (8003208 <_Z12checkForBeatl+0x178>)
 80030e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	0bdb      	lsrs	r3, r3, #15
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d034      	beq.n	8003166 <_Z12checkForBeatl+0xd6>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80030fc:	4b46      	ldr	r3, [pc, #280]	; (8003218 <_Z12checkForBeatl+0x188>)
 80030fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <_Z12checkForBeatl+0x18c>)
 8003104:	801a      	strh	r2, [r3, #0]
    IR_AC_Min = IR_AC_Signal_min;
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <_Z12checkForBeatl+0x190>)
 8003108:	f9b3 2000 	ldrsh.w	r2, [r3]
 800310c:	4b45      	ldr	r3, [pc, #276]	; (8003224 <_Z12checkForBeatl+0x194>)
 800310e:	801a      	strh	r2, [r3, #0]

    positiveEdge = 1;
 8003110:	4b45      	ldr	r3, [pc, #276]	; (8003228 <_Z12checkForBeatl+0x198>)
 8003112:	2201      	movs	r2, #1
 8003114:	801a      	strh	r2, [r3, #0]
    negativeEdge = 0;
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <_Z12checkForBeatl+0x19c>)
 8003118:	2200      	movs	r2, #0
 800311a:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_max = 0;
 800311c:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <_Z12checkForBeatl+0x188>)
 800311e:	2200      	movs	r2, #0
 8003120:	801a      	strh	r2, [r3, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <_Z12checkForBeatl+0x18c>)
 8003124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003128:	461a      	mov	r2, r3
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <_Z12checkForBeatl+0x194>)
 800312c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b14      	cmp	r3, #20
 8003134:	bfcc      	ite	gt
 8003136:	2301      	movgt	r3, #1
 8003138:	2300      	movle	r3, #0
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <_Z12checkForBeatl+0x18c>)
 800313e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003142:	4619      	mov	r1, r3
 8003144:	4b37      	ldr	r3, [pc, #220]	; (8003224 <_Z12checkForBeatl+0x194>)
 8003146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314a:	1acb      	subs	r3, r1, r3
 800314c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003150:	428b      	cmp	r3, r1
 8003152:	bfd4      	ite	le
 8003154:	2301      	movle	r3, #1
 8003156:	2300      	movgt	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	4013      	ands	r3, r2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <_Z12checkForBeatl+0xd6>
    {
      //Heart beat!!!
      beatDetected = true;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <_Z12checkForBeatl+0x17c>)
 8003168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	bfcc      	ite	gt
 8003170:	2301      	movgt	r3, #1
 8003172:	2300      	movle	r3, #0
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <_Z12checkForBeatl+0x178>)
 8003178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfd4      	ite	le
 8003180:	2301      	movle	r3, #1
 8003182:	2300      	movgt	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4013      	ands	r3, r2
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <_Z12checkForBeatl+0x110>
  {
    positiveEdge = 0;
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <_Z12checkForBeatl+0x198>)
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
    negativeEdge = 1;
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <_Z12checkForBeatl+0x19c>)
 8003196:	2201      	movs	r2, #1
 8003198:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_min = 0;
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <_Z12checkForBeatl+0x190>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <_Z12checkForBeatl+0x198>)
 80031a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <_Z12checkForBeatl+0x178>)
 80031aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <_Z12checkForBeatl+0x17c>)
 80031b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	bfcc      	ite	gt
 80031b8:	2301      	movgt	r3, #1
 80031ba:	2300      	movle	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	400b      	ands	r3, r1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <_Z12checkForBeatl+0x13e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <_Z12checkForBeatl+0x178>)
 80031c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <_Z12checkForBeatl+0x188>)
 80031cc:	801a      	strh	r2, [r3, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <_Z12checkForBeatl+0x19c>)
 80031d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <_Z12checkForBeatl+0x178>)
 80031d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <_Z12checkForBeatl+0x17c>)
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	bfb4      	ite	lt
 80031e6:	2301      	movlt	r3, #1
 80031e8:	2300      	movge	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <_Z12checkForBeatl+0x16c>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <_Z12checkForBeatl+0x178>)
 80031f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <_Z12checkForBeatl+0x190>)
 80031fa:	801a      	strh	r2, [r3, #0]
  }
  
  return(beatDetected);
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200000a4 	.word	0x200000a4
 800320c:	200000a6 	.word	0x200000a6
 8003210:	200000b4 	.word	0x200000b4
 8003214:	200000ac 	.word	0x200000ac
 8003218:	200000aa 	.word	0x200000aa
 800321c:	20000000 	.word	0x20000000
 8003220:	200000a8 	.word	0x200000a8
 8003224:	20000002 	.word	0x20000002
 8003228:	200000ae 	.word	0x200000ae
 800322c:	200000b0 	.word	0x200000b0

08003230 <_Z18averageDCEstimatorPlt>:

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
  *p += ((((long) x << 15) - *p) >> 4);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	03d9      	lsls	r1, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	1acb      	subs	r3, r1, r3
 800324a:	111b      	asrs	r3, r3, #4
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
  return (*p >> 15);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	13db      	asrs	r3, r3, #15
 8003258:	b21b      	sxth	r3, r3
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  cbuf[offset] = din;
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <_Z16lowPassFIRFilters+0xc0>)
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 8003280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003284:	b218      	sxth	r0, r3
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3b0b      	subs	r3, #11
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <_Z16lowPassFIRFilters+0xc0>)
 8003292:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003296:	4619      	mov	r1, r3
 8003298:	f000 f84a 	bl	8003330 <_Z5mul16ss>
 800329c:	60f8      	str	r0, [r7, #12]
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 800329e:	2300      	movs	r3, #0
 80032a0:	72fb      	strb	r3, [r7, #11]
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	2b0a      	cmp	r3, #10
 80032a6:	d829      	bhi.n	80032fc <_Z16lowPassFIRFilters+0x94>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	4a20      	ldr	r2, [pc, #128]	; (800332c <_Z16lowPassFIRFilters+0xc4>)
 80032ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b0:	b218      	sxth	r0, r3
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <_Z16lowPassFIRFilters+0xc0>)
 80032c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f1a3 0116 	sub.w	r1, r3, #22
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	440b      	add	r3, r1
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	4913      	ldr	r1, [pc, #76]	; (8003328 <_Z16lowPassFIRFilters+0xc0>)
 80032da:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	f000 f822 	bl	8003330 <_Z5mul16ss>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0 ; i < 11 ; i++)
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	3301      	adds	r3, #1
 80032f8:	72fb      	strb	r3, [r7, #11]
 80032fa:	e7d2      	b.n	80032a2 <_Z16lowPassFIRFilters+0x3a>
  }

  offset++;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 8003306:	701a      	strb	r2, [r3, #0]
  offset %= 32; //Wrap condition
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <_Z16lowPassFIRFilters+0xbc>)
 8003314:	701a      	strb	r2, [r3, #0]

  return(z >> 15);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	13db      	asrs	r3, r3, #15
 800331a:	b21b      	sxth	r3, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200000f8 	.word	0x200000f8
 8003328:	200000b8 	.word	0x200000b8
 800332c:	0800b87c 	.word	0x0800b87c

08003330 <_Z5mul16ss>:

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	460a      	mov	r2, r1
 800333a:	80fb      	strh	r3, [r7, #6]
 800333c:	4613      	mov	r3, r2
 800333e:	80bb      	strh	r3, [r7, #4]
  return((long)x * (long)y);
 8003340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003344:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <main>:
static  int wifi_start(void);
static  int wifi_connect(void);
static  bool WebServerProcess(void);

int main(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b092      	sub	sp, #72	; 0x48
 800335c:	af04      	add	r7, sp, #16

  // HAL and system clock init
  HAL_Init();
 800335e:	f001 fb80 	bl	8004a62 <HAL_Init>
  SystemClock_Config();
 8003362:	f000 fc03 	bl	8003b6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  // Initialize other peripherals
  MX_GPIO_Init();
 8003366:	f000 fd3d 	bl	8003de4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800336a:	f000 fc8d 	bl	8003c88 <_ZL12MX_I2C1_Initv>
  MX_TIM16_Init();
 800336e:	f000 fcd9 	bl	8003d24 <_ZL13MX_TIM16_Initv>
  MX_USART1_UART_Init();
 8003372:	f000 fd03 	bl	8003d7c <_ZL19MX_USART1_UART_Initv>
  // The I2C read address of the heart rate sensor
  static const uint8_t MAX30102_READ_ADDRESS = 0xAF;

  // Starts the timer and enables interrupts (which trigger
  // depending on the timer's ARR)
  HAL_TIM_Base_Start(&htim16);
 8003376:	4815      	ldr	r0, [pc, #84]	; (80033cc <main+0x74>)
 8003378:	f005 fae0 	bl	800893c <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE );
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <main+0x74>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <main+0x74>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

   // Initializes the heart-rate sensor
   particleSensor.begin(&hi2c1, MAX30102_READ_ADDRESS);
 800338c:	22af      	movs	r2, #175	; 0xaf
 800338e:	4910      	ldr	r1, [pc, #64]	; (80033d0 <main+0x78>)
 8003390:	4810      	ldr	r0, [pc, #64]	; (80033d4 <main+0x7c>)
 8003392:	f7fd fd1e 	bl	8000dd2 <_ZN8MAX301055beginEP19__I2C_HandleTypeDefh>
   particleSensor.setup();
 8003396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	f240 139b 	movw	r3, #411	; 0x19b
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2302      	movs	r3, #2
 80033aa:	2204      	movs	r2, #4
 80033ac:	211f      	movs	r1, #31
 80033ae:	4809      	ldr	r0, [pc, #36]	; (80033d4 <main+0x7c>)
 80033b0:	f7fd fea4 	bl	80010fc <_ZN8MAX301055setupEhhhiii>

    char bufferBad[50] = {0};
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2232      	movs	r2, #50	; 0x32
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f006 fa38 	bl	8009830 <memset>

    serialPrint("****** WIFI Web Server Initialization ****** \n\r");
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <main+0x80>)
 80033c2:	f000 ff41 	bl	8004248 <_Z11serialPrintPc>

    // Calls the wifi server function -
    //
    // NOTE - once this is called, the server runs until it is stopped
    wifi_server();
 80033c6:	f000 f8c9 	bl	800355c <_ZL11wifi_serverv>

    while(1) {
 80033ca:	e7fe      	b.n	80033ca <main+0x72>
 80033cc:	200002d0 	.word	0x200002d0
 80033d0:	20000284 	.word	0x20000284
 80033d4:	2000039c 	.word	0x2000039c
 80033d8:	0800b074 	.word	0x0800b074

080033dc <_ZL10wifi_startv>:

}

// Wifi Stuff
static int wifi_start(void)
{
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	b097      	sub	sp, #92	; 0x5c
 80033e0:	af04      	add	r7, sp, #16
uint8_t  MAC_Addr[6];

/*Initialize and use WIFI module */
if(WIFI_Init() ==  WIFI_STATUS_OK)
 80033e2:	f001 f9af 	bl	8004744 <WIFI_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03a      	beq.n	800346c <_ZL10wifi_startv+0x90>
{
  serialPrint("ES-WIFI Initialized.\n\r");
 80033f6:	4820      	ldr	r0, [pc, #128]	; (8003478 <_ZL10wifi_startv+0x9c>)
 80033f8:	f000 ff26 	bl	8004248 <_Z11serialPrintPc>
  if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80033fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003400:	4618      	mov	r0, r3
 8003402:	f001 f9ed 	bl	80047e0 <WIFI_GetMAC_Address>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <_ZL10wifi_startv+0x84>
  {

    char macAdd[60] = {0};
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	223c      	movs	r2, #60	; 0x3c
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f006 fa07 	bl	8009830 <memset>
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
            MAC_Addr[0],
 8003422:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 8003426:	461d      	mov	r5, r3
            MAC_Addr[1],
 8003428:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 800342c:	461e      	mov	r6, r3
            MAC_Addr[2],
 800342e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
            MAC_Addr[3],
 8003432:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
            MAC_Addr[4],
 8003436:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
            MAC_Addr[5]);
 800343a:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    sprintf(macAdd,"> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n\r",
 800343e:	4604      	mov	r4, r0
 8003440:	1d38      	adds	r0, r7, #4
 8003442:	9403      	str	r4, [sp, #12]
 8003444:	9102      	str	r1, [sp, #8]
 8003446:	9201      	str	r2, [sp, #4]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	4633      	mov	r3, r6
 800344c:	462a      	mov	r2, r5
 800344e:	490b      	ldr	r1, [pc, #44]	; (800347c <_ZL10wifi_startv+0xa0>)
 8003450:	f006 fa72 	bl	8009938 <siprintf>

    serialPrint(macAdd);
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fef6 	bl	8004248 <_Z11serialPrintPc>
}
else
{
  return -1;
}
return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e007      	b.n	8003470 <_ZL10wifi_startv+0x94>
    serialPrint("> ERROR : CANNOT get MAC address\n\r");
 8003460:	4807      	ldr	r0, [pc, #28]	; (8003480 <_ZL10wifi_startv+0xa4>)
 8003462:	f000 fef1 	bl	8004248 <_Z11serialPrintPc>
    return -1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e001      	b.n	8003470 <_ZL10wifi_startv+0x94>
  return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003470:	4618      	mov	r0, r3
 8003472:	374c      	adds	r7, #76	; 0x4c
 8003474:	46bd      	mov	sp, r7
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003478:	0800b0a4 	.word	0x0800b0a4
 800347c:	0800b0bc 	.word	0x0800b0bc
 8003480:	0800b0f0 	.word	0x0800b0f0

08003484 <_ZL12wifi_connectv>:


int wifi_connect(void)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b0b5      	sub	sp, #212	; 0xd4
 8003488:	af02      	add	r7, sp, #8

wifi_start();
 800348a:	f7ff ffa7 	bl	80033dc <_ZL10wifi_startv>

char connecting[100] = {0};
 800348e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003492:	2264      	movs	r2, #100	; 0x64
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f006 f9ca 	bl	8009830 <memset>
sprintf(connecting,"\nConnecting to %s , %s\n\r",SSID,PASSWORD);
 800349c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <_ZL12wifi_connectv+0xbc>)
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <_ZL12wifi_connectv+0xc0>)
 80034a4:	4928      	ldr	r1, [pc, #160]	; (8003548 <_ZL12wifi_connectv+0xc4>)
 80034a6:	f006 fa47 	bl	8009938 <siprintf>
serialPrint(connecting);
 80034aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 feca 	bl	8004248 <_Z11serialPrintPc>

if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80034b4:	2203      	movs	r2, #3
 80034b6:	4922      	ldr	r1, [pc, #136]	; (8003540 <_ZL12wifi_connectv+0xbc>)
 80034b8:	4822      	ldr	r0, [pc, #136]	; (8003544 <_ZL12wifi_connectv+0xc0>)
 80034ba:	f001 f96f 	bl	800479c <WIFI_Connect>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02f      	beq.n	800352e <_ZL12wifi_connectv+0xaa>
{
  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80034ce:	481f      	ldr	r0, [pc, #124]	; (800354c <_ZL12wifi_connectv+0xc8>)
 80034d0:	f001 f99c 	bl	800480c <WIFI_GetIP_Address>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01e      	beq.n	8003522 <_ZL12wifi_connectv+0x9e>
  {

    char connectMes[100] = {0};
 80034e4:	463b      	mov	r3, r7
 80034e6:	2264      	movs	r2, #100	; 0x64
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f006 f9a0 	bl	8009830 <memset>
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
            IP_Addr[0],
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <_ZL12wifi_connectv+0xc8>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 80034f4:	4619      	mov	r1, r3
            IP_Addr[1],
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <_ZL12wifi_connectv+0xc8>)
 80034f8:	785b      	ldrb	r3, [r3, #1]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 80034fa:	461c      	mov	r4, r3
            IP_Addr[2],
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <_ZL12wifi_connectv+0xc8>)
 80034fe:	789b      	ldrb	r3, [r3, #2]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 8003500:	461a      	mov	r2, r3
            IP_Addr[3]);
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <_ZL12wifi_connectv+0xc8>)
 8003504:	78db      	ldrb	r3, [r3, #3]
    sprintf(connectMes,"> es-wifi module connected: got IP Address : %d.%d.%d.%d\n\r",
 8003506:	4638      	mov	r0, r7
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	9200      	str	r2, [sp, #0]
 800350c:	4623      	mov	r3, r4
 800350e:	460a      	mov	r2, r1
 8003510:	490f      	ldr	r1, [pc, #60]	; (8003550 <_ZL12wifi_connectv+0xcc>)
 8003512:	f006 fa11 	bl	8009938 <siprintf>

    serialPrint(connectMes);
 8003516:	463b      	mov	r3, r7
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fe95 	bl	8004248 <_Z11serialPrintPc>
else
{
		 serialPrint("ERROR : es-wifi module NOT connected\n\r");
   return -1;
}
return 0;
 800351e:	2300      	movs	r3, #0
 8003520:	e00a      	b.n	8003538 <_ZL12wifi_connectv+0xb4>
		  serialPrint(" ERROR : es-wifi module CANNOT get IP address\n\r");
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <_ZL12wifi_connectv+0xd0>)
 8003524:	f000 fe90 	bl	8004248 <_Z11serialPrintPc>
    return -1;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e004      	b.n	8003538 <_ZL12wifi_connectv+0xb4>
		 serialPrint("ERROR : es-wifi module NOT connected\n\r");
 800352e:	480a      	ldr	r0, [pc, #40]	; (8003558 <_ZL12wifi_connectv+0xd4>)
 8003530:	f000 fe8a 	bl	8004248 <_Z11serialPrintPc>
   return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003538:	4618      	mov	r0, r3
 800353a:	37cc      	adds	r7, #204	; 0xcc
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	0800b114 	.word	0x0800b114
 8003544:	0800b120 	.word	0x0800b120
 8003548:	0800b12c 	.word	0x0800b12c
 800354c:	200000fc 	.word	0x200000fc
 8003550:	0800b148 	.word	0x0800b148
 8003554:	0800b184 	.word	0x0800b184
 8003558:	0800b1b4 	.word	0x0800b1b4

0800355c <_ZL11wifi_serverv>:


int wifi_server(void)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b0be      	sub	sp, #248	; 0xf8
 8003560:	af04      	add	r7, sp, #16
bool StopServer = false;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

serialPrint("Running HTML Server test\n\r");
 8003568:	48b1      	ldr	r0, [pc, #708]	; (8003830 <_ZL11wifi_serverv+0x2d4>)
 800356a:	f000 fe6d 	bl	8004248 <_Z11serialPrintPc>
if (wifi_connect()!=0) return -1;
 800356e:	f7ff ff89 	bl	8003484 <_ZL12wifi_connectv>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <_ZL11wifi_serverv+0x2c>
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e14e      	b.n	8003826 <_ZL11wifi_serverv+0x2ca>


if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8003588:	2350      	movs	r3, #80	; 0x50
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4ba9      	ldr	r3, [pc, #676]	; (8003834 <_ZL11wifi_serverv+0x2d8>)
 800358e:	2201      	movs	r2, #1
 8003590:	2100      	movs	r1, #0
 8003592:	2000      	movs	r0, #0
 8003594:	f001 f956 	bl	8004844 <WIFI_StartServer>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <_ZL11wifi_serverv+0x52>
{
  serialPrint("ERROR: Cannot start server.\n\r");
 80035a8:	48a3      	ldr	r0, [pc, #652]	; (8003838 <_ZL11wifi_serverv+0x2dc>)
 80035aa:	f000 fe4d 	bl	8004248 <_Z11serialPrintPc>
}

char logMes[100] = {0};
 80035ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035b2:	2264      	movs	r2, #100	; 0x64
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 f93a 	bl	8009830 <memset>
sprintf(logMes,"Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]);
 80035bc:	4b9f      	ldr	r3, [pc, #636]	; (800383c <_ZL11wifi_serverv+0x2e0>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4619      	mov	r1, r3
 80035c2:	4b9e      	ldr	r3, [pc, #632]	; (800383c <_ZL11wifi_serverv+0x2e0>)
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	461c      	mov	r4, r3
 80035c8:	4b9c      	ldr	r3, [pc, #624]	; (800383c <_ZL11wifi_serverv+0x2e0>)
 80035ca:	789b      	ldrb	r3, [r3, #2]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b9b      	ldr	r3, [pc, #620]	; (800383c <_ZL11wifi_serverv+0x2e0>)
 80035d0:	78db      	ldrb	r3, [r3, #3]
 80035d2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	9200      	str	r2, [sp, #0]
 80035da:	4623      	mov	r3, r4
 80035dc:	460a      	mov	r2, r1
 80035de:	4998      	ldr	r1, [pc, #608]	; (8003840 <_ZL11wifi_serverv+0x2e4>)
 80035e0:	f006 f9aa 	bl	8009938 <siprintf>
serialPrint(logMes);
 80035e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fe2d 	bl	8004248 <_Z11serialPrintPc>
do
{
  uint8_t RemoteIP[4];
  uint16_t RemotePort;

  while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,2,RemoteIP,&RemotePort))
 80035ee:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80035f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80035f6:	2102      	movs	r1, #2
 80035f8:	2000      	movs	r0, #0
 80035fa:	f001 f953 	bl	80048a4 <WIFI_WaitServerConnection>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80bc 	beq.w	8003788 <_ZL11wifi_serverv+0x22c>
  {

	  // Reset the damping count
	  int countTime = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	  // This is a damping factor for the webserver process
	  // This causes the webserver to check for connections
	  // at a slower rate than normal, thus allowing more time for collecting
	  // optical IR samples, which needs to happened very rapidly
	  while (countTime < 100) {
 8003616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361a:	2b63      	cmp	r3, #99	; 0x63
 800361c:	dce7      	bgt.n	80035ee <_ZL11wifi_serverv+0x92>

	  long irValue = particleSensor.getIR();
 800361e:	4889      	ldr	r0, [pc, #548]	; (8003844 <_ZL11wifi_serverv+0x2e8>)
 8003620:	f7fd fe93 	bl	800134a <_ZN8MAX301055getIREv>
 8003624:	4603      	mov	r3, r0
 8003626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	  	  if (checkForBeat(irValue) == true)
 800362a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800362e:	f7ff fd2f 	bl	8003090 <_Z12checkForBeatl>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d078      	beq.n	800372a <_ZL11wifi_serverv+0x1ce>
	  	  {
	  	    //We sensed a beat!
	  	    long delta = HAL_GetTick() - lastBeat;
 8003638:	f001 fa7c 	bl	8004b34 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	4b82      	ldr	r3, [pc, #520]	; (8003848 <_ZL11wifi_serverv+0x2ec>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	    lastBeat = HAL_GetTick();
 8003648:	f001 fa74 	bl	8004b34 <HAL_GetTick>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <_ZL11wifi_serverv+0x2ec>)
 8003652:	601a      	str	r2, [r3, #0]

	  	    beatsPerMinute = 60 / (delta / 1000.0);
 8003654:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003658:	f7fc ff64 	bl	8000524 <__aeabi_i2d>
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	4b7a      	ldr	r3, [pc, #488]	; (800384c <_ZL11wifi_serverv+0x2f0>)
 8003662:	f7fd f8f3 	bl	800084c <__aeabi_ddiv>
 8003666:	4603      	mov	r3, r0
 8003668:	460c      	mov	r4, r1
 800366a:	461a      	mov	r2, r3
 800366c:	4623      	mov	r3, r4
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	4977      	ldr	r1, [pc, #476]	; (8003850 <_ZL11wifi_serverv+0x2f4>)
 8003674:	f7fd f8ea 	bl	800084c <__aeabi_ddiv>
 8003678:	4603      	mov	r3, r0
 800367a:	460c      	mov	r4, r1
 800367c:	4618      	mov	r0, r3
 800367e:	4621      	mov	r1, r4
 8003680:	f7fd f9cc 	bl	8000a1c <__aeabi_d2f>
 8003684:	4602      	mov	r2, r0
 8003686:	4b73      	ldr	r3, [pc, #460]	; (8003854 <_ZL11wifi_serverv+0x2f8>)
 8003688:	601a      	str	r2, [r3, #0]

	  	    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <_ZL11wifi_serverv+0x2f8>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003858 <_ZL11wifi_serverv+0x2fc>
 8003694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	d545      	bpl.n	800372a <_ZL11wifi_serverv+0x1ce>
 800369e:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <_ZL11wifi_serverv+0x2f8>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80036a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	dd3b      	ble.n	800372a <_ZL11wifi_serverv+0x1ce>
	  	    {
	  	      rates[rateSpot++] = (uint8_t)beatsPerMinute; //Store this reading in the array
 80036b2:	4b68      	ldr	r3, [pc, #416]	; (8003854 <_ZL11wifi_serverv+0x2f8>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <_ZL11wifi_serverv+0x300>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	b2d1      	uxtb	r1, r2
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <_ZL11wifi_serverv+0x300>)
 80036c2:	7011      	strb	r1, [r2, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80036ce:	793b      	ldrb	r3, [r7, #4]
 80036d0:	b2d9      	uxtb	r1, r3
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <_ZL11wifi_serverv+0x304>)
 80036d4:	5499      	strb	r1, [r3, r2]
	  	      rateSpot %= RATE_SIZE; //Wrap variable
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <_ZL11wifi_serverv+0x300>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <_ZL11wifi_serverv+0x300>)
 80036e2:	701a      	strb	r2, [r3, #0]

	  	      //Take average of readings
	  	      beatAvg = 0;
 80036e4:	4b5f      	ldr	r3, [pc, #380]	; (8003864 <_ZL11wifi_serverv+0x308>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
	  	      for (uint8_t x = 0 ; x < RATE_SIZE ; x++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80036f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d80f      	bhi.n	8003718 <_ZL11wifi_serverv+0x1bc>
	  	        beatAvg += rates[x];
 80036f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <_ZL11wifi_serverv+0x304>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	461a      	mov	r2, r3
 8003702:	4b58      	ldr	r3, [pc, #352]	; (8003864 <_ZL11wifi_serverv+0x308>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a56      	ldr	r2, [pc, #344]	; (8003864 <_ZL11wifi_serverv+0x308>)
 800370a:	6013      	str	r3, [r2, #0]
	  	      for (uint8_t x = 0 ; x < RATE_SIZE ; x++)
 800370c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003710:	3301      	adds	r3, #1
 8003712:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8003716:	e7eb      	b.n	80036f0 <_ZL11wifi_serverv+0x194>
	  	      beatAvg /= RATE_SIZE;
 8003718:	4b52      	ldr	r3, [pc, #328]	; (8003864 <_ZL11wifi_serverv+0x308>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da00      	bge.n	8003722 <_ZL11wifi_serverv+0x1c6>
 8003720:	3303      	adds	r3, #3
 8003722:	109b      	asrs	r3, r3, #2
 8003724:	461a      	mov	r2, r3
 8003726:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <_ZL11wifi_serverv+0x308>)
 8003728:	601a      	str	r2, [r3, #0]
	  	  }

	  	  // Set the average beat count to 0 if there is no finger placed on the
	  	  // sensor. Under normal light conditions, the IR value is about 1000 with no
	  	  // finger on the sensor, but should never rise above 5000
	  	  if (irValue < 5000) {
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372e:	f241 3287 	movw	r2, #4999	; 0x1387
 8003732:	4293      	cmp	r3, r2
 8003734:	dc02      	bgt.n	800373c <_ZL11wifi_serverv+0x1e0>

	  		  beatAvg = 0;
 8003736:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <_ZL11wifi_serverv+0x308>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

	  	  }

	  	  sprintf(bpmDisplay, "IR= %d , BPM= %d , Avg BPM= %d \n\r", irValue, (uint8_t)beatsPerMinute, (uint8_t)beatAvg);
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <_ZL11wifi_serverv+0x2f8>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	edc7 7a01 	vstr	s15, [r7, #4]
 800374a:	793b      	ldrb	r3, [r7, #4]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	4b44      	ldr	r3, [pc, #272]	; (8003864 <_ZL11wifi_serverv+0x308>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800375e:	4942      	ldr	r1, [pc, #264]	; (8003868 <_ZL11wifi_serverv+0x30c>)
 8003760:	4842      	ldr	r0, [pc, #264]	; (800386c <_ZL11wifi_serverv+0x310>)
 8003762:	f006 f8e9 	bl	8009938 <siprintf>

	  	  HAL_UART_Transmit(&huart1, (uint8_t*)bpmDisplay , strlen(bpmDisplay), HAL_MAX_DELAY);
 8003766:	4841      	ldr	r0, [pc, #260]	; (800386c <_ZL11wifi_serverv+0x310>)
 8003768:	f7fc fd32 	bl	80001d0 <strlen>
 800376c:	4603      	mov	r3, r0
 800376e:	b29a      	uxth	r2, r3
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	493d      	ldr	r1, [pc, #244]	; (800386c <_ZL11wifi_serverv+0x310>)
 8003776:	483e      	ldr	r0, [pc, #248]	; (8003870 <_ZL11wifi_serverv+0x314>)
 8003778:	f005 fb96 	bl	8008ea8 <HAL_UART_Transmit>

	  	  countTime++;
 800377c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  while (countTime < 100) {
 8003786:	e746      	b.n	8003616 <_ZL11wifi_serverv+0xba>

	  }

  }

  char conMes[100] = {0};
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2264      	movs	r2, #100	; 0x64
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f006 f84d 	bl	8009830 <memset>
  sprintf(conMes,"Client connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort);
 8003796:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800379a:	461c      	mov	r4, r3
 800379c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80037a0:	461d      	mov	r5, r3
 80037a2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80037a6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80037aa:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 80037ae:	f107 0008 	add.w	r0, r7, #8
 80037b2:	9102      	str	r1, [sp, #8]
 80037b4:	9201      	str	r2, [sp, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	462b      	mov	r3, r5
 80037ba:	4622      	mov	r2, r4
 80037bc:	492d      	ldr	r1, [pc, #180]	; (8003874 <_ZL11wifi_serverv+0x318>)
 80037be:	f006 f8bb 	bl	8009938 <siprintf>
  serialPrint(conMes);
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fd3e 	bl	8004248 <_Z11serialPrintPc>

  StopServer=WebServerProcess();
 80037cc:	f000 f85a 	bl	8003884 <_ZL16WebServerProcessv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80037d6:	2000      	movs	r0, #0
 80037d8:	f001 f8a8 	bl	800492c <WIFI_CloseServerConnection>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <_ZL11wifi_serverv+0x29c>
  {
    serialPrint("ERROR: failed to close current Server connection\n\r");
 80037ec:	4822      	ldr	r0, [pc, #136]	; (8003878 <_ZL11wifi_serverv+0x31c>)
 80037ee:	f000 fd2b 	bl	8004248 <_Z11serialPrintPc>
    return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e016      	b.n	8003826 <_ZL11wifi_serverv+0x2ca>
  }
}
while(StopServer == false);
 80037f8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d100      	bne.n	8003802 <_ZL11wifi_serverv+0x2a6>
do
 8003800:	e6f5      	b.n	80035ee <_ZL11wifi_serverv+0x92>

if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8003802:	2000      	movs	r0, #0
 8003804:	f001 f8a8 	bl	8004958 <WIFI_StopServer>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <_ZL11wifi_serverv+0x2c2>
{
  serialPrint("ERROR: Cannot stop server.\n\r");
 8003818:	4818      	ldr	r0, [pc, #96]	; (800387c <_ZL11wifi_serverv+0x320>)
 800381a:	f000 fd15 	bl	8004248 <_Z11serialPrintPc>
}

serialPrint("Server is stop\n\r");
 800381e:	4818      	ldr	r0, [pc, #96]	; (8003880 <_ZL11wifi_serverv+0x324>)
 8003820:	f000 fd12 	bl	8004248 <_Z11serialPrintPc>
return 0;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	37e8      	adds	r7, #232	; 0xe8
 800382a:	46bd      	mov	sp, r7
 800382c:	bdb0      	pop	{r4, r5, r7, pc}
 800382e:	bf00      	nop
 8003830:	0800b1dc 	.word	0x0800b1dc
 8003834:	0800b1f8 	.word	0x0800b1f8
 8003838:	0800b1fc 	.word	0x0800b1fc
 800383c:	200000fc 	.word	0x200000fc
 8003840:	0800b21c 	.word	0x0800b21c
 8003844:	2000039c 	.word	0x2000039c
 8003848:	2000026c 	.word	0x2000026c
 800384c:	408f4000 	.word	0x408f4000
 8003850:	404e0000 	.word	0x404e0000
 8003854:	20000270 	.word	0x20000270
 8003858:	437f0000 	.word	0x437f0000
 800385c:	20000268 	.word	0x20000268
 8003860:	20000264 	.word	0x20000264
 8003864:	20000274 	.word	0x20000274
 8003868:	0800b26c 	.word	0x0800b26c
 800386c:	20000104 	.word	0x20000104
 8003870:	2000031c 	.word	0x2000031c
 8003874:	0800b290 	.word	0x0800b290
 8003878:	0800b2b4 	.word	0x0800b2b4
 800387c:	0800b2e8 	.word	0x0800b2e8
 8003880:	0800b308 	.word	0x0800b308

08003884 <_ZL16WebServerProcessv>:

static bool WebServerProcess(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	; 0x38
 8003888:	af02      	add	r7, sp, #8

uint16_t  respLen;

static   uint8_t resp[1024];
bool    stopserver=false;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8003890:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003894:	f242 7310 	movw	r3, #10000	; 0x2710
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038a0:	4942      	ldr	r1, [pc, #264]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 80038a2:	2000      	movs	r0, #0
 80038a4:	f001 f892 	bl	80049cc <WIFI_ReceiveData>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d070      	beq.n	800399a <_ZL16WebServerProcessv+0x116>
{

 char getByte[40] = {0};
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	2228      	movs	r2, #40	; 0x28
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 ffb6 	bl	8009830 <memset>
 sprintf(getByte, "get %d byte(s) from server\n\r",respLen);
 80038c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038c6:	461a      	mov	r2, r3
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	4939      	ldr	r1, [pc, #228]	; (80039b0 <_ZL16WebServerProcessv+0x12c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f006 f833 	bl	8009938 <siprintf>
 serialPrint(getByte);
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fcb7 	bl	8004248 <_Z11serialPrintPc>


 if( respLen > 0)
 80038da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d05f      	beq.n	80039a0 <_ZL16WebServerProcessv+0x11c>
 {
    if(strstr((char *)resp, "GET")) /* GET: put web page */
 80038e0:	4934      	ldr	r1, [pc, #208]	; (80039b4 <_ZL16WebServerProcessv+0x130>)
 80038e2:	4832      	ldr	r0, [pc, #200]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 80038e4:	f006 f87e 	bl	80099e4 <strstr>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <_ZL16WebServerProcessv+0x9a>
    {

      if(SendWebPage( currentTemp, currentDist) != WIFI_STATUS_OK)
 80038ee:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <_ZL16WebServerProcessv+0x134>)
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <_ZL16WebServerProcessv+0x138>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 f873 	bl	80039e4 <_ZL11SendWebPageht>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <_ZL16WebServerProcessv+0x92>
      {
        serialPrint("> ERROR : Cannot send web page\n\r");
 800390e:	482c      	ldr	r0, [pc, #176]	; (80039c0 <_ZL16WebServerProcessv+0x13c>)
 8003910:	f000 fc9a 	bl	8004248 <_Z11serialPrintPc>
 8003914:	e044      	b.n	80039a0 <_ZL16WebServerProcessv+0x11c>
      }
      else
      {
        serialPrint("Send page after  GET command\n\r");
 8003916:	482b      	ldr	r0, [pc, #172]	; (80039c4 <_ZL16WebServerProcessv+0x140>)
 8003918:	f000 fc96 	bl	8004248 <_Z11serialPrintPc>
 800391c:	e040      	b.n	80039a0 <_ZL16WebServerProcessv+0x11c>
      }
     }
     else if(strstr((char *)resp, "POST"))/* POST: received info */
 800391e:	492a      	ldr	r1, [pc, #168]	; (80039c8 <_ZL16WebServerProcessv+0x144>)
 8003920:	4822      	ldr	r0, [pc, #136]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 8003922:	f006 f85f 	bl	80099e4 <strstr>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d039      	beq.n	80039a0 <_ZL16WebServerProcessv+0x11c>
     {
       serialPrint("Post request\n\r");
 800392c:	4827      	ldr	r0, [pc, #156]	; (80039cc <_ZL16WebServerProcessv+0x148>)
 800392e:	f000 fc8b 	bl	8004248 <_Z11serialPrintPc>

		// Put stuff here for POST requests

       if(strstr((char *)resp, "stop_server"))
 8003932:	4927      	ldr	r1, [pc, #156]	; (80039d0 <_ZL16WebServerProcessv+0x14c>)
 8003934:	481d      	ldr	r0, [pc, #116]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 8003936:	f006 f855 	bl	80099e4 <strstr>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d014      	beq.n	800396a <_ZL16WebServerProcessv+0xe6>
       {
         if(strstr((char *)resp, "stop_server=0"))
 8003940:	4924      	ldr	r1, [pc, #144]	; (80039d4 <_ZL16WebServerProcessv+0x150>)
 8003942:	481a      	ldr	r0, [pc, #104]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 8003944:	f006 f84e 	bl	80099e4 <strstr>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <_ZL16WebServerProcessv+0xd2>
         {
           stopserver = false;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003954:	e009      	b.n	800396a <_ZL16WebServerProcessv+0xe6>
         }
         else if(strstr((char *)resp, "stop_server=1"))
 8003956:	4920      	ldr	r1, [pc, #128]	; (80039d8 <_ZL16WebServerProcessv+0x154>)
 8003958:	4814      	ldr	r0, [pc, #80]	; (80039ac <_ZL16WebServerProcessv+0x128>)
 800395a:	f006 f843 	bl	80099e4 <strstr>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <_ZL16WebServerProcessv+0xe6>
         {
           stopserver = true;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         }
       }

       if(SendWebPage( currentTemp, currentDist) != WIFI_STATUS_OK)
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <_ZL16WebServerProcessv+0x134>)
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <_ZL16WebServerProcessv+0x138>)
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 f835 	bl	80039e4 <_ZL11SendWebPageht>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <_ZL16WebServerProcessv+0x10e>
       {
         serialPrint("> ERROR : Cannot send web page\n\r");
 800398a:	480d      	ldr	r0, [pc, #52]	; (80039c0 <_ZL16WebServerProcessv+0x13c>)
 800398c:	f000 fc5c 	bl	8004248 <_Z11serialPrintPc>
 8003990:	e006      	b.n	80039a0 <_ZL16WebServerProcessv+0x11c>
       }
       else
       {
         serialPrint("Send Page after POST command\n\r");
 8003992:	4812      	ldr	r0, [pc, #72]	; (80039dc <_ZL16WebServerProcessv+0x158>)
 8003994:	f000 fc58 	bl	8004248 <_Z11serialPrintPc>
 8003998:	e002      	b.n	80039a0 <_ZL16WebServerProcessv+0x11c>
     }
   }
}
else
{
  serialPrint("Client close connection\n\r");
 800399a:	4811      	ldr	r0, [pc, #68]	; (80039e0 <_ZL16WebServerProcessv+0x15c>)
 800399c:	f000 fc54 	bl	8004248 <_Z11serialPrintPc>
}
return stopserver;
 80039a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	; 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200003dc 	.word	0x200003dc
 80039b0:	0800b31c 	.word	0x0800b31c
 80039b4:	0800b33c 	.word	0x0800b33c
 80039b8:	20000100 	.word	0x20000100
 80039bc:	20000102 	.word	0x20000102
 80039c0:	0800b340 	.word	0x0800b340
 80039c4:	0800b364 	.word	0x0800b364
 80039c8:	0800b384 	.word	0x0800b384
 80039cc:	0800b38c 	.word	0x0800b38c
 80039d0:	0800b39c 	.word	0x0800b39c
 80039d4:	0800b3a8 	.word	0x0800b3a8
 80039d8:	0800b3b8 	.word	0x0800b3b8
 80039dc:	0800b3c8 	.word	0x0800b3c8
 80039e0:	0800b3e8 	.word	0x0800b3e8

080039e4 <_ZL11SendWebPageht>:
// The javascript basically includes a 2-D representation of the previous 10 seconds of
// hear-rate readings. The javascript also includes a 1-second auto-refresh, which automatically
// requests more data every 1 second. After the browser requests new data, this function is called
// and it constructs the new graph and then sends using the wifi drivers
static WIFI_Status_t SendWebPage( uint8_t temperature, uint16_t proxData)
{
 80039e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e6:	f5ad 4d87 	sub.w	sp, sp, #17280	; 0x4380
 80039ea:	b087      	sub	sp, #28
 80039ec:	af08      	add	r7, sp, #32
 80039ee:	4602      	mov	r2, r0
 80039f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039f4:	3b71      	subs	r3, #113	; 0x71
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039fc:	3b74      	subs	r3, #116	; 0x74
 80039fe:	460a      	mov	r2, r1
 8003a00:	801a      	strh	r2, [r3, #0]

uint16_t SentDataLength;
WIFI_Status_t ret;

// Reset the webpage to 0
uint8_t http5[16384] = {0};
 8003a02:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003a06:	3b04      	subs	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2100      	movs	r1, #0
 8003a12:	f005 ff0d 	bl	8009830 <memset>

//char jScript[] = "<!DOCTYPE HTML>\r\n<html>\r\n <meta http-equiv=\"refresh\" content=\"1\">\r\n<head>\r\n<script>\r\nwindow.onload = function () {\r\n\r\nvar dps = [];\r\nvar chart = new CanvasJS.Chart(\"chartContainer\", {\r\n\texportEnabled: true,\r\n\ttitle :{\r\n\t\ttext: \"Heart Rate Over Time\"\r\n\t},\r\n  axisY :{\r\n\t\ttitle: \"Average Beats\",\r\n\t\tsuffix: \"bpm\"\r\n\t},\r\n  axisX :{\r\n\t\ttitle: \"Last 10 Seconds\",\r\n\t\tsuffix: \"s\"\r\n\t},\r\n\tdata: [{\r\n\t\ttype: \"spline\",\r\n\t\tmarkerSize: 0,\r\n\t\tdataPoints: dps \r\n\t}]\r\n});\r\n\r\nvar updateInterval = 1000000;\r\nvar dataLength = 10; \r\n\r\nvar updateChart = function (count) {\r\n\r\n  dps.push({ x:10 ,y:1});\r\n  dps.push({ x:9 ,y:1});\r\n  dps.push({ x:8 ,y:4});\r\n  dps.push({ x:7 ,y:5});\r\n  dps.push({ x:6 ,y:7});\r\n  dps.push({ x:5 ,y:8});\r\n  dps.push({ x:4 ,y:10});\r\n  dps.push({ x:3 ,y:1});\r\n  dps.push({ x:2 ,y:1});\r\n  dps.push({ x:1 ,y:4});\r\n  \r\n  chart.render();\r\n};\r\n\r\nupdateChart(dataLength); \r\nsetInterval(function(){ updateChart() }, updateInterval); \r\n\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<div id=\"chartContainer\" style=\"height: 300px; width: 100%;\"></div>\r\n<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script> \r\n</body>\r\n</html>";

// This is the start of the graph javacript
char jScript[] = "<!DOCTYPE HTML>\r\n<html>\r\n <meta http-equiv=\"refresh\" content=\"1\">\r\n<head>\r\n<script>\r\nwindow.onload = function () {\r\n\r\nvar dps = [];\r\nvar chart = new CanvasJS.Chart(\"chartContainer\", {\r\n\texportEnabled: true,\r\n\ttitle :{\r\n\t\ttext: \"Heart Rate Over Time\"\r\n\t},\r\n  axisY :{\r\n\t\ttitle: \"Average Beats\",\r\n\t\tsuffix: \"bpm\"\r\n\t},\r\n  axisX :{\r\n\t\ttitle: \"Last 10 Seconds\",\r\n\t\tsuffix: \"s\"\r\n\t},\r\n\tdata: [{\r\n\t\ttype: \"spline\",\r\n\t\tmarkerSize: 0,\r\n\t\tdataPoints: dps \r\n\t}]\r\n});\r\n\r\nvar updateInterval = 1000000;\r\nvar dataLength = 10; \r\n\r\nvar updateChart = function (count) {\r\n\r\n  ";
 8003a16:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003a1a:	3b34      	subs	r3, #52	; 0x34
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <_ZL11SendWebPageht+0x174>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4611      	mov	r1, r2
 8003a22:	f240 232d 	movw	r3, #557	; 0x22d
 8003a26:	461a      	mov	r2, r3
 8003a28:	f005 fef7 	bl	800981a <memcpy>

// This is where the new values are spliced into the existing graph-infrastructure, everything else
// is the same. Basically, this sprintf line accesses the previous 10 samples and formats them in the correct positions
// so that the javascript plot will recognize them as valid points on the graph
sprintf(graphArray,"dps.push({ x:10 ,y:%d});\r\n  dps.push({ x:9 ,y:%d});\r\n  dps.push({ x:8 ,y:%d});\r\n  dps.push({ x:7 ,y:%d});\r\n  dps.push({ x:6 ,y:%d});\r\n  dps.push({ x:5 ,y:%d});\r\n  dps.push({ x:4 ,y:%d});\r\n  dps.push({ x:3 ,y:%d});\r\n  dps.push({ x:2 ,y:%d});\r\n  dps.push({ x:1 ,y:%d});\r\n",beatArray[0], beatArray[1],beatArray[2],beatArray[3],beatArray[4],beatArray[5],beatArray[6],beatArray[7],beatArray[8],beatArray[9]);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	469c      	mov	ip, r3
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	469e      	mov	lr, r3
 8003a38:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a3a:	789b      	ldrb	r3, [r3, #2]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a46:	791b      	ldrb	r3, [r3, #4]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a4c:	795b      	ldrb	r3, [r3, #5]
 8003a4e:	461c      	mov	r4, r3
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a52:	799b      	ldrb	r3, [r3, #6]
 8003a54:	461d      	mov	r5, r3
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a58:	79db      	ldrb	r3, [r3, #7]
 8003a5a:	461e      	mov	r6, r3
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a5e:	7a1b      	ldrb	r3, [r3, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <_ZL11SendWebPageht+0x178>)
 8003a64:	7a5b      	ldrb	r3, [r3, #9]
 8003a66:	9307      	str	r3, [sp, #28]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9306      	str	r3, [sp, #24]
 8003a6c:	9605      	str	r6, [sp, #20]
 8003a6e:	9504      	str	r5, [sp, #16]
 8003a70:	9403      	str	r4, [sp, #12]
 8003a72:	9002      	str	r0, [sp, #8]
 8003a74:	9101      	str	r1, [sp, #4]
 8003a76:	9200      	str	r2, [sp, #0]
 8003a78:	4673      	mov	r3, lr
 8003a7a:	4662      	mov	r2, ip
 8003a7c:	4938      	ldr	r1, [pc, #224]	; (8003b60 <_ZL11SendWebPageht+0x17c>)
 8003a7e:	4839      	ldr	r0, [pc, #228]	; (8003b64 <_ZL11SendWebPageht+0x180>)
 8003a80:	f005 ff5a 	bl	8009938 <siprintf>

// Just the end of the plot javascript
char jScriptEnd[] = "  \r\n  chart.render();\r\n};\r\n\r\nupdateChart(dataLength); \r\nsetInterval(function(){ updateChart() }, updateInterval); \r\n\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<div id=\"chartContainer\" style=\"height: 300px; width: 100%;\"></div>\r\n<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script> \r\n</body>\r\n</html>";
 8003a84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a88:	3b6c      	subs	r3, #108	; 0x6c
 8003a8a:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <_ZL11SendWebPageht+0x184>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4611      	mov	r1, r2
 8003a90:	f44f 739c 	mov.w	r3, #312	; 0x138
 8003a94:	461a      	mov	r2, r3
 8003a96:	f005 fec0 	bl	800981a <memcpy>

// These next 3 lines are string concatenation, which basically just copies the strings
// contents to the http5, which holds all the values for the webpage
strcat((char *)http5, jScript);
 8003a9a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8003a9e:	3a34      	subs	r2, #52	; 0x34
 8003aa0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 ff65 	bl	8009978 <strcat>
strcat((char *)http5, graphArray);
 8003aae:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	492b      	ldr	r1, [pc, #172]	; (8003b64 <_ZL11SendWebPageht+0x180>)
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 ff5e 	bl	8009978 <strcat>
strcat((char *)http5, jScriptEnd);
 8003abc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ac0:	3a6c      	subs	r2, #108	; 0x6c
 8003ac2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003ac6:	3b04      	subs	r3, #4
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f005 ff54 	bl	8009978 <strcat>


// Send the page off
ret = WIFI_SendData(0, (uint8_t *)http5, strlen((char *)http5), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8003ad0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003ad4:	3b04      	subs	r3, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fb7a 	bl	80001d0 <strlen>
 8003adc:	4603      	mov	r3, r0
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	f507 4086 	add.w	r0, r7, #17152	; 0x4300
 8003ae4:	f100 0074 	add.w	r0, r0, #116	; 0x74
 8003ae8:	f507 715e 	add.w	r1, r7, #888	; 0x378
 8003aec:	3904      	subs	r1, #4
 8003aee:	f242 7310 	movw	r3, #10000	; 0x2710
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4603      	mov	r3, r0
 8003af6:	2000      	movs	r0, #0
 8003af8:	f000 ff46 	bl	8004988 <WIFI_SendData>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f507 4286 	add.w	r2, r7, #17152	; 0x4300
 8003b02:	f102 0277 	add.w	r2, r2, #119	; 0x77
 8003b06:	7013      	strb	r3, [r2, #0]

if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http5)))
 8003b08:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 8003b0c:	f103 0377 	add.w	r3, r3, #119	; 0x77
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <_ZL11SendWebPageht+0x15c>
 8003b16:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 8003b1a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	461c      	mov	r4, r3
 8003b22:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8003b26:	3b04      	subs	r3, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fb51 	bl	80001d0 <strlen>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d005      	beq.n	8003b40 <_ZL11SendWebPageht+0x15c>
{
  ret = WIFI_STATUS_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f507 4286 	add.w	r2, r7, #17152	; 0x4300
 8003b3a:	f102 0277 	add.w	r2, r2, #119	; 0x77
 8003b3e:	7013      	strb	r3, [r2, #0]
}

return ret;
 8003b40:	f507 4386 	add.w	r3, r7, #17152	; 0x4300
 8003b44:	f103 0377 	add.w	r3, r3, #119	; 0x77
 8003b48:	781b      	ldrb	r3, [r3, #0]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f507 4786 	add.w	r7, r7, #17152	; 0x4300
 8003b50:	377c      	adds	r7, #124	; 0x7c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0800b514 	.word	0x0800b514
 8003b5c:	20000278 	.word	0x20000278
 8003b60:	0800b404 	.word	0x0800b404
 8003b64:	20000138 	.word	0x20000138
 8003b68:	0800b744 	.word	0x0800b744

08003b6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0b8      	sub	sp, #224	; 0xe0
 8003b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b76:	2244      	movs	r2, #68	; 0x44
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 fe58 	bl	8009830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b90:	463b      	mov	r3, r7
 8003b92:	2288      	movs	r2, #136	; 0x88
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f005 fe4a 	bl	8009830 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003bae:	2360      	movs	r3, #96	; 0x60
 8003bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003bc6:	2328      	movs	r3, #40	; 0x28
 8003bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 f8ec 	bl	8005dc0 <HAL_RCC_OscConfig>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <_Z18SystemClock_Configv+0x90>
  {
    Error_Handler();
 8003bf8:	f000 fb6a 	bl	80042d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bfc:	230f      	movs	r3, #15
 8003bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c02:	2303      	movs	r3, #3
 8003c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c1a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c1e:	2104      	movs	r1, #4
 8003c20:	4618      	mov	r0, r3
 8003c22:	f002 fcb3 	bl	800658c <HAL_RCC_ClockConfig>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8003c36:	f000 fb4b 	bl	80042d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003c3a:	2341      	movs	r3, #65	; 0x41
 8003c3c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c42:	2300      	movs	r3, #0
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c46:	463b      	mov	r3, r7
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fea3 	bl	8006994 <HAL_RCCEx_PeriphCLKConfig>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <_Z18SystemClock_Configv+0xf6>
  {
    Error_Handler();
 8003c5e:	f000 fb37 	bl	80042d0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c66:	f002 f855 	bl	8005d14 <HAL_PWREx_ControlVoltageScaling>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <_Z18SystemClock_Configv+0x112>
  {
    Error_Handler();
 8003c7a:	f000 fb29 	bl	80042d0 <Error_Handler>
  }
}
 8003c7e:	bf00      	nop
 8003c80:	37e0      	adds	r7, #224	; 0xe0
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003c8e:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <_ZL12MX_I2C1_Initv+0x94>)
 8003c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <_ZL12MX_I2C1_Initv+0x98>)
 8003c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cc2:	4815      	ldr	r0, [pc, #84]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cc4:	f001 faa6 	bl	8005214 <HAL_I2C_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003cd8:	f000 fafa 	bl	80042d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	480e      	ldr	r0, [pc, #56]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003ce0:	f001 ff72 	bl	8005bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8003cf4:	f000 faec 	bl	80042d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4807      	ldr	r0, [pc, #28]	; (8003d18 <_ZL12MX_I2C1_Initv+0x90>)
 8003cfc:	f001 ffaf 	bl	8005c5e <HAL_I2CEx_ConfigDigitalFilter>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003d10:	f000 fade 	bl	80042d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000284 	.word	0x20000284
 8003d1c:	40005400 	.word	0x40005400
 8003d20:	10909cec 	.word	0x10909cec

08003d24 <_ZL13MX_TIM16_Initv>:

// This timer is configured for 1 second intervals
static void MX_TIM16_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <_ZL13MX_TIM16_Initv+0x54>)
 8003d2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d30:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003d34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d42:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003d56:	4807      	ldr	r0, [pc, #28]	; (8003d74 <_ZL13MX_TIM16_Initv+0x50>)
 8003d58:	f004 fd99 	bl	800888e <HAL_TIM_Base_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 8003d6c:	f000 fab0 	bl	80042d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200002d0 	.word	0x200002d0
 8003d78:	40014400 	.word	0x40014400

08003d7c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8003d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dbe:	4807      	ldr	r0, [pc, #28]	; (8003ddc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003dc0:	f005 f824 	bl	8008e0c <HAL_UART_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003dd4:	f000 fa7c 	bl	80042d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	2000031c 	.word	0x2000031c
 8003de0:	40013800 	.word	0x40013800

08003de4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dfa:	4bba      	ldr	r3, [pc, #744]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	4ab9      	ldr	r2, [pc, #740]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e00:	f043 0310 	orr.w	r3, r3, #16
 8003e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e06:	4bb7      	ldr	r3, [pc, #732]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e12:	4bb4      	ldr	r3, [pc, #720]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	4ab3      	ldr	r2, [pc, #716]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e1e:	4bb1      	ldr	r3, [pc, #708]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	4bae      	ldr	r3, [pc, #696]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	4aad      	ldr	r2, [pc, #692]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e36:	4bab      	ldr	r3, [pc, #684]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e42:	4ba8      	ldr	r3, [pc, #672]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	4aa7      	ldr	r2, [pc, #668]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4e:	4ba5      	ldr	r3, [pc, #660]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e5a:	4ba2      	ldr	r3, [pc, #648]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	4aa1      	ldr	r2, [pc, #644]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e60:	f043 0308 	orr.w	r3, r3, #8
 8003e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e66:	4b9f      	ldr	r3, [pc, #636]	; (80040e4 <_ZL12MX_GPIO_Initv+0x300>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003e72:	2200      	movs	r2, #0
 8003e74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003e78:	489b      	ldr	r0, [pc, #620]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8003e7a:	f001 f99b 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f248 1104 	movw	r1, #33028	; 0x8104
 8003e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e88:	f001 f994 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8003e92:	4896      	ldr	r0, [pc, #600]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8003e94:	f001 f98e 	bl	80051b4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f241 0181 	movw	r1, #4225	; 0x1081
 8003e9e:	4894      	ldr	r0, [pc, #592]	; (80040f0 <_ZL12MX_GPIO_Initv+0x30c>)
 8003ea0:	f001 f988 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003eaa:	4891      	ldr	r0, [pc, #580]	; (80040f0 <_ZL12MX_GPIO_Initv+0x30c>)
 8003eac:	f001 f982 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003eb6:	488f      	ldr	r0, [pc, #572]	; (80040f4 <_ZL12MX_GPIO_Initv+0x310>)
 8003eb8:	f001 f97c 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	488a      	ldr	r0, [pc, #552]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8003ec2:	f001 f977 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4887      	ldr	r0, [pc, #540]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8003ecc:	f001 f972 	bl	80051b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003ed0:	f240 1315 	movw	r3, #277	; 0x115
 8003ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ee2:	f107 0314 	add.w	r3, r7, #20
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	487f      	ldr	r0, [pc, #508]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8003eea:	f000 ffa3 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003eee:	236a      	movs	r3, #106	; 0x6a
 8003ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <_ZL12MX_GPIO_Initv+0x314>)
 8003ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	4619      	mov	r1, r3
 8003f00:	4879      	ldr	r0, [pc, #484]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8003f02:	f000 ff97 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f0c:	4b7b      	ldr	r3, [pc, #492]	; (80040fc <_ZL12MX_GPIO_Initv+0x318>)
 8003f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4876      	ldr	r0, [pc, #472]	; (80040f4 <_ZL12MX_GPIO_Initv+0x310>)
 8003f1c:	f000 ff8a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003f20:	233f      	movs	r3, #63	; 0x3f
 8003f22:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f24:	230b      	movs	r3, #11
 8003f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4619      	mov	r1, r3
 8003f32:	4870      	ldr	r0, [pc, #448]	; (80040f4 <_ZL12MX_GPIO_Initv+0x310>)
 8003f34:	f000 ff7e 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f56:	f000 ff6d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003f5a:	f248 1304 	movw	r3, #33028	; 0x8104
 8003f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f60:	2301      	movs	r3, #1
 8003f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4619      	mov	r1, r3
 8003f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f76:	f000 ff5d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	4619      	mov	r1, r3
 8003f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f98:	f000 ff4c 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003fa0:	230b      	movs	r3, #11
 8003fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4619      	mov	r1, r3
 8003fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fb2:	f000 ff3f 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003fb6:	23e0      	movs	r3, #224	; 0xe0
 8003fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd4:	f000 ff2e 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fdc:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <_ZL12MX_GPIO_Initv+0x314>)
 8003fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4840      	ldr	r0, [pc, #256]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8003fec:	f000 ff22 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ff4:	230b      	movs	r3, #11
 8003ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	483a      	ldr	r0, [pc, #232]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8004004:	f000 ff16 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004008:	f24f 0334 	movw	r3, #61492	; 0xf034
 800400c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4619      	mov	r1, r3
 8004020:	4832      	ldr	r0, [pc, #200]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8004022:	f000 ff07 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004026:	f44f 7320 	mov.w	r3, #640	; 0x280
 800402a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004038:	2306      	movs	r3, #6
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4619      	mov	r1, r3
 8004042:	4829      	ldr	r0, [pc, #164]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8004044:	f000 fef6 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8004048:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800404c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004056:	2303      	movs	r3, #3
 8004058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800405a:	230a      	movs	r3, #10
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800405e:	f107 0314 	add.w	r3, r7, #20
 8004062:	4619      	mov	r1, r3
 8004064:	4820      	ldr	r0, [pc, #128]	; (80040e8 <_ZL12MX_GPIO_Initv+0x304>)
 8004066:	f000 fee5 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800406a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800406e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004070:	2312      	movs	r3, #18
 8004072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004074:	2301      	movs	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800407c:	2304      	movs	r3, #4
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	4819      	ldr	r0, [pc, #100]	; (80040ec <_ZL12MX_GPIO_Initv+0x308>)
 8004088:	f000 fed4 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800408c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800409e:	2307      	movs	r3, #7
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	4811      	ldr	r0, [pc, #68]	; (80040f0 <_ZL12MX_GPIO_Initv+0x30c>)
 80040aa:	f000 fec3 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80040ae:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80040b2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <_ZL12MX_GPIO_Initv+0x314>)
 80040b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4619      	mov	r1, r3
 80040c2:	480b      	ldr	r0, [pc, #44]	; (80040f0 <_ZL12MX_GPIO_Initv+0x30c>)
 80040c4:	f000 feb6 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80040c8:	f243 0381 	movw	r3, #12417	; 0x3081
 80040cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d6:	2300      	movs	r3, #0
 80040d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	4619      	mov	r1, r3
 80040e0:	e00e      	b.n	8004100 <_ZL12MX_GPIO_Initv+0x31c>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	48001000 	.word	0x48001000
 80040ec:	48000400 	.word	0x48000400
 80040f0:	48000c00 	.word	0x48000c00
 80040f4:	48000800 	.word	0x48000800
 80040f8:	10110000 	.word	0x10110000
 80040fc:	10210000 	.word	0x10210000
 8004100:	4841      	ldr	r0, [pc, #260]	; (8004208 <_ZL12MX_GPIO_Initv+0x424>)
 8004102:	f000 fe97 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004106:	f44f 7310 	mov.w	r3, #576	; 0x240
 800410a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800410c:	2301      	movs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004118:	f107 0314 	add.w	r3, r7, #20
 800411c:	4619      	mov	r1, r3
 800411e:	483b      	ldr	r0, [pc, #236]	; (800420c <_ZL12MX_GPIO_Initv+0x428>)
 8004120:	f000 fe88 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004124:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <_ZL12MX_GPIO_Initv+0x42c>)
 800412c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	4619      	mov	r1, r3
 8004138:	4834      	ldr	r0, [pc, #208]	; (800420c <_ZL12MX_GPIO_Initv+0x428>)
 800413a:	f000 fe7b 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800413e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4619      	mov	r1, r3
 8004152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004156:	f000 fe6d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800415a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800415e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800416c:	230a      	movs	r3, #10
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417a:	f000 fe5b 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800417e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004190:	2306      	movs	r3, #6
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	481c      	ldr	r0, [pc, #112]	; (800420c <_ZL12MX_GPIO_Initv+0x428>)
 800419c:	f000 fe4a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80041a0:	2302      	movs	r3, #2
 80041a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041b0:	2305      	movs	r3, #5
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	4813      	ldr	r0, [pc, #76]	; (8004208 <_ZL12MX_GPIO_Initv+0x424>)
 80041bc:	f000 fe3a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80041c0:	2378      	movs	r3, #120	; 0x78
 80041c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041cc:	2303      	movs	r3, #3
 80041ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041d0:	2307      	movs	r3, #7
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	4619      	mov	r1, r3
 80041da:	480b      	ldr	r0, [pc, #44]	; (8004208 <_ZL12MX_GPIO_Initv+0x424>)
 80041dc:	f000 fe2a 	bl	8004e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2100      	movs	r1, #0
 80041e4:	2017      	movs	r0, #23
 80041e6:	f000 fdae 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80041ea:	2017      	movs	r0, #23
 80041ec:	f000 fdc7 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041f0:	2200      	movs	r2, #0
 80041f2:	2100      	movs	r1, #0
 80041f4:	2028      	movs	r0, #40	; 0x28
 80041f6:	f000 fda6 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041fa:	2028      	movs	r0, #40	; 0x28
 80041fc:	f000 fdbf 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 8004200:	bf00      	nop
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	48000c00 	.word	0x48000c00
 800420c:	48000800 	.word	0x48000800
 8004210:	10110000 	.word	0x10110000

08004214 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
switch (GPIO_Pin)
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d000      	beq.n	8004226 <HAL_GPIO_EXTI_Callback+0x12>
      	//alarm = false;

  	}
  default:
  {
    break;
 8004224:	e002      	b.n	800422c <HAL_GPIO_EXTI_Callback+0x18>
    SPI_WIFI_ISR();
 8004226:	f7fe ff23 	bl	8003070 <SPI_WIFI_ISR>
    break;
 800422a:	bf00      	nop
  }
}
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SPI3_IRQHandler>:
* @brief  SPI3 line detection callback.
* @param  None
* @retval None
*/
void SPI3_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
HAL_SPI_IRQHandler(&hspi);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <SPI3_IRQHandler+0x10>)
 800423a:	f003 fe3b 	bl	8007eb4 <HAL_SPI_IRQHandler>
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200007e8 	.word	0x200007e8

08004248 <_Z11serialPrintPc>:


// Made a function for printing over the USART, as I was tired of copy-pasting
// the obscenely long HAL transmit function
void serialPrint(char buffer[]) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*)buffer , strlen(buffer), HAL_MAX_DELAY);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fb ffbd 	bl	80001d0 <strlen>
 8004256:	4603      	mov	r3, r0
 8004258:	b29a      	uxth	r2, r3
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <_Z11serialPrintPc+0x28>)
 8004262:	f004 fe21 	bl	8008ea8 <HAL_UART_Transmit>

}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000031c 	.word	0x2000031c

08004274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  // Check to make sure the correct timer called this interrupt
  if (htim == &htim16 )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d118      	bne.n	80042b6 <HAL_TIM_PeriodElapsedCallback+0x42>
  {

	  //serialPrint("Interrupt works! \n\r");

	  // Catch the current avg beat value
	  uint8_t heartBeatAvg  = (uint8_t)beatAvg;
 8004284:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	72fb      	strb	r3, [r7, #11]

	  // Shift the beat array over by 1
	  for (int i=0; i<9;i++) {
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b08      	cmp	r3, #8
 8004292:	dc0d      	bgt.n	80042b0 <HAL_TIM_PeriodElapsedCallback+0x3c>

		  beatArray[9-i] = beatArray[8-i];
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f1c3 0208 	rsb	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f1c3 0309 	rsb	r3, r3, #9
 80042a0:	490a      	ldr	r1, [pc, #40]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042a2:	5c89      	ldrb	r1, [r1, r2]
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042a6:	54d1      	strb	r1, [r2, r3]
	  for (int i=0; i<9;i++) {
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e7ee      	b.n	800428e <HAL_TIM_PeriodElapsedCallback+0x1a>

	  }

	  // Store the latest value
	  beatArray[0] = heartBeatAvg;
 80042b0:	4a06      	ldr	r2, [pc, #24]	; (80042cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	7013      	strb	r3, [r2, #0]

	  // The array has now been fully shifted by 1

  }

}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	200002d0 	.word	0x200002d0
 80042c8:	20000274 	.word	0x20000274
 80042cc:	20000278 	.word	0x20000278

080042d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <_Z41__static_initialization_and_destruction_0ii>:
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d102      	bne.n	8004300 <_Z41__static_initialization_and_destruction_0ii+0x20>
MAX30105 particleSensor;
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80042fc:	f7fc fd5e 	bl	8000dbc <_ZN8MAX30105C1Ev>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000039c 	.word	0x2000039c

0800430c <_GLOBAL__sub_I_bufferBad>:
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
 8004310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004314:	2001      	movs	r0, #1
 8004316:	f7ff ffe3 	bl	80042e0 <_Z41__static_initialization_and_destruction_0ii>
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_MspInit+0x44>)
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_MspInit+0x44>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6613      	str	r3, [r2, #96]	; 0x60
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_MspInit+0x44>)
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_MspInit+0x44>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <HAL_MspInit+0x44>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6593      	str	r3, [r2, #88]	; 0x58
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_MspInit+0x44>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_I2C_MspInit+0x7c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d128      	bne.n	80043d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 800438c:	f043 0302 	orr.w	r3, r3, #2
 8004390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800439e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043a4:	2312      	movs	r3, #18
 80043a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043a8:	2301      	movs	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ac:	2303      	movs	r3, #3
 80043ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043b0:	2304      	movs	r3, #4
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b4:	f107 0314 	add.w	r3, r7, #20
 80043b8:	4619      	mov	r1, r3
 80043ba:	480b      	ldr	r0, [pc, #44]	; (80043e8 <HAL_I2C_MspInit+0x84>)
 80043bc:	f000 fd3a 	bl	8004e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 80043c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_I2C_MspInit+0x80>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043d8:	bf00      	nop
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40005400 	.word	0x40005400
 80043e4:	40021000 	.word	0x40021000
 80043e8:	48000400 	.word	0x48000400

080043ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <HAL_TIM_Base_MspInit+0x44>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d113      	bne.n	8004426 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <HAL_TIM_Base_MspInit+0x48>)
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_TIM_Base_MspInit+0x48>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	6613      	str	r3, [r2, #96]	; 0x60
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_TIM_Base_MspInit+0x48>)
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2100      	movs	r1, #0
 800441a:	2019      	movs	r0, #25
 800441c:	f000 fc93 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004420:	2019      	movs	r0, #25
 8004422:	f000 fcac 	bl	8004d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40014400 	.word	0x40014400
 8004434:	40021000 	.word	0x40021000

08004438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_UART_MspInit+0x7c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d127      	bne.n	80044aa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_UART_MspInit+0x80>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_UART_MspInit+0x80>)
 8004460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004464:	6613      	str	r3, [r2, #96]	; 0x60
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_UART_MspInit+0x80>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_UART_MspInit+0x80>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <HAL_UART_MspInit+0x80>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_UART_MspInit+0x80>)
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004496:	2303      	movs	r3, #3
 8004498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800449a:	2307      	movs	r3, #7
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 0314 	add.w	r3, r7, #20
 80044a2:	4619      	mov	r1, r3
 80044a4:	4805      	ldr	r0, [pc, #20]	; (80044bc <HAL_UART_MspInit+0x84>)
 80044a6:	f000 fcc5 	bl	8004e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044aa:	bf00      	nop
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40021000 	.word	0x40021000
 80044bc:	48000400 	.word	0x48000400

080044c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d2:	e7fe      	b.n	80044d2 <HardFault_Handler+0x4>

080044d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044d8:	e7fe      	b.n	80044d8 <MemManage_Handler+0x4>

080044da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044de:	e7fe      	b.n	80044de <BusFault_Handler+0x4>

080044e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e4:	e7fe      	b.n	80044e4 <UsageFault_Handler+0x4>

080044e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004514:	f000 fafa 	bl	8004b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004518:	bf00      	nop
 800451a:	bd80      	pop	{r7, pc}

0800451c <EXTI1_IRQHandler>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

// Need this for SPI+WIFI
void EXTI1_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004520:	2002      	movs	r0, #2
 8004522:	f000 fe5f 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}

0800452a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800452e:	2020      	movs	r0, #32
 8004530:	f000 fe58 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004534:	2040      	movs	r0, #64	; 0x40
 8004536:	f000 fe55 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800453a:	2080      	movs	r0, #128	; 0x80
 800453c:	f000 fe52 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004540:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004544:	f000 fe4e 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}

0800454c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004552:	f004 fa5b 	bl	8008a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200002d0 	.word	0x200002d0

08004560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004564:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004568:	f000 fe3c 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800456c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004570:	f000 fe38 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004574:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004578:	f000 fe34 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800457c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004580:	f000 fe30 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004584:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004588:	f000 fe2c 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}

08004590 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e00a      	b.n	80045b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045a2:	f3af 8000 	nop.w
 80045a6:	4601      	mov	r1, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	60ba      	str	r2, [r7, #8]
 80045ae:	b2ca      	uxtb	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	dbf0      	blt.n	80045a2 <_read+0x12>
	}

return len;
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e009      	b.n	80045f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	60ba      	str	r2, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	dbf1      	blt.n	80045dc <_write+0x12>
	}
	return len;
 80045f8:	687b      	ldr	r3, [r7, #4]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_close>:

int _close(int file)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
	return -1;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800462a:	605a      	str	r2, [r3, #4]
	return 0;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <_isatty>:

int _isatty(int file)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
	return 1;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
	return 0;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <_sbrk+0x5c>)
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <_sbrk+0x60>)
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <_sbrk+0x64>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <_sbrk+0x64>)
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <_sbrk+0x68>)
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <_sbrk+0x64>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d207      	bcs.n	80046ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800469c:	f005 f884 	bl	80097a8 <__errno>
 80046a0:	4602      	mov	r2, r0
 80046a2:	230c      	movs	r3, #12
 80046a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	e009      	b.n	80046c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <_sbrk+0x64>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <_sbrk+0x64>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <_sbrk+0x64>)
 80046bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20018000 	.word	0x20018000
 80046cc:	00000400 	.word	0x00000400
 80046d0:	200007dc 	.word	0x200007dc
 80046d4:	20001158 	.word	0x20001158

080046d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <SystemInit+0x64>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <SystemInit+0x64>)
 80046e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <SystemInit+0x68>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <SystemInit+0x68>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <SystemInit+0x68>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <SystemInit+0x68>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <SystemInit+0x68>)
 8004704:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004708:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800470c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <SystemInit+0x68>)
 8004710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <SystemInit+0x68>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <SystemInit+0x68>)
 800471c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <SystemInit+0x68>)
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <SystemInit+0x64>)
 800472a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800472e:	609a      	str	r2, [r3, #8]
#endif
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000ed00 	.word	0xe000ed00
 8004740:	40021000 	.word	0x40021000

08004744 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <WIFI_Init+0x40>)
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <WIFI_Init+0x44>)
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <WIFI_Init+0x48>)
 8004758:	4a0d      	ldr	r2, [pc, #52]	; (8004790 <WIFI_Init+0x4c>)
 800475a:	490e      	ldr	r1, [pc, #56]	; (8004794 <WIFI_Init+0x50>)
 800475c:	480e      	ldr	r0, [pc, #56]	; (8004798 <WIFI_Init+0x54>)
 800475e:	f7fd fbc1 	bl	8001ee4 <ES_WIFI_RegisterBusIO>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <WIFI_Init+0x54>)
 800476a:	f7fd fb8d 	bl	8001e88 <ES_WIFI_Init>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8004778:	79fb      	ldrb	r3, [r7, #7]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	08002d95 	.word	0x08002d95
 8004788:	08002e89 	.word	0x08002e89
 800478c:	08002f65 	.word	0x08002f65
 8004790:	08002c7d 	.word	0x08002c7d
 8004794:	08002ae1 	.word	0x08002ae1
 8004798:	2000084c 	.word	0x2000084c

0800479c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	4809      	ldr	r0, [pc, #36]	; (80047dc <WIFI_Connect+0x40>)
 80047b6:	f7fd fbc9 	bl	8001f4c <ES_WIFI_Connect>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80047c0:	4806      	ldr	r0, [pc, #24]	; (80047dc <WIFI_Connect+0x40>)
 80047c2:	f7fd fc65 	bl	8002090 <ES_WIFI_GetNetworkSettings>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2000084c 	.word	0x2000084c

080047e0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4806      	ldr	r0, [pc, #24]	; (8004808 <WIFI_GetMAC_Address+0x28>)
 80047f0:	f7fd fc78 	bl	80020e4 <ES_WIFI_GetMACAddress>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2000084c 	.word	0x2000084c

0800480c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004818:	4809      	ldr	r0, [pc, #36]	; (8004840 <WIFI_GetIP_Address+0x34>)
 800481a:	f7fd fc0d 	bl	8002038 <ES_WIFI_IsConnected>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <WIFI_GetIP_Address+0x34>)
 8004826:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000084c 	.word	0x2000084c

08004844 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	72fb      	strb	r3, [r7, #11]
 8004852:	4613      	mov	r3, r2
 8004854:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8004862:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004864:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800487c:	f107 0310 	add.w	r3, r7, #16
 8004880:	4619      	mov	r1, r3
 8004882:	4807      	ldr	r0, [pc, #28]	; (80048a0 <WIFI_StartServer+0x5c>)
 8004884:	f7fd fc5e 	bl	8002144 <ES_WIFI_StartServerSingleConn>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2000084c 	.word	0x2000084c

080048a4 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80048b8:	f107 0310 	add.w	r3, r7, #16
 80048bc:	461a      	mov	r2, r3
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	4819      	ldr	r0, [pc, #100]	; (8004928 <WIFI_WaitServerConnection+0x84>)
 80048c2:	f7fd fcf3 	bl	80022ac <ES_WIFI_WaitServerConnection>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80048cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10f      	bne.n	80048f4 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <WIFI_WaitServerConnection+0x3c>
 80048da:	8a7a      	ldrh	r2, [r7, #18]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <WIFI_WaitServerConnection+0x4c>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 80048e6:	f8d7 3016 	ldr.w	r3, [r7, #22]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e014      	b.n	800491e <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d10f      	bne.n	800491c <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <WIFI_WaitServerConnection+0x64>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 800490e:	2204      	movs	r2, #4
 8004910:	2100      	movs	r1, #0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f004 ff8c 	bl	8009830 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8004918:	2305      	movs	r3, #5
 800491a:	e000      	b.n	800491e <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 800491c:	2301      	movs	r3, #1
}
 800491e:	4618      	mov	r0, r3
 8004920:	3728      	adds	r7, #40	; 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2000084c 	.word	0x2000084c

0800492c <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4806      	ldr	r0, [pc, #24]	; (8004954 <WIFI_CloseServerConnection+0x28>)
 800493c:	f7fd fdd6 	bl	80024ec <ES_WIFI_CloseServerConnection>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	2000084c 	.word	0x2000084c

08004958 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4619      	mov	r1, r3
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <WIFI_StopServer+0x2c>)
 800496a:	f7fd fe21 	bl	80025b0 <ES_WIFI_StopServerSingleConn>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	2000084c 	.word	0x2000084c

08004988 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	4613      	mov	r3, r2
 8004998:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800499e:	89ba      	ldrh	r2, [r7, #12]
 80049a0:	7bf9      	ldrb	r1, [r7, #15]
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4806      	ldr	r0, [pc, #24]	; (80049c8 <WIFI_SendData+0x40>)
 80049b0:	f7fd fe60 	bl	8002674 <ES_WIFI_SendData>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	2000084c 	.word	0x2000084c

080049cc <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	4613      	mov	r3, r2
 80049dc:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80049e2:	89ba      	ldrh	r2, [r7, #12]
 80049e4:	7bf9      	ldrb	r1, [r7, #15]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4806      	ldr	r0, [pc, #24]	; (8004a0c <WIFI_ReceiveData+0x40>)
 80049f4:	f7fd fefa 	bl	80027ec <ES_WIFI_ReceiveData>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	2000084c 	.word	0x2000084c

08004a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a14:	f7ff fe60 	bl	80046d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a1a:	e003      	b.n	8004a24 <LoopCopyDataInit>

08004a1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a22:	3104      	adds	r1, #4

08004a24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a24:	480a      	ldr	r0, [pc, #40]	; (8004a50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a2c:	d3f6      	bcc.n	8004a1c <CopyDataInit>
	ldr	r2, =_sbss
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a30:	e002      	b.n	8004a38 <LoopFillZerobss>

08004a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a34:	f842 3b04 	str.w	r3, [r2], #4

08004a38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <LoopForever+0x16>)
	cmp	r2, r3
 8004a3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a3c:	d3f9      	bcc.n	8004a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a3e:	f004 feb9 	bl	80097b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a42:	f7fe fc89 	bl	8003358 <main>

08004a46 <LoopForever>:

LoopForever:
    b LoopForever
 8004a46:	e7fe      	b.n	8004a46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004a48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004a4c:	0800b988 	.word	0x0800b988
	ldr	r0, =_sdata
 8004a50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a54:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004a58:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004a5c:	20001154 	.word	0x20001154

08004a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a60:	e7fe      	b.n	8004a60 <ADC1_2_IRQHandler>

08004a62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a6c:	2003      	movs	r0, #3
 8004a6e:	f000 f95f 	bl	8004d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a72:	2000      	movs	r0, #0
 8004a74:	f000 f80e 	bl	8004a94 <HAL_InitTick>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	71fb      	strb	r3, [r7, #7]
 8004a82:	e001      	b.n	8004a88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a84:	f7ff fc4a 	bl	800431c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a88:	79fb      	ldrb	r3, [r7, #7]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_InitTick+0x6c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d023      	beq.n	8004af0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_InitTick+0x70>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_InitTick+0x6c>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f96b 	bl	8004d9a <HAL_SYSTICK_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b0f      	cmp	r3, #15
 8004ace:	d809      	bhi.n	8004ae4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f000 f935 	bl	8004d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004adc:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <HAL_InitTick+0x74>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e007      	b.n	8004af4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	e004      	b.n	8004af4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	e001      	b.n	8004af4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000000c 	.word	0x2000000c
 8004b04:	20000004 	.word	0x20000004
 8004b08:	20000008 	.word	0x20000008

08004b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_IncTick+0x20>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_IncTick+0x24>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <HAL_IncTick+0x24>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	2000000c 	.word	0x2000000c
 8004b30:	2000114c 	.word	0x2000114c

08004b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return uwTick;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_GetTick+0x14>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000114c 	.word	0x2000114c

08004b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b54:	f7ff ffee 	bl	8004b34 <HAL_GetTick>
 8004b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d005      	beq.n	8004b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_Delay+0x40>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b72:	bf00      	nop
 8004b74:	f7ff ffde 	bl	8004b34 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d8f7      	bhi.n	8004b74 <HAL_Delay+0x28>
  {
  }
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bac:	4013      	ands	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc2:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	60d3      	str	r3, [r2, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 0307 	and.w	r3, r3, #7
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db0b      	blt.n	8004c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4907      	ldr	r1, [pc, #28]	; (8004c2c <__NVIC_EnableIRQ+0x38>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2001      	movs	r0, #1
 8004c16:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db0a      	blt.n	8004c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	490c      	ldr	r1, [pc, #48]	; (8004c7c <__NVIC_SetPriority+0x4c>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	440b      	add	r3, r1
 8004c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c58:	e00a      	b.n	8004c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4908      	ldr	r1, [pc, #32]	; (8004c80 <__NVIC_SetPriority+0x50>)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3b04      	subs	r3, #4
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	761a      	strb	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000e100 	.word	0xe000e100
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f1c3 0307 	rsb	r3, r3, #7
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	bf28      	it	cs
 8004ca2:	2304      	movcs	r3, #4
 8004ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d902      	bls.n	8004cb4 <NVIC_EncodePriority+0x30>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3b03      	subs	r3, #3
 8004cb2:	e000      	b.n	8004cb6 <NVIC_EncodePriority+0x32>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	43d9      	mvns	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	4313      	orrs	r3, r2
         );
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cfc:	d301      	bcc.n	8004d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00f      	b.n	8004d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <SysTick_Config+0x40>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0a:	210f      	movs	r1, #15
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f7ff ff8e 	bl	8004c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <SysTick_Config+0x40>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <SysTick_Config+0x40>)
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff29 	bl	8004b90 <__NVIC_SetPriorityGrouping>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d58:	f7ff ff3e 	bl	8004bd8 <__NVIC_GetPriorityGrouping>
 8004d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ff8e 	bl	8004c84 <NVIC_EncodePriority>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff5d 	bl	8004c30 <__NVIC_SetPriority>
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff31 	bl	8004bf4 <__NVIC_EnableIRQ>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ffa2 	bl	8004cec <SysTick_Config>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e029      	b.n	8004e2a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 020e 	bic.w	r2, r2, #14
 8004de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f003 021c 	and.w	r2, r3, #28
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
    }
  }
  return status;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e42:	e17f      	b.n	8005144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8171 	beq.w	800513e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d00b      	beq.n	8004e7c <HAL_GPIO_Init+0x48>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d007      	beq.n	8004e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e70:	2b11      	cmp	r3, #17
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b12      	cmp	r3, #18
 8004e7a:	d130      	bne.n	8004ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	2203      	movs	r2, #3
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 0201 	and.w	r2, r3, #1
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d118      	bne.n	8004f1c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0201 	and.w	r2, r3, #1
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x128>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	d123      	bne.n	8004fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	220f      	movs	r2, #15
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	08da      	lsrs	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	6939      	ldr	r1, [r7, #16]
 8004fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0203 	and.w	r2, r3, #3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80ac 	beq.w	800513e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe6:	4b5e      	ldr	r3, [pc, #376]	; (8005160 <HAL_GPIO_Init+0x32c>)
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fea:	4a5d      	ldr	r2, [pc, #372]	; (8005160 <HAL_GPIO_Init+0x32c>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	; (8005160 <HAL_GPIO_Init+0x32c>)
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ffe:	4a59      	ldr	r2, [pc, #356]	; (8005164 <HAL_GPIO_Init+0x330>)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	3302      	adds	r3, #2
 8005006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	220f      	movs	r2, #15
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005028:	d025      	beq.n	8005076 <HAL_GPIO_Init+0x242>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a4e      	ldr	r2, [pc, #312]	; (8005168 <HAL_GPIO_Init+0x334>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01f      	beq.n	8005072 <HAL_GPIO_Init+0x23e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4d      	ldr	r2, [pc, #308]	; (800516c <HAL_GPIO_Init+0x338>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d019      	beq.n	800506e <HAL_GPIO_Init+0x23a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a4c      	ldr	r2, [pc, #304]	; (8005170 <HAL_GPIO_Init+0x33c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_GPIO_Init+0x236>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4b      	ldr	r2, [pc, #300]	; (8005174 <HAL_GPIO_Init+0x340>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00d      	beq.n	8005066 <HAL_GPIO_Init+0x232>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a4a      	ldr	r2, [pc, #296]	; (8005178 <HAL_GPIO_Init+0x344>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <HAL_GPIO_Init+0x22e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a49      	ldr	r2, [pc, #292]	; (800517c <HAL_GPIO_Init+0x348>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <HAL_GPIO_Init+0x22a>
 800505a:	2306      	movs	r3, #6
 800505c:	e00c      	b.n	8005078 <HAL_GPIO_Init+0x244>
 800505e:	2307      	movs	r3, #7
 8005060:	e00a      	b.n	8005078 <HAL_GPIO_Init+0x244>
 8005062:	2305      	movs	r3, #5
 8005064:	e008      	b.n	8005078 <HAL_GPIO_Init+0x244>
 8005066:	2304      	movs	r3, #4
 8005068:	e006      	b.n	8005078 <HAL_GPIO_Init+0x244>
 800506a:	2303      	movs	r3, #3
 800506c:	e004      	b.n	8005078 <HAL_GPIO_Init+0x244>
 800506e:	2302      	movs	r3, #2
 8005070:	e002      	b.n	8005078 <HAL_GPIO_Init+0x244>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_GPIO_Init+0x244>
 8005076:	2300      	movs	r3, #0
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	f002 0203 	and.w	r2, r2, #3
 800507e:	0092      	lsls	r2, r2, #2
 8005080:	4093      	lsls	r3, r2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005088:	4936      	ldr	r1, [pc, #216]	; (8005164 <HAL_GPIO_Init+0x330>)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	3302      	adds	r3, #2
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005096:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_GPIO_Init+0x34c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050ba:	4a31      	ldr	r2, [pc, #196]	; (8005180 <HAL_GPIO_Init+0x34c>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80050c0:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_GPIO_Init+0x34c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050e4:	4a26      	ldr	r2, [pc, #152]	; (8005180 <HAL_GPIO_Init+0x34c>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050ea:	4b25      	ldr	r3, [pc, #148]	; (8005180 <HAL_GPIO_Init+0x34c>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_GPIO_Init+0x34c>)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_GPIO_Init+0x34c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43db      	mvns	r3, r3
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4013      	ands	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005138:	4a11      	ldr	r2, [pc, #68]	; (8005180 <HAL_GPIO_Init+0x34c>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	3301      	adds	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	f47f ae78 	bne.w	8004e44 <HAL_GPIO_Init+0x10>
  }
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40021000 	.word	0x40021000
 8005164:	40010000 	.word	0x40010000
 8005168:	48000400 	.word	0x48000400
 800516c:	48000800 	.word	0x48000800
 8005170:	48000c00 	.word	0x48000c00
 8005174:	48001000 	.word	0x48001000
 8005178:	48001400 	.word	0x48001400
 800517c:	48001800 	.word	0x48001800
 8005180:	40010400 	.word	0x40010400

08005184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e001      	b.n	80051a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
 80051c0:	4613      	mov	r3, r2
 80051c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051c4:	787b      	ldrb	r3, [r7, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051ca:	887a      	ldrh	r2, [r7, #2]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051d0:	e002      	b.n	80051d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051d2:	887a      	ldrh	r2, [r7, #2]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051fa:	4a05      	ldr	r2, [pc, #20]	; (8005210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f806 	bl	8004214 <HAL_GPIO_EXTI_Callback>
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40010400 	.word	0x40010400

08005214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e081      	b.n	800532a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff f892 	bl	8004364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d107      	bne.n	800528e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	e006      	b.n	800529c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800529a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d104      	bne.n	80052ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	ea42 0103 	orr.w	r1, r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	460b      	mov	r3, r1
 8005348:	813b      	strh	r3, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	f040 80f9 	bne.w	800554e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_I2C_Mem_Write+0x34>
 8005362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0ed      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_I2C_Mem_Write+0x4e>
 800537e:	2302      	movs	r3, #2
 8005380:	e0e6      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800538a:	f7ff fbd3 	bl	8004b34 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2319      	movs	r3, #25
 8005396:	2201      	movs	r2, #1
 8005398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fac3 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0d1      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2221      	movs	r2, #33	; 0x21
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2240      	movs	r2, #64	; 0x40
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053d4:	88f8      	ldrh	r0, [r7, #6]
 80053d6:	893a      	ldrh	r2, [r7, #8]
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4603      	mov	r3, r0
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f9d3 	bl	8005790 <I2C_RequestMemoryWrite>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0a9      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	2bff      	cmp	r3, #255	; 0xff
 8005404:	d90e      	bls.n	8005424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	22ff      	movs	r2, #255	; 0xff
 800540a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	b2da      	uxtb	r2, r3
 8005412:	8979      	ldrh	r1, [r7, #10]
 8005414:	2300      	movs	r3, #0
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fba5 	bl	8005b6c <I2C_TransferConfig>
 8005422:	e00f      	b.n	8005444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005432:	b2da      	uxtb	r2, r3
 8005434:	8979      	ldrh	r1, [r7, #10]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fb94 	bl	8005b6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 faad 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e07b      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d034      	beq.n	80054fc <HAL_I2C_Mem_Write+0x1c8>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d130      	bne.n	80054fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa3f 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e04d      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	d90e      	bls.n	80054dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	8979      	ldrh	r1, [r7, #10]
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fb49 	bl	8005b6c <I2C_TransferConfig>
 80054da:	e00f      	b.n	80054fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	8979      	ldrh	r1, [r7, #10]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fb38 	bl	8005b6c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d19e      	bne.n	8005444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa8c 	bl	8005a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e01a      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2220      	movs	r2, #32
 8005520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <HAL_I2C_Mem_Write+0x224>)
 800552e:	400b      	ands	r3, r1
 8005530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	fe00e800 	.word	0xfe00e800

0800555c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	461a      	mov	r2, r3
 800556a:	4603      	mov	r3, r0
 800556c:	817b      	strh	r3, [r7, #10]
 800556e:	460b      	mov	r3, r1
 8005570:	813b      	strh	r3, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b20      	cmp	r3, #32
 8005580:	f040 80fd 	bne.w	800577e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_I2C_Mem_Read+0x34>
 800558a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0f1      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_I2C_Mem_Read+0x4e>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0ea      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055b2:	f7ff fabf 	bl	8004b34 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	2319      	movs	r3, #25
 80055be:	2201      	movs	r2, #1
 80055c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9af 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0d5      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2222      	movs	r2, #34	; 0x22
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055fc:	88f8      	ldrh	r0, [r7, #6]
 80055fe:	893a      	ldrh	r2, [r7, #8]
 8005600:	8979      	ldrh	r1, [r7, #10]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4603      	mov	r3, r0
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f913 	bl	8005838 <I2C_RequestMemoryRead>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0ad      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2bff      	cmp	r3, #255	; 0xff
 800562c:	d90e      	bls.n	800564c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	22ff      	movs	r2, #255	; 0xff
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	b2da      	uxtb	r2, r3
 800563a:	8979      	ldrh	r1, [r7, #10]
 800563c:	4b52      	ldr	r3, [pc, #328]	; (8005788 <HAL_I2C_Mem_Read+0x22c>)
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa91 	bl	8005b6c <I2C_TransferConfig>
 800564a:	e00f      	b.n	800566c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	b2da      	uxtb	r2, r3
 800565c:	8979      	ldrh	r1, [r7, #10]
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <HAL_I2C_Mem_Read+0x22c>)
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fa80 	bl	8005b6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2200      	movs	r2, #0
 8005674:	2104      	movs	r1, #4
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f956 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07c      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d034      	beq.n	800572c <HAL_I2C_Mem_Read+0x1d0>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d130      	bne.n	800572c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f927 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e04d      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d90e      	bls.n	800570c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa31 	bl	8005b6c <I2C_TransferConfig>
 800570a:	e00f      	b.n	800572c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fa20 	bl	8005b6c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d19a      	bne.n	800566c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f974 	bl	8005a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01a      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_I2C_Mem_Read+0x230>)
 800575e:	400b      	ands	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	80002400 	.word	0x80002400
 800578c:	fe00e800 	.word	0xfe00e800

08005790 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	4608      	mov	r0, r1
 800579a:	4611      	mov	r1, r2
 800579c:	461a      	mov	r2, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	817b      	strh	r3, [r7, #10]
 80057a2:	460b      	mov	r3, r1
 80057a4:	813b      	strh	r3, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	8979      	ldrh	r1, [r7, #10]
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <I2C_RequestMemoryWrite+0xa4>)
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f9d7 	bl	8005b6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8f0 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e02c      	b.n	800582c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d105      	bne.n	80057e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d8:	893b      	ldrh	r3, [r7, #8]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
 80057e2:	e015      	b.n	8005810 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8d6 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e012      	b.n	800582c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2200      	movs	r2, #0
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f884 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	80002000 	.word	0x80002000

08005838 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	4608      	mov	r0, r1
 8005842:	4611      	mov	r1, r2
 8005844:	461a      	mov	r2, r3
 8005846:	4603      	mov	r3, r0
 8005848:	817b      	strh	r3, [r7, #10]
 800584a:	460b      	mov	r3, r1
 800584c:	813b      	strh	r3, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	8979      	ldrh	r1, [r7, #10]
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <I2C_RequestMemoryRead+0xa4>)
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f984 	bl	8005b6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f89d 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e02c      	b.n	80058d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800587e:	893b      	ldrh	r3, [r7, #8]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
 8005888:	e015      	b.n	80058b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	b29b      	uxth	r3, r3
 8005890:	b2da      	uxtb	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f883 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e012      	b.n	80058d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ac:	893b      	ldrh	r3, [r7, #8]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2200      	movs	r2, #0
 80058be:	2140      	movs	r1, #64	; 0x40
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f831 	bl	8005928 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	80002000 	.word	0x80002000

080058e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d103      	bne.n	80058fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d007      	beq.n	800591c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	619a      	str	r2, [r3, #24]
  }
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005938:	e022      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d01e      	beq.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7ff f8f7 	bl	8004b34 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d113      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e00f      	b.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4013      	ands	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	429a      	cmp	r2, r3
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	429a      	cmp	r2, r3
 800599c:	d0cd      	beq.n	800593a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b4:	e02c      	b.n	8005a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f870 	bl	8005aa0 <I2C_IsAcknowledgeFailed>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e02a      	b.n	8005a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d01e      	beq.n	8005a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7ff f8af 	bl	8004b34 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d113      	bne.n	8005a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d1cb      	bne.n	80059b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a34:	e028      	b.n	8005a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f830 	bl	8005aa0 <I2C_IsAcknowledgeFailed>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e026      	b.n	8005a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7ff f873 	bl	8004b34 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d113      	bne.n	8005a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d1cf      	bne.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d151      	bne.n	8005b5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aba:	e022      	b.n	8005b02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d01e      	beq.n	8005b02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac4:	f7ff f836 	bl	8004b34 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <I2C_IsAcknowledgeFailed+0x3a>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d113      	bne.n	8005b02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e02e      	b.n	8005b60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d1d5      	bne.n	8005abc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2210      	movs	r2, #16
 8005b16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fedd 	bl	80058e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	fe00e800 	.word	0xfe00e800

08005b6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	0d5b      	lsrs	r3, r3, #21
 8005b88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <I2C_TransferConfig+0x58>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	43db      	mvns	r3, r3
 8005b92:	ea02 0103 	and.w	r1, r2, r3
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b9c:	7a7b      	ldrb	r3, [r7, #9]
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	03ff63ff 	.word	0x03ff63ff

08005bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d138      	bne.n	8005c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e032      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2224      	movs	r2, #36	; 0x24
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d139      	bne.n	8005ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e033      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	; 0x24
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40007000 	.word	0x40007000

08005d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d130      	bne.n	8005d86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d24:	4b23      	ldr	r3, [pc, #140]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d30:	d038      	beq.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2232      	movs	r2, #50	; 0x32
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	0c9b      	lsrs	r3, r3, #18
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d58:	e002      	b.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d102      	bne.n	8005d74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f2      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d80:	d110      	bne.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e00f      	b.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d92:	d007      	beq.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d94:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d9c:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40007000 	.word	0x40007000
 8005db8:	20000004 	.word	0x20000004
 8005dbc:	431bde83 	.word	0x431bde83

08005dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e3d4      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd2:	4ba1      	ldr	r3, [pc, #644]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ddc:	4b9e      	ldr	r3, [pc, #632]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80e4 	beq.w	8005fbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_RCC_OscConfig+0x4a>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	f040 808b 	bne.w	8005f18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	f040 8087 	bne.w	8005f18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e0a:	4b93      	ldr	r3, [pc, #588]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_RCC_OscConfig+0x62>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e3ac      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	4b8c      	ldr	r3, [pc, #560]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <HAL_RCC_OscConfig+0x7c>
 8005e32:	4b89      	ldr	r3, [pc, #548]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e3a:	e005      	b.n	8005e48 <HAL_RCC_OscConfig+0x88>
 8005e3c:	4b86      	ldr	r3, [pc, #536]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e42:	091b      	lsrs	r3, r3, #4
 8005e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d223      	bcs.n	8005e94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd3f 	bl	80068d4 <RCC_SetFlashLatencyFromMSIRange>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e38d      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e60:	4b7d      	ldr	r3, [pc, #500]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7c      	ldr	r2, [pc, #496]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e66:	f043 0308 	orr.w	r3, r3, #8
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	4b7a      	ldr	r3, [pc, #488]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	4977      	ldr	r1, [pc, #476]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e7e:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	4972      	ldr	r1, [pc, #456]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
 8005e92:	e025      	b.n	8005ee0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e94:	4b70      	ldr	r3, [pc, #448]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6f      	ldr	r2, [pc, #444]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005e9a:	f043 0308 	orr.w	r3, r3, #8
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	496a      	ldr	r1, [pc, #424]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eb2:	4b69      	ldr	r3, [pc, #420]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	4965      	ldr	r1, [pc, #404]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d109      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fcff 	bl	80068d4 <RCC_SetFlashLatencyFromMSIRange>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e34d      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ee0:	f000 fc36 	bl	8006750 <HAL_RCC_GetSysClockFreq>
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	4b5c      	ldr	r3, [pc, #368]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a5a      	ldr	r2, [pc, #360]	; (800605c <HAL_RCC_OscConfig+0x29c>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8005efc:	4a58      	ldr	r2, [pc, #352]	; (8006060 <HAL_RCC_OscConfig+0x2a0>)
 8005efe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f00:	4b58      	ldr	r3, [pc, #352]	; (8006064 <HAL_RCC_OscConfig+0x2a4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fdc5 	bl	8004a94 <HAL_InitTick>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d052      	beq.n	8005fba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	e331      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d032      	beq.n	8005f86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f20:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a4c      	ldr	r2, [pc, #304]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f2c:	f7fe fe02 	bl	8004b34 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f34:	f7fe fdfe 	bl	8004b34 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e31a      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a40      	ldr	r2, [pc, #256]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	493b      	ldr	r1, [pc, #236]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	4936      	ldr	r1, [pc, #216]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]
 8005f84:	e01a      	b.n	8005fbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f86:	4b34      	ldr	r3, [pc, #208]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a33      	ldr	r2, [pc, #204]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f92:	f7fe fdcf 	bl	8004b34 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f9a:	f7fe fdcb 	bl	8004b34 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e2e7      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fac:	4b2a      	ldr	r3, [pc, #168]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f0      	bne.n	8005f9a <HAL_RCC_OscConfig+0x1da>
 8005fb8:	e000      	b.n	8005fbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d074      	beq.n	80060b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d005      	beq.n	8005fda <HAL_RCC_OscConfig+0x21a>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	d10e      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fda:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d064      	beq.n	80060b0 <HAL_RCC_OscConfig+0x2f0>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d160      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e2c4      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffa:	d106      	bne.n	800600a <HAL_RCC_OscConfig+0x24a>
 8005ffc:	4b16      	ldr	r3, [pc, #88]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a15      	ldr	r2, [pc, #84]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e01d      	b.n	8006046 <HAL_RCC_OscConfig+0x286>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006012:	d10c      	bne.n	800602e <HAL_RCC_OscConfig+0x26e>
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0f      	ldr	r2, [pc, #60]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 800601a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0c      	ldr	r2, [pc, #48]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	e00b      	b.n	8006046 <HAL_RCC_OscConfig+0x286>
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a06      	ldr	r2, [pc, #24]	; (8006058 <HAL_RCC_OscConfig+0x298>)
 8006040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01c      	beq.n	8006088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604e:	f7fe fd71 	bl	8004b34 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006054:	e011      	b.n	800607a <HAL_RCC_OscConfig+0x2ba>
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	0800b894 	.word	0x0800b894
 8006060:	20000004 	.word	0x20000004
 8006064:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006068:	f7fe fd64 	bl	8004b34 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	; 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e280      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800607a:	4baf      	ldr	r3, [pc, #700]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x2a8>
 8006086:	e014      	b.n	80060b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fe fd54 	bl	8004b34 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006090:	f7fe fd50 	bl	8004b34 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e26c      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060a2:	4ba5      	ldr	r3, [pc, #660]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x2d0>
 80060ae:	e000      	b.n	80060b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d060      	beq.n	8006180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_OscConfig+0x310>
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b0c      	cmp	r3, #12
 80060c8:	d119      	bne.n	80060fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d116      	bne.n	80060fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d0:	4b99      	ldr	r3, [pc, #612]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_OscConfig+0x328>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e249      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	061b      	lsls	r3, r3, #24
 80060f6:	4990      	ldr	r1, [pc, #576]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060fc:	e040      	b.n	8006180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d023      	beq.n	800614e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006106:	4b8c      	ldr	r3, [pc, #560]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a8b      	ldr	r2, [pc, #556]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fe fd0f 	bl	8004b34 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611a:	f7fe fd0b 	bl	8004b34 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e227      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800612c:	4b82      	ldr	r3, [pc, #520]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006138:	4b7f      	ldr	r3, [pc, #508]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	497c      	ldr	r1, [pc, #496]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
 800614c:	e018      	b.n	8006180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800614e:	4b7a      	ldr	r3, [pc, #488]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a79      	ldr	r2, [pc, #484]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615a:	f7fe fceb 	bl	8004b34 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006162:	f7fe fce7 	bl	8004b34 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e203      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006174:	4b70      	ldr	r3, [pc, #448]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f0      	bne.n	8006162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d03c      	beq.n	8006206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01c      	beq.n	80061ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619a:	4a67      	ldr	r2, [pc, #412]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fe fcc6 	bl	8004b34 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fe fcc2 	bl	8004b34 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e1de      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061be:	4b5e      	ldr	r3, [pc, #376]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80061c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ef      	beq.n	80061ac <HAL_RCC_OscConfig+0x3ec>
 80061cc:	e01b      	b.n	8006206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ce:	4b5a      	ldr	r3, [pc, #360]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80061d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d4:	4a58      	ldr	r2, [pc, #352]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061de:	f7fe fca9 	bl	8004b34 <HAL_GetTick>
 80061e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061e4:	e008      	b.n	80061f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e6:	f7fe fca5 	bl	8004b34 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e1c1      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061f8:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80061fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ef      	bne.n	80061e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80a6 	beq.w	8006360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006214:	2300      	movs	r3, #0
 8006216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006218:	4b47      	ldr	r3, [pc, #284]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800621a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006224:	4b44      	ldr	r3, [pc, #272]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	4a43      	ldr	r2, [pc, #268]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800622a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622e:	6593      	str	r3, [r2, #88]	; 0x58
 8006230:	4b41      	ldr	r3, [pc, #260]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006240:	4b3e      	ldr	r3, [pc, #248]	; (800633c <HAL_RCC_OscConfig+0x57c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d118      	bne.n	800627e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <HAL_RCC_OscConfig+0x57c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a3a      	ldr	r2, [pc, #232]	; (800633c <HAL_RCC_OscConfig+0x57c>)
 8006252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006258:	f7fe fc6c 	bl	8004b34 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006260:	f7fe fc68 	bl	8004b34 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e184      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006272:	4b32      	ldr	r3, [pc, #200]	; (800633c <HAL_RCC_OscConfig+0x57c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d108      	bne.n	8006298 <HAL_RCC_OscConfig+0x4d8>
 8006286:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006296:	e024      	b.n	80062e2 <HAL_RCC_OscConfig+0x522>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b05      	cmp	r3, #5
 800629e:	d110      	bne.n	80062c2 <HAL_RCC_OscConfig+0x502>
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062a8:	f043 0304 	orr.w	r3, r3, #4
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062c0:	e00f      	b.n	80062e2 <HAL_RCC_OscConfig+0x522>
 80062c2:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062d2:	4b19      	ldr	r3, [pc, #100]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	4a17      	ldr	r2, [pc, #92]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 80062da:	f023 0304 	bic.w	r3, r3, #4
 80062de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d016      	beq.n	8006318 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ea:	f7fe fc23 	bl	8004b34 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f2:	f7fe fc1f 	bl	8004b34 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006300:	4293      	cmp	r3, r2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e139      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006308:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_RCC_OscConfig+0x578>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ed      	beq.n	80062f2 <HAL_RCC_OscConfig+0x532>
 8006316:	e01a      	b.n	800634e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fe fc0c 	bl	8004b34 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800631e:	e00f      	b.n	8006340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fe fc08 	bl	8004b34 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d906      	bls.n	8006340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e122      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
 8006336:	bf00      	nop
 8006338:	40021000 	.word	0x40021000
 800633c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006340:	4b90      	ldr	r3, [pc, #576]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e8      	bne.n	8006320 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800634e:	7ffb      	ldrb	r3, [r7, #31]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006354:	4b8b      	ldr	r3, [pc, #556]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	4a8a      	ldr	r2, [pc, #552]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 800635a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8108 	beq.w	800657a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	2b02      	cmp	r3, #2
 8006370:	f040 80d0 	bne.w	8006514 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006374:	4b83      	ldr	r3, [pc, #524]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f003 0203 	and.w	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d130      	bne.n	80063ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	3b01      	subs	r3, #1
 8006394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	d127      	bne.n	80063ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d11f      	bne.n	80063ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b4:	2a07      	cmp	r2, #7
 80063b6:	bf14      	ite	ne
 80063b8:	2201      	movne	r2, #1
 80063ba:	2200      	moveq	r2, #0
 80063bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063be:	4293      	cmp	r3, r2
 80063c0:	d113      	bne.n	80063ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	3b01      	subs	r3, #1
 80063d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d109      	bne.n	80063ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	3b01      	subs	r3, #1
 80063e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d06e      	beq.n	80064c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	d069      	beq.n	80064c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063f0:	4b64      	ldr	r3, [pc, #400]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063fc:	4b61      	ldr	r3, [pc, #388]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0b7      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800640c:	4b5d      	ldr	r3, [pc, #372]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a5c      	ldr	r2, [pc, #368]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006416:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006418:	f7fe fb8c 	bl	8004b34 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006420:	f7fe fb88 	bl	8004b34 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e0a4      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006432:	4b54      	ldr	r3, [pc, #336]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643e:	4b51      	ldr	r3, [pc, #324]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	4b51      	ldr	r3, [pc, #324]	; (8006588 <HAL_RCC_OscConfig+0x7c8>)
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800644e:	3a01      	subs	r2, #1
 8006450:	0112      	lsls	r2, r2, #4
 8006452:	4311      	orrs	r1, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006458:	0212      	lsls	r2, r2, #8
 800645a:	4311      	orrs	r1, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006460:	0852      	lsrs	r2, r2, #1
 8006462:	3a01      	subs	r2, #1
 8006464:	0552      	lsls	r2, r2, #21
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800646c:	0852      	lsrs	r2, r2, #1
 800646e:	3a01      	subs	r2, #1
 8006470:	0652      	lsls	r2, r2, #25
 8006472:	4311      	orrs	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006478:	0912      	lsrs	r2, r2, #4
 800647a:	0452      	lsls	r2, r2, #17
 800647c:	430a      	orrs	r2, r1
 800647e:	4941      	ldr	r1, [pc, #260]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006480:	4313      	orrs	r3, r2
 8006482:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006484:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a3e      	ldr	r2, [pc, #248]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 800648a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006490:	4b3c      	ldr	r3, [pc, #240]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a3b      	ldr	r2, [pc, #236]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800649a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800649c:	f7fe fb4a 	bl	8004b34 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fe fb46 	bl	8004b34 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e062      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b6:	4b33      	ldr	r3, [pc, #204]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064c2:	e05a      	b.n	800657a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e059      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d152      	bne.n	800657a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064d4:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064e0:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4a27      	ldr	r2, [pc, #156]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 80064e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ec:	f7fe fb22 	bl	8004b34 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fe fb1e 	bl	8004b34 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e03a      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006506:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x734>
 8006512:	e032      	b.n	800657a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d02d      	beq.n	8006576 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006524:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006526:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	4a13      	ldr	r2, [pc, #76]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800653e:	4b11      	ldr	r3, [pc, #68]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4a10      	ldr	r2, [pc, #64]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 8006544:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800654c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fe faf1 	bl	8004b34 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006556:	f7fe faed 	bl	8004b34 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e009      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_OscConfig+0x7c4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0x796>
 8006574:	e001      	b.n	800657a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	f99d808c 	.word	0xf99d808c

0800658c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0c8      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d910      	bls.n	80065d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ae:	4b63      	ldr	r3, [pc, #396]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 0207 	bic.w	r2, r3, #7
 80065b6:	4961      	ldr	r1, [pc, #388]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065be:	4b5f      	ldr	r3, [pc, #380]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0b0      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d04c      	beq.n	8006676 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d107      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e4:	4b56      	ldr	r3, [pc, #344]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d121      	bne.n	8006634 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e09e      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d107      	bne.n	800660c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065fc:	4b50      	ldr	r3, [pc, #320]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d115      	bne.n	8006634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e092      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006614:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e086      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006624:	4b46      	ldr	r3, [pc, #280]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e07e      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006634:	4b42      	ldr	r3, [pc, #264]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f023 0203 	bic.w	r2, r3, #3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	493f      	ldr	r1, [pc, #252]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006646:	f7fe fa75 	bl	8004b34 <HAL_GetTick>
 800664a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664c:	e00a      	b.n	8006664 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664e:	f7fe fa71 	bl	8004b34 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	; 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e066      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 020c 	and.w	r2, r3, #12
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	429a      	cmp	r2, r3
 8006674:	d1eb      	bne.n	800664e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006682:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	492c      	ldr	r1, [pc, #176]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006694:	4b29      	ldr	r3, [pc, #164]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d210      	bcs.n	80066c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a2:	4b26      	ldr	r3, [pc, #152]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 0207 	bic.w	r2, r3, #7
 80066aa:	4924      	ldr	r1, [pc, #144]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <HAL_RCC_ClockConfig+0x1b0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e036      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d0:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4918      	ldr	r1, [pc, #96]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	4910      	ldr	r1, [pc, #64]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006702:	f000 f825 	bl	8006750 <HAL_RCC_GetSysClockFreq>
 8006706:	4601      	mov	r1, r0
 8006708:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <HAL_RCC_ClockConfig+0x1b4>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	5cd3      	ldrb	r3, [r2, r3]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	fa21 f303 	lsr.w	r3, r1, r3
 800671e:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe f9b4 	bl	8004a94 <HAL_InitTick>
 800672c:	4603      	mov	r3, r0
 800672e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006730:	7afb      	ldrb	r3, [r7, #11]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40022000 	.word	0x40022000
 8006740:	40021000 	.word	0x40021000
 8006744:	0800b894 	.word	0x0800b894
 8006748:	20000004 	.word	0x20000004
 800674c:	20000008 	.word	0x20000008

08006750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800675e:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 030c 	and.w	r3, r3, #12
 8006766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006768:	4b3a      	ldr	r3, [pc, #232]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0x34>
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b0c      	cmp	r3, #12
 800677c:	d121      	bne.n	80067c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d11e      	bne.n	80067c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006784:	4b33      	ldr	r3, [pc, #204]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d107      	bne.n	80067a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006790:	4b30      	ldr	r3, [pc, #192]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 8006792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e005      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80067ac:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <HAL_RCC_GetSysClockFreq+0x108>)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10d      	bne.n	80067d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067c0:	e00a      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d102      	bne.n	80067ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067c8:	4b24      	ldr	r3, [pc, #144]	; (800685c <HAL_RCC_GetSysClockFreq+0x10c>)
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e004      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RCC_GetSysClockFreq+0x110>)
 80067d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d133      	bne.n	8006846 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d002      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d003      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0xaa>
 80067f2:	e005      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <HAL_RCC_GetSysClockFreq+0x10c>)
 80067f6:	617b      	str	r3, [r7, #20]
      break;
 80067f8:	e005      	b.n	8006806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067fa:	4b19      	ldr	r3, [pc, #100]	; (8006860 <HAL_RCC_GetSysClockFreq+0x110>)
 80067fc:	617b      	str	r3, [r7, #20]
      break;
 80067fe:	e002      	b.n	8006806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	617b      	str	r3, [r7, #20]
      break;
 8006804:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006806:	4b13      	ldr	r3, [pc, #76]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	3301      	adds	r3, #1
 8006812:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	fb02 f203 	mul.w	r2, r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCC_GetSysClockFreq+0x104>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	0e5b      	lsrs	r3, r3, #25
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	3301      	adds	r3, #1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006846:	69bb      	ldr	r3, [r7, #24]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3724      	adds	r7, #36	; 0x24
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40021000 	.word	0x40021000
 8006858:	0800b8ac 	.word	0x0800b8ac
 800685c:	00f42400 	.word	0x00f42400
 8006860:	007a1200 	.word	0x007a1200

08006864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006868:	4b03      	ldr	r3, [pc, #12]	; (8006878 <HAL_RCC_GetHCLKFreq+0x14>)
 800686a:	681b      	ldr	r3, [r3, #0]
}
 800686c:	4618      	mov	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000004 	.word	0x20000004

0800687c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006880:	f7ff fff0 	bl	8006864 <HAL_RCC_GetHCLKFreq>
 8006884:	4601      	mov	r1, r0
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006892:	5cd3      	ldrb	r3, [r2, r3]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	0800b8a4 	.word	0x0800b8a4

080068a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068ac:	f7ff ffda 	bl	8006864 <HAL_RCC_GetHCLKFreq>
 80068b0:	4601      	mov	r1, r0
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0adb      	lsrs	r3, r3, #11
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068be:	5cd3      	ldrb	r3, [r2, r3]
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000
 80068d0:	0800b8a4 	.word	0x0800b8a4

080068d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068e0:	4b2a      	ldr	r3, [pc, #168]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068ec:	f7ff fa04 	bl	8005cf8 <HAL_PWREx_GetVoltageRange>
 80068f0:	6178      	str	r0, [r7, #20]
 80068f2:	e014      	b.n	800691e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	4a24      	ldr	r2, [pc, #144]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006900:	4b22      	ldr	r3, [pc, #136]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800690c:	f7ff f9f4 	bl	8005cf8 <HAL_PWREx_GetVoltageRange>
 8006910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006912:	4b1e      	ldr	r3, [pc, #120]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	4a1d      	ldr	r2, [pc, #116]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d10b      	bne.n	800693e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b80      	cmp	r3, #128	; 0x80
 800692a:	d919      	bls.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2ba0      	cmp	r3, #160	; 0xa0
 8006930:	d902      	bls.n	8006938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006932:	2302      	movs	r3, #2
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e013      	b.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006938:	2301      	movs	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	e010      	b.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d902      	bls.n	800694a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006944:	2303      	movs	r3, #3
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	e00a      	b.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d102      	bne.n	8006956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006950:	2302      	movs	r3, #2
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	e004      	b.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b70      	cmp	r3, #112	; 0x70
 800695a:	d101      	bne.n	8006960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800695c:	2301      	movs	r3, #1
 800695e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f023 0207 	bic.w	r2, r3, #7
 8006968:	4909      	ldr	r1, [pc, #36]	; (8006990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	429a      	cmp	r2, r3
 800697c:	d001      	beq.n	8006982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40021000 	.word	0x40021000
 8006990:	40022000 	.word	0x40022000

08006994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800699c:	2300      	movs	r3, #0
 800699e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069a0:	2300      	movs	r3, #0
 80069a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d03f      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b8:	d01c      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80069ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069be:	d802      	bhi.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80069c4:	e01f      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80069c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80069cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069d0:	d01c      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80069d2:	e018      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069d4:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4a84      	ldr	r2, [pc, #528]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069e0:	e015      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3304      	adds	r3, #4
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fab9 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069f2:	e00c      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3320      	adds	r3, #32
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fba0 	bl	8007140 <RCCEx_PLLSAI2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	74fb      	strb	r3, [r7, #19]
      break;
 8006a0a:	e000      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a14:	4b75      	ldr	r3, [pc, #468]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a22:	4972      	ldr	r1, [pc, #456]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a2a:	e001      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d03f      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a44:	d01c      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a4a:	d802      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006a50:	e01f      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a5c:	d01c      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a5e:	e018      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a60:	4b62      	ldr	r3, [pc, #392]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a61      	ldr	r2, [pc, #388]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a6c:	e015      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3304      	adds	r3, #4
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa73 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a7e:	e00c      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3320      	adds	r3, #32
 8006a84:	2100      	movs	r1, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fb5a 	bl	8007140 <RCCEx_PLLSAI2_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	74fb      	strb	r3, [r7, #19]
      break;
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006aa0:	4b52      	ldr	r3, [pc, #328]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aae:	494f      	ldr	r1, [pc, #316]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ab6:	e001      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	7cfb      	ldrb	r3, [r7, #19]
 8006aba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80a0 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aca:	2300      	movs	r3, #0
 8006acc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ace:	4b47      	ldr	r3, [pc, #284]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00d      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ae4:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae8:	4a40      	ldr	r2, [pc, #256]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aee:	6593      	str	r3, [r2, #88]	; 0x58
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006afc:	2301      	movs	r3, #1
 8006afe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b00:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a3a      	ldr	r2, [pc, #232]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b0c:	f7fe f812 	bl	8004b34 <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b12:	e009      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b14:	f7fe f80e 	bl	8004b34 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d902      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	74fb      	strb	r3, [r7, #19]
        break;
 8006b26:	e005      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d15c      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b3a:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01f      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d019      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6a:	4a20      	ldr	r2, [pc, #128]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b74:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	4a1c      	ldr	r2, [pc, #112]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b96:	f7fd ffcd 	bl	8004b34 <HAL_GetTick>
 8006b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b9c:	e00b      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fd ffc9 	bl	8004b34 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d902      	bls.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8006bb4:	e006      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0ec      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006bc4:	7cfb      	ldrb	r3, [r7, #19]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bca:	4b08      	ldr	r3, [pc, #32]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bda:	4904      	ldr	r1, [pc, #16]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006be2:	e009      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006be4:	7cfb      	ldrb	r3, [r7, #19]
 8006be6:	74bb      	strb	r3, [r7, #18]
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bf8:	7c7b      	ldrb	r3, [r7, #17]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bfe:	4b9e      	ldr	r3, [pc, #632]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	4a9d      	ldr	r2, [pc, #628]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c16:	4b98      	ldr	r3, [pc, #608]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	f023 0203 	bic.w	r2, r3, #3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	4994      	ldr	r1, [pc, #592]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c38:	4b8f      	ldr	r3, [pc, #572]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	f023 020c 	bic.w	r2, r3, #12
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	498c      	ldr	r1, [pc, #560]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c5a:	4b87      	ldr	r3, [pc, #540]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	4983      	ldr	r1, [pc, #524]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c7c:	4b7e      	ldr	r3, [pc, #504]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	497b      	ldr	r1, [pc, #492]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c9e:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cac:	4972      	ldr	r1, [pc, #456]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cc0:	4b6d      	ldr	r3, [pc, #436]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cce:	496a      	ldr	r1, [pc, #424]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ce2:	4b65      	ldr	r3, [pc, #404]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf0:	4961      	ldr	r1, [pc, #388]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d04:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	4959      	ldr	r1, [pc, #356]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d26:	4b54      	ldr	r3, [pc, #336]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	4950      	ldr	r1, [pc, #320]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d48:	4b4b      	ldr	r3, [pc, #300]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	4948      	ldr	r1, [pc, #288]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d6a:	4b43      	ldr	r3, [pc, #268]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	493f      	ldr	r1, [pc, #252]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d028      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d8c:	4b3a      	ldr	r3, [pc, #232]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9a:	4937      	ldr	r1, [pc, #220]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006daa:	d106      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dac:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a31      	ldr	r2, [pc, #196]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db6:	60d3      	str	r3, [r2, #12]
 8006db8:	e011      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dc2:	d10c      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f8c8 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006dda:	7cfb      	ldrb	r3, [r7, #19]
 8006ddc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d028      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	491f      	ldr	r1, [pc, #124]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e08:	d106      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e14:	60d3      	str	r3, [r2, #12]
 8006e16:	e011      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2101      	movs	r1, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f899 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e32:	7cfb      	ldrb	r3, [r7, #19]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8006e38:	7cfb      	ldrb	r3, [r7, #19]
 8006e3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02b      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e56:	4908      	ldr	r1, [pc, #32]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e66:	d109      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e68:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a02      	ldr	r2, [pc, #8]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e72:	60d3      	str	r3, [r2, #12]
 8006e74:	e014      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006e76:	bf00      	nop
 8006e78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f867 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e96:	7cfb      	ldrb	r3, [r7, #19]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02f      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eac:	4b2b      	ldr	r3, [pc, #172]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eba:	4928      	ldr	r1, [pc, #160]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f844 	bl	8006f60 <RCCEx_PLLSAI1_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d014      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006ee2:	7cfb      	ldrb	r3, [r7, #19]
 8006ee4:	74bb      	strb	r3, [r7, #18]
 8006ee6:	e011      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3320      	adds	r3, #32
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f921 	bl	8007140 <RCCEx_PLLSAI2_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f02:	7cfb      	ldrb	r3, [r7, #19]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006f08:	7cfb      	ldrb	r3, [r7, #19]
 8006f0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f26:	490d      	ldr	r1, [pc, #52]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4a:	4904      	ldr	r1, [pc, #16]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f52:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000

08006f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f6e:	4b73      	ldr	r3, [pc, #460]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f7a:	4b70      	ldr	r3, [pc, #448]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0203 	and.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d10d      	bne.n	8006fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f92:	4b6a      	ldr	r3, [pc, #424]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d044      	beq.n	8007030 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
 8006faa:	e041      	b.n	8007030 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d00c      	beq.n	8006fce <RCCEx_PLLSAI1_Config+0x6e>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d013      	beq.n	8006fe0 <RCCEx_PLLSAI1_Config+0x80>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d120      	bne.n	8006ffe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fbc:	4b5f      	ldr	r3, [pc, #380]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11d      	bne.n	8007004 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fcc:	e01a      	b.n	8007004 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fce:	4b5b      	ldr	r3, [pc, #364]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d116      	bne.n	8007008 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fde:	e013      	b.n	8007008 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fe0:	4b56      	ldr	r3, [pc, #344]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10f      	bne.n	800700c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ffc:	e006      	b.n	800700c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
      break;
 8007002:	e004      	b.n	800700e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800700c:	bf00      	nop
    }

    if(status == HAL_OK)
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10d      	bne.n	8007030 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007014:	4b49      	ldr	r3, [pc, #292]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	430b      	orrs	r3, r1
 800702a:	4944      	ldr	r1, [pc, #272]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d17d      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a40      	ldr	r2, [pc, #256]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 800703c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007042:	f7fd fd77 	bl	8004b34 <HAL_GetTick>
 8007046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007048:	e009      	b.n	800705e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800704a:	f7fd fd73 	bl	8004b34 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d902      	bls.n	800705e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	73fb      	strb	r3, [r7, #15]
        break;
 800705c:	e005      	b.n	800706a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ef      	bne.n	800704a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d160      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d111      	bne.n	800709a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007076:	4b31      	ldr	r3, [pc, #196]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	0211      	lsls	r1, r2, #8
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68d2      	ldr	r2, [r2, #12]
 800708c:	0912      	lsrs	r2, r2, #4
 800708e:	0452      	lsls	r2, r2, #17
 8007090:	430a      	orrs	r2, r1
 8007092:	492a      	ldr	r1, [pc, #168]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007094:	4313      	orrs	r3, r2
 8007096:	610b      	str	r3, [r1, #16]
 8007098:	e027      	b.n	80070ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d112      	bne.n	80070c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070a0:	4b26      	ldr	r3, [pc, #152]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6892      	ldr	r2, [r2, #8]
 80070b0:	0211      	lsls	r1, r2, #8
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6912      	ldr	r2, [r2, #16]
 80070b6:	0852      	lsrs	r2, r2, #1
 80070b8:	3a01      	subs	r2, #1
 80070ba:	0552      	lsls	r2, r2, #21
 80070bc:	430a      	orrs	r2, r1
 80070be:	491f      	ldr	r1, [pc, #124]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	610b      	str	r3, [r1, #16]
 80070c4:	e011      	b.n	80070ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6892      	ldr	r2, [r2, #8]
 80070d6:	0211      	lsls	r1, r2, #8
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6952      	ldr	r2, [r2, #20]
 80070dc:	0852      	lsrs	r2, r2, #1
 80070de:	3a01      	subs	r2, #1
 80070e0:	0652      	lsls	r2, r2, #25
 80070e2:	430a      	orrs	r2, r1
 80070e4:	4915      	ldr	r1, [pc, #84]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 80070f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f6:	f7fd fd1d 	bl	8004b34 <HAL_GetTick>
 80070fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070fc:	e009      	b.n	8007112 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070fe:	f7fd fd19 	bl	8004b34 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d902      	bls.n	8007112 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	73fb      	strb	r3, [r7, #15]
          break;
 8007110:	e005      	b.n	800711e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0ef      	beq.n	80070fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	4903      	ldr	r1, [pc, #12]	; (800713c <RCCEx_PLLSAI1_Config+0x1dc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000

08007140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800714e:	4b68      	ldr	r3, [pc, #416]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800715a:	4b65      	ldr	r3, [pc, #404]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0203 	and.w	r2, r3, #3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d10d      	bne.n	8007186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
       ||
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007172:	4b5f      	ldr	r3, [pc, #380]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	091b      	lsrs	r3, r3, #4
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
       ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d044      	beq.n	8007210 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
 800718a:	e041      	b.n	8007210 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d00c      	beq.n	80071ae <RCCEx_PLLSAI2_Config+0x6e>
 8007194:	2b03      	cmp	r3, #3
 8007196:	d013      	beq.n	80071c0 <RCCEx_PLLSAI2_Config+0x80>
 8007198:	2b01      	cmp	r3, #1
 800719a:	d120      	bne.n	80071de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800719c:	4b54      	ldr	r3, [pc, #336]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d11d      	bne.n	80071e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ac:	e01a      	b.n	80071e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071ae:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d116      	bne.n	80071e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071be:	e013      	b.n	80071e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071c0:	4b4b      	ldr	r3, [pc, #300]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10f      	bne.n	80071ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071cc:	4b48      	ldr	r3, [pc, #288]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d109      	bne.n	80071ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071dc:	e006      	b.n	80071ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e004      	b.n	80071ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80071e4:	bf00      	nop
 80071e6:	e002      	b.n	80071ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80071ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10d      	bne.n	8007210 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071f4:	4b3e      	ldr	r3, [pc, #248]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	3b01      	subs	r3, #1
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	430b      	orrs	r3, r1
 800720a:	4939      	ldr	r1, [pc, #228]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800720c:	4313      	orrs	r3, r2
 800720e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d167      	bne.n	80072e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a35      	ldr	r2, [pc, #212]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007222:	f7fd fc87 	bl	8004b34 <HAL_GetTick>
 8007226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007228:	e009      	b.n	800723e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800722a:	f7fd fc83 	bl	8004b34 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d902      	bls.n	800723e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
        break;
 800723c:	e005      	b.n	800724a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800723e:	4b2c      	ldr	r3, [pc, #176]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1ef      	bne.n	800722a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d14a      	bne.n	80072e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d111      	bne.n	800727a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6892      	ldr	r2, [r2, #8]
 8007266:	0211      	lsls	r1, r2, #8
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68d2      	ldr	r2, [r2, #12]
 800726c:	0912      	lsrs	r2, r2, #4
 800726e:	0452      	lsls	r2, r2, #17
 8007270:	430a      	orrs	r2, r1
 8007272:	491f      	ldr	r1, [pc, #124]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007274:	4313      	orrs	r3, r2
 8007276:	614b      	str	r3, [r1, #20]
 8007278:	e011      	b.n	800729e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6892      	ldr	r2, [r2, #8]
 800728a:	0211      	lsls	r1, r2, #8
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6912      	ldr	r2, [r2, #16]
 8007290:	0852      	lsrs	r2, r2, #1
 8007292:	3a01      	subs	r2, #1
 8007294:	0652      	lsls	r2, r2, #25
 8007296:	430a      	orrs	r2, r1
 8007298:	4915      	ldr	r1, [pc, #84]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800729a:	4313      	orrs	r3, r2
 800729c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072aa:	f7fd fc43 	bl	8004b34 <HAL_GetTick>
 80072ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072b0:	e009      	b.n	80072c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072b2:	f7fd fc3f 	bl	8004b34 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d902      	bls.n	80072c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	73fb      	strb	r3, [r7, #15]
          break;
 80072c4:	e005      	b.n	80072d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0ef      	beq.n	80072b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40021000 	.word	0x40021000

080072f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e07c      	b.n	8007400 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f899 	bl	8007458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007346:	d902      	bls.n	800734e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e002      	b.n	8007354 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800734e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007352:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800735c:	d007      	beq.n	800736e <HAL_SPI_Init+0x7a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007366:	d002      	beq.n	800736e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10b      	bne.n	800738e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800737e:	d903      	bls.n	8007388 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
 8007386:	e002      	b.n	800738e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	ea42 0103 	orr.w	r1, r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	f003 0204 	and.w	r2, r3, #4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	ea42 0103 	orr.w	r1, r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e01a      	b.n	8007450 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007430:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f81a 	bl	800746c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749c:	d112      	bne.n	80074c4 <HAL_SPI_Receive+0x44>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10e      	bne.n	80074c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2204      	movs	r2, #4
 80074aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f908 	bl	80076d0 <HAL_SPI_TransmitReceive>
 80074c0:	4603      	mov	r3, r0
 80074c2:	e101      	b.n	80076c8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_SPI_Receive+0x52>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0fa      	b.n	80076c8 <HAL_SPI_Receive+0x248>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074da:	f7fd fb2b 	bl	8004b34 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d002      	beq.n	80074f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
 80074ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074f0:	e0e1      	b.n	80076b6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_SPI_Receive+0x7e>
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007502:	e0d8      	b.n	80076b6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2204      	movs	r2, #4
 8007508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	88fa      	ldrh	r2, [r7, #6]
 800751c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800754e:	d908      	bls.n	8007562 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	e007      	b.n	8007572 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007570:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800757a:	d107      	bne.n	800758c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800758a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d007      	beq.n	80075aa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075b2:	d867      	bhi.n	8007684 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075b4:	e030      	b.n	8007618 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d117      	bne.n	80075f4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f103 020c 	add.w	r2, r3, #12
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80075f2:	e011      	b.n	8007618 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f4:	f7fd fa9e 	bl	8004b34 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d803      	bhi.n	800760c <HAL_SPI_Receive+0x18c>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d102      	bne.n	8007612 <HAL_SPI_Receive+0x192>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007616:	e04e      	b.n	80076b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1c8      	bne.n	80075b6 <HAL_SPI_Receive+0x136>
 8007624:	e034      	b.n	8007690 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d115      	bne.n	8007660 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	b292      	uxth	r2, r2
 8007640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	1c9a      	adds	r2, r3, #2
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800765e:	e011      	b.n	8007684 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007660:	f7fd fa68 	bl	8004b34 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d803      	bhi.n	8007678 <HAL_SPI_Receive+0x1f8>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007676:	d102      	bne.n	800767e <HAL_SPI_Receive+0x1fe>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007682:	e018      	b.n	80076b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ca      	bne.n	8007626 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 ffab 	bl	80085f0 <SPI_EndRxTransaction>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e000      	b.n	80076b6 <HAL_SPI_Receive+0x236>
  }

error :
 80076b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076de:	2301      	movs	r3, #1
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_SPI_TransmitReceive+0x26>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e1fb      	b.n	8007aee <HAL_SPI_TransmitReceive+0x41e>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076fe:	f7fd fa19 	bl	8004b34 <HAL_GetTick>
 8007702:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800770a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007712:	887b      	ldrh	r3, [r7, #2]
 8007714:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007716:	887b      	ldrh	r3, [r7, #2]
 8007718:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800771a:	7efb      	ldrb	r3, [r7, #27]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d00e      	beq.n	800773e <HAL_SPI_TransmitReceive+0x6e>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007726:	d106      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x66>
 8007730:	7efb      	ldrb	r3, [r7, #27]
 8007732:	2b04      	cmp	r3, #4
 8007734:	d003      	beq.n	800773e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007736:	2302      	movs	r3, #2
 8007738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800773c:	e1cd      	b.n	8007ada <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_SPI_TransmitReceive+0x80>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_SPI_TransmitReceive+0x80>
 800774a:	887b      	ldrh	r3, [r7, #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007756:	e1c0      	b.n	8007ada <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b04      	cmp	r3, #4
 8007762:	d003      	beq.n	800776c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2205      	movs	r2, #5
 8007768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	887a      	ldrh	r2, [r7, #2]
 800777c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	887a      	ldrh	r2, [r7, #2]
 8007784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	887a      	ldrh	r2, [r7, #2]
 8007792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	887a      	ldrh	r2, [r7, #2]
 8007798:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077ae:	d802      	bhi.n	80077b6 <HAL_SPI_TransmitReceive+0xe6>
 80077b0:	8a3b      	ldrh	r3, [r7, #16]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d908      	bls.n	80077c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	e007      	b.n	80077d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d007      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077fe:	d97c      	bls.n	80078fa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <HAL_SPI_TransmitReceive+0x13e>
 8007808:	8a7b      	ldrh	r3, [r7, #18]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d169      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	881a      	ldrh	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007832:	e056      	b.n	80078e2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d11b      	bne.n	800787a <HAL_SPI_TransmitReceive+0x1aa>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <HAL_SPI_TransmitReceive+0x1aa>
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b01      	cmp	r3, #1
 8007850:	d113      	bne.n	800787a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	881a      	ldrh	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	1c9a      	adds	r2, r3, #2
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d11c      	bne.n	80078c2 <HAL_SPI_TransmitReceive+0x1f2>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	b292      	uxth	r2, r2
 80078a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	1c9a      	adds	r2, r3, #2
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078be:	2301      	movs	r3, #1
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078c2:	f7fd f937 	bl	8004b34 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d807      	bhi.n	80078e2 <HAL_SPI_TransmitReceive+0x212>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d003      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078e0:	e0fb      	b.n	8007ada <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1a3      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x164>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d19d      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x164>
 80078f8:	e0df      	b.n	8007aba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_SPI_TransmitReceive+0x23a>
 8007902:	8a7b      	ldrh	r3, [r7, #18]
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 80cb 	bne.w	8007aa0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	d912      	bls.n	800793a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	881a      	ldrh	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	1c9a      	adds	r2, r3, #2
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b02      	subs	r3, #2
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007938:	e0b2      	b.n	8007aa0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007960:	e09e      	b.n	8007aa0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b02      	cmp	r3, #2
 800796e:	d134      	bne.n	80079da <HAL_SPI_TransmitReceive+0x30a>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02f      	beq.n	80079da <HAL_SPI_TransmitReceive+0x30a>
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	2b01      	cmp	r3, #1
 800797e:	d12c      	bne.n	80079da <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d912      	bls.n	80079b0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b02      	subs	r3, #2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079ae:	e012      	b.n	80079d6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	330c      	adds	r3, #12
 80079ba:	7812      	ldrb	r2, [r2, #0]
 80079bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d148      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x3aa>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d042      	beq.n	8007a7a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d923      	bls.n	8007a48 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	b292      	uxth	r2, r2
 8007a0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b02      	subs	r3, #2
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d81f      	bhi.n	8007a76 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a44:	605a      	str	r2, [r3, #4]
 8007a46:	e016      	b.n	8007a76 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f103 020c 	add.w	r2, r3, #12
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a76:	2301      	movs	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a7a:	f7fd f85b 	bl	8004b34 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d803      	bhi.n	8007a92 <HAL_SPI_TransmitReceive+0x3c2>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d102      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x3c8>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007a9e:	e01c      	b.n	8007ada <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f47f af5b 	bne.w	8007962 <HAL_SPI_TransmitReceive+0x292>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f af54 	bne.w	8007962 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fdee 	bl	80086a0 <SPI_EndRxTxTransaction>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d006      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	661a      	str	r2, [r3, #96]	; 0x60
 8007ad6:	e000      	b.n	8007ada <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007ad8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3728      	adds	r7, #40	; 0x28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_SPI_Transmit_IT+0x20>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e06a      	b.n	8007bee <HAL_SPI_Transmit_IT+0xf6>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Transmit_IT+0x34>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b30:	e058      	b.n	8007be4 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d002      	beq.n	8007b44 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b42:	e04f      	b.n	8007be4 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2203      	movs	r2, #3
 8007b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	88fa      	ldrh	r2, [r7, #6]
 8007b62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b88:	d903      	bls.n	8007b92 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	; (8007bfc <HAL_SPI_Transmit_IT+0x104>)
 8007b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8007b90:	e002      	b.n	8007b98 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a1a      	ldr	r2, [pc, #104]	; (8007c00 <HAL_SPI_Transmit_IT+0x108>)
 8007b96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba0:	d107      	bne.n	8007bb2 <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007bc0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d008      	beq.n	8007be2 <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e000      	b.n	8007be4 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 8007be2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	080083ff 	.word	0x080083ff
 8007c00:	080083b9 	.word	0x080083b9

08007c04 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d110      	bne.n	8007c40 <HAL_SPI_Receive_IT+0x3c>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c26:	d10b      	bne.n	8007c40 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f88c 	bl	8007d54 <HAL_SPI_TransmitReceive_IT>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	e081      	b.n	8007d44 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_SPI_Receive_IT+0x4a>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e07a      	b.n	8007d44 <HAL_SPI_Receive_IT+0x140>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d002      	beq.n	8007c68 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
 8007c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c66:	e068      	b.n	8007d3a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_SPI_Receive_IT+0x70>
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c78:	e05f      	b.n	8007d3a <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	88fa      	ldrh	r2, [r7, #6]
 8007c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cbe:	d90b      	bls.n	8007cd8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cce:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <HAL_SPI_Receive_IT+0x148>)
 8007cd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8007cd6:	e00a      	b.n	8007cee <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ce6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <HAL_SPI_Receive_IT+0x14c>)
 8007cec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d107      	bne.n	8007d08 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d06:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007d16:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d008      	beq.n	8007d38 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e000      	b.n	8007d3a <HAL_SPI_Receive_IT+0x136>
  }

error :
 8007d38:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	0800836d 	.word	0x0800836d
 8007d50:	0800831d 	.word	0x0800831d

08007d54 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_SPI_TransmitReceive_IT+0x20>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e091      	b.n	8007e98 <HAL_SPI_TransmitReceive_IT+0x144>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d8a:	7dbb      	ldrb	r3, [r7, #22]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d00d      	beq.n	8007dac <HAL_SPI_TransmitReceive_IT+0x58>
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d96:	d106      	bne.n	8007da6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <HAL_SPI_TransmitReceive_IT+0x52>
 8007da0:	7dbb      	ldrb	r3, [r7, #22]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007da6:	2302      	movs	r3, #2
 8007da8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007daa:	e070      	b.n	8007e8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_SPI_TransmitReceive_IT+0x6a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_SPI_TransmitReceive_IT+0x6a>
 8007db8:	887b      	ldrh	r3, [r7, #2]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dc2:	e064      	b.n	8007e8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d003      	beq.n	8007dd8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	887a      	ldrh	r2, [r7, #2]
 8007dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	887a      	ldrh	r2, [r7, #2]
 8007dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	887a      	ldrh	r2, [r7, #2]
 8007e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e0e:	d906      	bls.n	8007e1e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4a24      	ldr	r2, [pc, #144]	; (8007ea4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007e14:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4a23      	ldr	r2, [pc, #140]	; (8007ea8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007e1a:	651a      	str	r2, [r3, #80]	; 0x50
 8007e1c:	e005      	b.n	8007e2a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a22      	ldr	r2, [pc, #136]	; (8007eac <HAL_SPI_TransmitReceive_IT+0x158>)
 8007e22:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4a22      	ldr	r2, [pc, #136]	; (8007eb0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e32:	d802      	bhi.n	8007e3a <HAL_SPI_TransmitReceive_IT+0xe6>
 8007e34:	887b      	ldrh	r3, [r7, #2]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d908      	bls.n	8007e4c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e48:	605a      	str	r2, [r3, #4]
 8007e4a:	e007      	b.n	8007e5c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e5a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007e6a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d008      	beq.n	8007e8c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e000      	b.n	8007e8e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007e8c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	08008257 	.word	0x08008257
 8007ea8:	080082bd 	.word	0x080082bd
 8007eac:	08008107 	.word	0x08008107
 8007eb0:	080081c5 	.word	0x080081c5

08007eb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	099b      	lsrs	r3, r3, #6
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10f      	bne.n	8007ef8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	099b      	lsrs	r3, r3, #6
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
    return;
 8007ef6:	e0d8      	b.n	80080aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x66>
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	09db      	lsrs	r3, r3, #7
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
    return;
 8007f18:	e0c7      	b.n	80080aa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	095b      	lsrs	r3, r3, #5
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10c      	bne.n	8007f40 <HAL_SPI_IRQHandler+0x8c>
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	099b      	lsrs	r3, r3, #6
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_SPI_IRQHandler+0x8c>
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80b5 	beq.w	80080aa <HAL_SPI_IRQHandler+0x1f6>
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	095b      	lsrs	r3, r3, #5
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80ae 	beq.w	80080aa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	099b      	lsrs	r3, r3, #6
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d023      	beq.n	8007fa2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d011      	beq.n	8007f8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6a:	f043 0204 	orr.w	r2, r3, #4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	e00b      	b.n	8007fa2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	693b      	ldr	r3, [r7, #16]
        return;
 8007fa0:	e083      	b.n	80080aa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d014      	beq.n	8007fd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb2:	f043 0201 	orr.w	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	f043 0208 	orr.w	r2, r3, #8
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008002:	2b00      	cmp	r3, #0
 8008004:	d050      	beq.n	80080a8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008014:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_SPI_IRQHandler+0x17e>
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d034      	beq.n	800809c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0203 	bic.w	r2, r2, #3
 8008040:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008046:	2b00      	cmp	r3, #0
 8008048:	d011      	beq.n	800806e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_SPI_IRQHandler+0x1fc>)
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	4618      	mov	r0, r3
 8008058:	f7fc feab 	bl	8004db2 <HAL_DMA_Abort_IT>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	2b00      	cmp	r3, #0
 8008074:	d016      	beq.n	80080a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <HAL_SPI_IRQHandler+0x1fc>)
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008082:	4618      	mov	r0, r3
 8008084:	f7fc fe95 	bl	8004db2 <HAL_DMA_Abort_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800809a:	e003      	b.n	80080a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f813 	bl	80080c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080a2:	e000      	b.n	80080a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80080a4:	bf00      	nop
    return;
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
  }
}
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	080080dd 	.word	0x080080dd

080080b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff ffe5 	bl	80080c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d923      	bls.n	8008162 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	b292      	uxth	r2, r2
 8008126:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b02      	subs	r3, #2
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	d11f      	bne.n	8008190 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800815e:	605a      	str	r2, [r3, #4]
 8008160:	e016      	b.n	8008190 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f103 020c 	add.w	r2, r3, #12
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10f      	bne.n	80081bc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80081aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fab8 	bl	800872c <SPI_CloseRxTx_ISR>
    }
  }
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d912      	bls.n	80081fc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081da:	881a      	ldrh	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	1c9a      	adds	r2, r3, #2
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b02      	subs	r3, #2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081fa:	e012      	b.n	8008222 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d110      	bne.n	800824e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800823a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa6f 	bl	800872c <SPI_CloseRxTx_ISR>
    }
  }
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	b292      	uxth	r2, r2
 800826a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	1c9a      	adds	r2, r3, #2
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10f      	bne.n	80082b4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa3c 	bl	800872c <SPI_CloseRxTx_ISR>
    }
  }
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	881a      	ldrh	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d110      	bne.n	8008314 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008300:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa0c 	bl	800872c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f103 020c 	add.w	r2, r3, #12
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa26 	bl	80087b0 <SPI_CloseRx_ISR>
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	b292      	uxth	r2, r2
 8008380:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	1c9a      	adds	r2, r3, #2
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa00 	bl	80087b0 <SPI_CloseRx_ISR>
  }
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa0d 	bl	8008810 <SPI_CloseTx_ISR>
  }
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	881a      	ldrh	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	1c9a      	adds	r2, r3, #2
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9eb 	bl	8008810 <SPI_CloseTx_ISR>
  }
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008452:	e04c      	b.n	80084ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d048      	beq.n	80084ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800845c:	f7fc fb6a 	bl	8004b34 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d902      	bls.n	8008472 <SPI_WaitFlagStateUntilTimeout+0x30>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d13d      	bne.n	80084ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800848a:	d111      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008494:	d004      	beq.n	80084a0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849e:	d107      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b8:	d10f      	bne.n	80084da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e00f      	b.n	800850e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	429a      	cmp	r2, r3
 800850a:	d1a3      	bne.n	8008454 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008524:	e057      	b.n	80085d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800852c:	d106      	bne.n	800853c <SPI_WaitFifoStateUntilTimeout+0x26>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d048      	beq.n	80085d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008544:	f7fc faf6 	bl	8004b34 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d902      	bls.n	800855a <SPI_WaitFifoStateUntilTimeout+0x44>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d13d      	bne.n	80085d6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008572:	d111      	bne.n	8008598 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800857c:	d004      	beq.n	8008588 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008586:	d107      	bne.n	8008598 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a0:	d10f      	bne.n	80085c2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e008      	b.n	80085e8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4013      	ands	r3, r2
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d19f      	bne.n	8008526 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008604:	d111      	bne.n	800862a <SPI_EndRxTransaction+0x3a>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800860e:	d004      	beq.n	800861a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008618:	d107      	bne.n	800862a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008628:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2200      	movs	r2, #0
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff ff04 	bl	8008442 <SPI_WaitFlagStateUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	f043 0220 	orr.w	r2, r3, #32
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e023      	b.n	8008698 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008658:	d11d      	bne.n	8008696 <SPI_EndRxTransaction+0xa6>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008662:	d004      	beq.n	800866e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866c:	d113      	bne.n	8008696 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff ff4b 	bl	8008516 <SPI_WaitFifoStateUntilTimeout>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800868a:	f043 0220 	orr.w	r2, r3, #32
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e000      	b.n	8008698 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff ff2c 	bl	8008516 <SPI_WaitFifoStateUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d007      	beq.n	80086d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c8:	f043 0220 	orr.w	r2, r3, #32
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e027      	b.n	8008724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	2180      	movs	r1, #128	; 0x80
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff feaf 	bl	8008442 <SPI_WaitFlagStateUntilTimeout>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ee:	f043 0220 	orr.w	r2, r3, #32
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e014      	b.n	8008724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2200      	movs	r2, #0
 8008702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff ff05 	bl	8008516 <SPI_WaitFifoStateUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008716:	f043 0220 	orr.w	r2, r3, #32
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e000      	b.n	8008724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008734:	f7fc f9fe 	bl	8004b34 <HAL_GetTick>
 8008738:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0220 	bic.w	r2, r2, #32
 8008748:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	2164      	movs	r1, #100	; 0x64
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffa6 	bl	80086a0 <SPI_EndRxTxTransaction>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	2b00      	cmp	r3, #0
 800876c:	d115      	bne.n	800879a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b04      	cmp	r3, #4
 8008778:	d107      	bne.n	800878a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fa fc4c 	bl	8003020 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008788:	e00e      	b.n	80087a8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff fc8e 	bl	80080b4 <HAL_SPI_TxRxCpltCallback>
}
 8008798:	e006      	b.n	80087a8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fc90 	bl	80080c8 <HAL_SPI_ErrorCallback>
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087c6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80087c8:	f7fc f9b4 	bl	8004b34 <HAL_GetTick>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	2164      	movs	r1, #100	; 0x64
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff ff0c 	bl	80085f0 <SPI_EndRxTransaction>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e2:	f043 0220 	orr.w	r2, r3, #32
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fa fc10 	bl	8003020 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008800:	e002      	b.n	8008808 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fc60 	bl	80080c8 <HAL_SPI_ErrorCallback>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008818:	f7fc f98c 	bl	8004b34 <HAL_GetTick>
 800881c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800882c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	2164      	movs	r1, #100	; 0x64
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff ff34 	bl	80086a0 <SPI_EndRxTxTransaction>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008842:	f043 0220 	orr.w	r2, r3, #32
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fc25 	bl	80080c8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800887e:	e002      	b.n	8008886 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7fa fbe1 	bl	8003048 <HAL_SPI_TxCpltCallback>
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e049      	b.n	8008934 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fb fd99 	bl	80043ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f000 f9e5 	bl	8008c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	d001      	beq.n	8008954 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e047      	b.n	80089e4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a23      	ldr	r2, [pc, #140]	; (80089f0 <HAL_TIM_Base_Start+0xb4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896e:	d018      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <HAL_TIM_Base_Start+0xb8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1e      	ldr	r2, [pc, #120]	; (80089f8 <HAL_TIM_Base_Start+0xbc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a1c      	ldr	r2, [pc, #112]	; (80089fc <HAL_TIM_Base_Start+0xc0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a1b      	ldr	r2, [pc, #108]	; (8008a00 <HAL_TIM_Base_Start+0xc4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIM_Base_Start+0x66>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a19      	ldr	r2, [pc, #100]	; (8008a04 <HAL_TIM_Base_Start+0xc8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d115      	bne.n	80089ce <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	4b17      	ldr	r3, [pc, #92]	; (8008a08 <HAL_TIM_Base_Start+0xcc>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d015      	beq.n	80089e0 <HAL_TIM_Base_Start+0xa4>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ba:	d011      	beq.n	80089e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089cc:	e008      	b.n	80089e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	e000      	b.n	80089e2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	40012c00 	.word	0x40012c00
 80089f4:	40000400 	.word	0x40000400
 80089f8:	40000800 	.word	0x40000800
 80089fc:	40000c00 	.word	0x40000c00
 8008a00:	40013400 	.word	0x40013400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	00010007 	.word	0x00010007

08008a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d122      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d11b      	bne.n	8008a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0202 	mvn.w	r2, #2
 8008a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f905 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008a54:	e005      	b.n	8008a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8f7 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f908 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d122      	bne.n	8008abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d11b      	bne.n	8008abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0204 	mvn.w	r2, #4
 8008a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f8db 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008aa8:	e005      	b.n	8008ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f8cd 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8de 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d122      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d11b      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f06f 0208 	mvn.w	r2, #8
 8008ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8b1 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008afc:	e005      	b.n	8008b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f8a3 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f8b4 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0310 	and.w	r3, r3, #16
 8008b1a:	2b10      	cmp	r3, #16
 8008b1c:	d122      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b10      	cmp	r3, #16
 8008b2a:	d11b      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0210 	mvn.w	r2, #16
 8008b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2208      	movs	r2, #8
 8008b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f887 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008b50:	e005      	b.n	8008b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f879 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f88a 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d10e      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d107      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f06f 0201 	mvn.w	r2, #1
 8008b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fb fb72 	bl	8004274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d10e      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba8:	2b80      	cmp	r3, #128	; 0x80
 8008baa:	d107      	bne.n	8008bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f914 	bl	8008de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bca:	d10e      	bne.n	8008bea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d107      	bne.n	8008bea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f907 	bl	8008df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	d10e      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	d107      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f838 	bl	8008c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d10e      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f06f 0220 	mvn.w	r2, #32
 8008c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f8c7 	bl	8008dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a40      	ldr	r2, [pc, #256]	; (8008db0 <TIM_Base_SetConfig+0x114>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cba:	d00f      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a3d      	ldr	r2, [pc, #244]	; (8008db4 <TIM_Base_SetConfig+0x118>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a3c      	ldr	r2, [pc, #240]	; (8008db8 <TIM_Base_SetConfig+0x11c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d007      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a3b      	ldr	r2, [pc, #236]	; (8008dbc <TIM_Base_SetConfig+0x120>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d003      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a3a      	ldr	r2, [pc, #232]	; (8008dc0 <TIM_Base_SetConfig+0x124>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d108      	bne.n	8008cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2f      	ldr	r2, [pc, #188]	; (8008db0 <TIM_Base_SetConfig+0x114>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d01f      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d01b      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2c      	ldr	r2, [pc, #176]	; (8008db4 <TIM_Base_SetConfig+0x118>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d017      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2b      	ldr	r2, [pc, #172]	; (8008db8 <TIM_Base_SetConfig+0x11c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d013      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a2a      	ldr	r2, [pc, #168]	; (8008dbc <TIM_Base_SetConfig+0x120>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00f      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a29      	ldr	r2, [pc, #164]	; (8008dc0 <TIM_Base_SetConfig+0x124>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00b      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a28      	ldr	r2, [pc, #160]	; (8008dc4 <TIM_Base_SetConfig+0x128>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a27      	ldr	r2, [pc, #156]	; (8008dc8 <TIM_Base_SetConfig+0x12c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_Base_SetConfig+0x9a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a26      	ldr	r2, [pc, #152]	; (8008dcc <TIM_Base_SetConfig+0x130>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d108      	bne.n	8008d48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <TIM_Base_SetConfig+0x114>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00f      	beq.n	8008d94 <TIM_Base_SetConfig+0xf8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a12      	ldr	r2, [pc, #72]	; (8008dc0 <TIM_Base_SetConfig+0x124>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00b      	beq.n	8008d94 <TIM_Base_SetConfig+0xf8>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a11      	ldr	r2, [pc, #68]	; (8008dc4 <TIM_Base_SetConfig+0x128>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d007      	beq.n	8008d94 <TIM_Base_SetConfig+0xf8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a10      	ldr	r2, [pc, #64]	; (8008dc8 <TIM_Base_SetConfig+0x12c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_Base_SetConfig+0xf8>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a0f      	ldr	r2, [pc, #60]	; (8008dcc <TIM_Base_SetConfig+0x130>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d103      	bne.n	8008d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	615a      	str	r2, [r3, #20]
}
 8008da2:	bf00      	nop
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	40000c00 	.word	0x40000c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40014400 	.word	0x40014400
 8008dcc:	40014800 	.word	0x40014800

08008dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e040      	b.n	8008ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fb fb02 	bl	8004438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2224      	movs	r2, #36	; 0x24
 8008e38:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8c0 	bl	8008fd0 <UART_SetConfig>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e022      	b.n	8008ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fb3e 	bl	80094e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fbc5 	bl	8009628 <UART_CheckIdleState>
 8008e9e:	4603      	mov	r3, r0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	f040 8081 	bne.w	8008fc4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_UART_Transmit+0x26>
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e079      	b.n	8008fc6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_UART_Transmit+0x38>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e072      	b.n	8008fc6 <HAL_UART_Transmit+0x11e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2221      	movs	r2, #33	; 0x21
 8008ef2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008ef4:	f7fb fe1e 	bl	8004b34 <HAL_GetTick>
 8008ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	88fa      	ldrh	r2, [r7, #6]
 8008f06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	d108      	bne.n	8008f26 <HAL_UART_Transmit+0x7e>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	e003      	b.n	8008f2e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008f36:	e02d      	b.n	8008f94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fbb5 	bl	80096b2 <UART_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e039      	b.n	8008fc6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	881a      	ldrh	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f64:	b292      	uxth	r2, r2
 8008f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	e008      	b.n	8008f82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1cb      	bne.n	8008f38 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2140      	movs	r1, #64	; 0x40
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fb81 	bl	80096b2 <UART_WaitOnFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e005      	b.n	8008fc6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e000      	b.n	8008fc6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008fc4:	2302      	movs	r3, #2
  }
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3720      	adds	r7, #32
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008fd4:	b088      	sub	sp, #32
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	4bac      	ldr	r3, [pc, #688]	; (80092b0 <UART_SetConfig+0x2e0>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6812      	ldr	r2, [r2, #0]
 8009004:	69f9      	ldr	r1, [r7, #28]
 8009006:	430b      	orrs	r3, r1
 8009008:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4aa2      	ldr	r2, [pc, #648]	; (80092b4 <UART_SetConfig+0x2e4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d004      	beq.n	800903a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	4313      	orrs	r3, r2
 8009038:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a99      	ldr	r2, [pc, #612]	; (80092b8 <UART_SetConfig+0x2e8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d121      	bne.n	800909c <UART_SetConfig+0xcc>
 8009058:	4b98      	ldr	r3, [pc, #608]	; (80092bc <UART_SetConfig+0x2ec>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d816      	bhi.n	8009094 <UART_SetConfig+0xc4>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x9c>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	0800907d 	.word	0x0800907d
 8009070:	08009089 	.word	0x08009089
 8009074:	08009083 	.word	0x08009083
 8009078:	0800908f 	.word	0x0800908f
 800907c:	2301      	movs	r3, #1
 800907e:	76fb      	strb	r3, [r7, #27]
 8009080:	e0e8      	b.n	8009254 <UART_SetConfig+0x284>
 8009082:	2302      	movs	r3, #2
 8009084:	76fb      	strb	r3, [r7, #27]
 8009086:	e0e5      	b.n	8009254 <UART_SetConfig+0x284>
 8009088:	2304      	movs	r3, #4
 800908a:	76fb      	strb	r3, [r7, #27]
 800908c:	e0e2      	b.n	8009254 <UART_SetConfig+0x284>
 800908e:	2308      	movs	r3, #8
 8009090:	76fb      	strb	r3, [r7, #27]
 8009092:	e0df      	b.n	8009254 <UART_SetConfig+0x284>
 8009094:	2310      	movs	r3, #16
 8009096:	76fb      	strb	r3, [r7, #27]
 8009098:	bf00      	nop
 800909a:	e0db      	b.n	8009254 <UART_SetConfig+0x284>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a87      	ldr	r2, [pc, #540]	; (80092c0 <UART_SetConfig+0x2f0>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d134      	bne.n	8009110 <UART_SetConfig+0x140>
 80090a6:	4b85      	ldr	r3, [pc, #532]	; (80092bc <UART_SetConfig+0x2ec>)
 80090a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ac:	f003 030c 	and.w	r3, r3, #12
 80090b0:	2b0c      	cmp	r3, #12
 80090b2:	d829      	bhi.n	8009108 <UART_SetConfig+0x138>
 80090b4:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <UART_SetConfig+0xec>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090f1 	.word	0x080090f1
 80090c0:	08009109 	.word	0x08009109
 80090c4:	08009109 	.word	0x08009109
 80090c8:	08009109 	.word	0x08009109
 80090cc:	080090fd 	.word	0x080090fd
 80090d0:	08009109 	.word	0x08009109
 80090d4:	08009109 	.word	0x08009109
 80090d8:	08009109 	.word	0x08009109
 80090dc:	080090f7 	.word	0x080090f7
 80090e0:	08009109 	.word	0x08009109
 80090e4:	08009109 	.word	0x08009109
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009103 	.word	0x08009103
 80090f0:	2300      	movs	r3, #0
 80090f2:	76fb      	strb	r3, [r7, #27]
 80090f4:	e0ae      	b.n	8009254 <UART_SetConfig+0x284>
 80090f6:	2302      	movs	r3, #2
 80090f8:	76fb      	strb	r3, [r7, #27]
 80090fa:	e0ab      	b.n	8009254 <UART_SetConfig+0x284>
 80090fc:	2304      	movs	r3, #4
 80090fe:	76fb      	strb	r3, [r7, #27]
 8009100:	e0a8      	b.n	8009254 <UART_SetConfig+0x284>
 8009102:	2308      	movs	r3, #8
 8009104:	76fb      	strb	r3, [r7, #27]
 8009106:	e0a5      	b.n	8009254 <UART_SetConfig+0x284>
 8009108:	2310      	movs	r3, #16
 800910a:	76fb      	strb	r3, [r7, #27]
 800910c:	bf00      	nop
 800910e:	e0a1      	b.n	8009254 <UART_SetConfig+0x284>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a6b      	ldr	r2, [pc, #428]	; (80092c4 <UART_SetConfig+0x2f4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d120      	bne.n	800915c <UART_SetConfig+0x18c>
 800911a:	4b68      	ldr	r3, [pc, #416]	; (80092bc <UART_SetConfig+0x2ec>)
 800911c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009120:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009124:	2b10      	cmp	r3, #16
 8009126:	d00f      	beq.n	8009148 <UART_SetConfig+0x178>
 8009128:	2b10      	cmp	r3, #16
 800912a:	d802      	bhi.n	8009132 <UART_SetConfig+0x162>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <UART_SetConfig+0x16c>
 8009130:	e010      	b.n	8009154 <UART_SetConfig+0x184>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d005      	beq.n	8009142 <UART_SetConfig+0x172>
 8009136:	2b30      	cmp	r3, #48	; 0x30
 8009138:	d009      	beq.n	800914e <UART_SetConfig+0x17e>
 800913a:	e00b      	b.n	8009154 <UART_SetConfig+0x184>
 800913c:	2300      	movs	r3, #0
 800913e:	76fb      	strb	r3, [r7, #27]
 8009140:	e088      	b.n	8009254 <UART_SetConfig+0x284>
 8009142:	2302      	movs	r3, #2
 8009144:	76fb      	strb	r3, [r7, #27]
 8009146:	e085      	b.n	8009254 <UART_SetConfig+0x284>
 8009148:	2304      	movs	r3, #4
 800914a:	76fb      	strb	r3, [r7, #27]
 800914c:	e082      	b.n	8009254 <UART_SetConfig+0x284>
 800914e:	2308      	movs	r3, #8
 8009150:	76fb      	strb	r3, [r7, #27]
 8009152:	e07f      	b.n	8009254 <UART_SetConfig+0x284>
 8009154:	2310      	movs	r3, #16
 8009156:	76fb      	strb	r3, [r7, #27]
 8009158:	bf00      	nop
 800915a:	e07b      	b.n	8009254 <UART_SetConfig+0x284>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a59      	ldr	r2, [pc, #356]	; (80092c8 <UART_SetConfig+0x2f8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d120      	bne.n	80091a8 <UART_SetConfig+0x1d8>
 8009166:	4b55      	ldr	r3, [pc, #340]	; (80092bc <UART_SetConfig+0x2ec>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009170:	2b40      	cmp	r3, #64	; 0x40
 8009172:	d00f      	beq.n	8009194 <UART_SetConfig+0x1c4>
 8009174:	2b40      	cmp	r3, #64	; 0x40
 8009176:	d802      	bhi.n	800917e <UART_SetConfig+0x1ae>
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <UART_SetConfig+0x1b8>
 800917c:	e010      	b.n	80091a0 <UART_SetConfig+0x1d0>
 800917e:	2b80      	cmp	r3, #128	; 0x80
 8009180:	d005      	beq.n	800918e <UART_SetConfig+0x1be>
 8009182:	2bc0      	cmp	r3, #192	; 0xc0
 8009184:	d009      	beq.n	800919a <UART_SetConfig+0x1ca>
 8009186:	e00b      	b.n	80091a0 <UART_SetConfig+0x1d0>
 8009188:	2300      	movs	r3, #0
 800918a:	76fb      	strb	r3, [r7, #27]
 800918c:	e062      	b.n	8009254 <UART_SetConfig+0x284>
 800918e:	2302      	movs	r3, #2
 8009190:	76fb      	strb	r3, [r7, #27]
 8009192:	e05f      	b.n	8009254 <UART_SetConfig+0x284>
 8009194:	2304      	movs	r3, #4
 8009196:	76fb      	strb	r3, [r7, #27]
 8009198:	e05c      	b.n	8009254 <UART_SetConfig+0x284>
 800919a:	2308      	movs	r3, #8
 800919c:	76fb      	strb	r3, [r7, #27]
 800919e:	e059      	b.n	8009254 <UART_SetConfig+0x284>
 80091a0:	2310      	movs	r3, #16
 80091a2:	76fb      	strb	r3, [r7, #27]
 80091a4:	bf00      	nop
 80091a6:	e055      	b.n	8009254 <UART_SetConfig+0x284>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a47      	ldr	r2, [pc, #284]	; (80092cc <UART_SetConfig+0x2fc>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d124      	bne.n	80091fc <UART_SetConfig+0x22c>
 80091b2:	4b42      	ldr	r3, [pc, #264]	; (80092bc <UART_SetConfig+0x2ec>)
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c0:	d012      	beq.n	80091e8 <UART_SetConfig+0x218>
 80091c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c6:	d802      	bhi.n	80091ce <UART_SetConfig+0x1fe>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <UART_SetConfig+0x20c>
 80091cc:	e012      	b.n	80091f4 <UART_SetConfig+0x224>
 80091ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d2:	d006      	beq.n	80091e2 <UART_SetConfig+0x212>
 80091d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091d8:	d009      	beq.n	80091ee <UART_SetConfig+0x21e>
 80091da:	e00b      	b.n	80091f4 <UART_SetConfig+0x224>
 80091dc:	2300      	movs	r3, #0
 80091de:	76fb      	strb	r3, [r7, #27]
 80091e0:	e038      	b.n	8009254 <UART_SetConfig+0x284>
 80091e2:	2302      	movs	r3, #2
 80091e4:	76fb      	strb	r3, [r7, #27]
 80091e6:	e035      	b.n	8009254 <UART_SetConfig+0x284>
 80091e8:	2304      	movs	r3, #4
 80091ea:	76fb      	strb	r3, [r7, #27]
 80091ec:	e032      	b.n	8009254 <UART_SetConfig+0x284>
 80091ee:	2308      	movs	r3, #8
 80091f0:	76fb      	strb	r3, [r7, #27]
 80091f2:	e02f      	b.n	8009254 <UART_SetConfig+0x284>
 80091f4:	2310      	movs	r3, #16
 80091f6:	76fb      	strb	r3, [r7, #27]
 80091f8:	bf00      	nop
 80091fa:	e02b      	b.n	8009254 <UART_SetConfig+0x284>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <UART_SetConfig+0x2e4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d124      	bne.n	8009250 <UART_SetConfig+0x280>
 8009206:	4b2d      	ldr	r3, [pc, #180]	; (80092bc <UART_SetConfig+0x2ec>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009214:	d012      	beq.n	800923c <UART_SetConfig+0x26c>
 8009216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800921a:	d802      	bhi.n	8009222 <UART_SetConfig+0x252>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <UART_SetConfig+0x260>
 8009220:	e012      	b.n	8009248 <UART_SetConfig+0x278>
 8009222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009226:	d006      	beq.n	8009236 <UART_SetConfig+0x266>
 8009228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800922c:	d009      	beq.n	8009242 <UART_SetConfig+0x272>
 800922e:	e00b      	b.n	8009248 <UART_SetConfig+0x278>
 8009230:	2300      	movs	r3, #0
 8009232:	76fb      	strb	r3, [r7, #27]
 8009234:	e00e      	b.n	8009254 <UART_SetConfig+0x284>
 8009236:	2302      	movs	r3, #2
 8009238:	76fb      	strb	r3, [r7, #27]
 800923a:	e00b      	b.n	8009254 <UART_SetConfig+0x284>
 800923c:	2304      	movs	r3, #4
 800923e:	76fb      	strb	r3, [r7, #27]
 8009240:	e008      	b.n	8009254 <UART_SetConfig+0x284>
 8009242:	2308      	movs	r3, #8
 8009244:	76fb      	strb	r3, [r7, #27]
 8009246:	e005      	b.n	8009254 <UART_SetConfig+0x284>
 8009248:	2310      	movs	r3, #16
 800924a:	76fb      	strb	r3, [r7, #27]
 800924c:	bf00      	nop
 800924e:	e001      	b.n	8009254 <UART_SetConfig+0x284>
 8009250:	2310      	movs	r3, #16
 8009252:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a16      	ldr	r2, [pc, #88]	; (80092b4 <UART_SetConfig+0x2e4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	f040 8087 	bne.w	800936e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009260:	7efb      	ldrb	r3, [r7, #27]
 8009262:	2b08      	cmp	r3, #8
 8009264:	d836      	bhi.n	80092d4 <UART_SetConfig+0x304>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <UART_SetConfig+0x29c>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	08009291 	.word	0x08009291
 8009270:	080092d5 	.word	0x080092d5
 8009274:	08009299 	.word	0x08009299
 8009278:	080092d5 	.word	0x080092d5
 800927c:	0800929f 	.word	0x0800929f
 8009280:	080092d5 	.word	0x080092d5
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092d5 	.word	0x080092d5
 800928c:	080092a7 	.word	0x080092a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009290:	f7fd faf4 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 8009294:	6178      	str	r0, [r7, #20]
        break;
 8009296:	e022      	b.n	80092de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <UART_SetConfig+0x300>)
 800929a:	617b      	str	r3, [r7, #20]
        break;
 800929c:	e01f      	b.n	80092de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800929e:	f7fd fa57 	bl	8006750 <HAL_RCC_GetSysClockFreq>
 80092a2:	6178      	str	r0, [r7, #20]
        break;
 80092a4:	e01b      	b.n	80092de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092aa:	617b      	str	r3, [r7, #20]
        break;
 80092ac:	e017      	b.n	80092de <UART_SetConfig+0x30e>
 80092ae:	bf00      	nop
 80092b0:	efff69f3 	.word	0xefff69f3
 80092b4:	40008000 	.word	0x40008000
 80092b8:	40013800 	.word	0x40013800
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40004400 	.word	0x40004400
 80092c4:	40004800 	.word	0x40004800
 80092c8:	40004c00 	.word	0x40004c00
 80092cc:	40005000 	.word	0x40005000
 80092d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	76bb      	strb	r3, [r7, #26]
        break;
 80092dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80f1 	beq.w	80094c8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	4413      	add	r3, r2
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d305      	bcc.n	8009302 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d902      	bls.n	8009308 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	76bb      	strb	r3, [r7, #26]
 8009306:	e0df      	b.n	80094c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	4619      	mov	r1, r3
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	f04f 0400 	mov.w	r4, #0
 8009318:	0214      	lsls	r4, r2, #8
 800931a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800931e:	020b      	lsls	r3, r1, #8
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6852      	ldr	r2, [r2, #4]
 8009324:	0852      	lsrs	r2, r2, #1
 8009326:	4611      	mov	r1, r2
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	eb13 0b01 	adds.w	fp, r3, r1
 8009330:	eb44 0c02 	adc.w	ip, r4, r2
 8009334:	4658      	mov	r0, fp
 8009336:	4661      	mov	r1, ip
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f04f 0400 	mov.w	r4, #0
 8009340:	461a      	mov	r2, r3
 8009342:	4623      	mov	r3, r4
 8009344:	f7f7 fbba 	bl	8000abc <__aeabi_uldivmod>
 8009348:	4603      	mov	r3, r0
 800934a:	460c      	mov	r4, r1
 800934c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009354:	d308      	bcc.n	8009368 <UART_SetConfig+0x398>
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935c:	d204      	bcs.n	8009368 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	e0af      	b.n	80094c8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	76bb      	strb	r3, [r7, #26]
 800936c:	e0ac      	b.n	80094c8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	d15b      	bne.n	8009430 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8009378:	7efb      	ldrb	r3, [r7, #27]
 800937a:	2b08      	cmp	r3, #8
 800937c:	d827      	bhi.n	80093ce <UART_SetConfig+0x3fe>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <UART_SetConfig+0x3b4>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	080093cf 	.word	0x080093cf
 8009394:	080093bf 	.word	0x080093bf
 8009398:	080093cf 	.word	0x080093cf
 800939c:	080093cf 	.word	0x080093cf
 80093a0:	080093cf 	.word	0x080093cf
 80093a4:	080093c7 	.word	0x080093c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a8:	f7fd fa68 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 80093ac:	6178      	str	r0, [r7, #20]
        break;
 80093ae:	e013      	b.n	80093d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b0:	f7fd fa7a 	bl	80068a8 <HAL_RCC_GetPCLK2Freq>
 80093b4:	6178      	str	r0, [r7, #20]
        break;
 80093b6:	e00f      	b.n	80093d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093b8:	4b49      	ldr	r3, [pc, #292]	; (80094e0 <UART_SetConfig+0x510>)
 80093ba:	617b      	str	r3, [r7, #20]
        break;
 80093bc:	e00c      	b.n	80093d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093be:	f7fd f9c7 	bl	8006750 <HAL_RCC_GetSysClockFreq>
 80093c2:	6178      	str	r0, [r7, #20]
        break;
 80093c4:	e008      	b.n	80093d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ca:	617b      	str	r3, [r7, #20]
        break;
 80093cc:	e004      	b.n	80093d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	76bb      	strb	r3, [r7, #26]
        break;
 80093d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d074      	beq.n	80094c8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	005a      	lsls	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	085b      	lsrs	r3, r3, #1
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b0f      	cmp	r3, #15
 80093fa:	d916      	bls.n	800942a <UART_SetConfig+0x45a>
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009402:	d212      	bcs.n	800942a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f023 030f 	bic.w	r3, r3, #15
 800940c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	b29b      	uxth	r3, r3
 8009414:	f003 0307 	and.w	r3, r3, #7
 8009418:	b29a      	uxth	r2, r3
 800941a:	89fb      	ldrh	r3, [r7, #14]
 800941c:	4313      	orrs	r3, r2
 800941e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	89fa      	ldrh	r2, [r7, #14]
 8009426:	60da      	str	r2, [r3, #12]
 8009428:	e04e      	b.n	80094c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	76bb      	strb	r3, [r7, #26]
 800942e:	e04b      	b.n	80094c8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009430:	7efb      	ldrb	r3, [r7, #27]
 8009432:	2b08      	cmp	r3, #8
 8009434:	d827      	bhi.n	8009486 <UART_SetConfig+0x4b6>
 8009436:	a201      	add	r2, pc, #4	; (adr r2, 800943c <UART_SetConfig+0x46c>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009461 	.word	0x08009461
 8009440:	08009469 	.word	0x08009469
 8009444:	08009471 	.word	0x08009471
 8009448:	08009487 	.word	0x08009487
 800944c:	08009477 	.word	0x08009477
 8009450:	08009487 	.word	0x08009487
 8009454:	08009487 	.word	0x08009487
 8009458:	08009487 	.word	0x08009487
 800945c:	0800947f 	.word	0x0800947f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009460:	f7fd fa0c 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 8009464:	6178      	str	r0, [r7, #20]
        break;
 8009466:	e013      	b.n	8009490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009468:	f7fd fa1e 	bl	80068a8 <HAL_RCC_GetPCLK2Freq>
 800946c:	6178      	str	r0, [r7, #20]
        break;
 800946e:	e00f      	b.n	8009490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009470:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <UART_SetConfig+0x510>)
 8009472:	617b      	str	r3, [r7, #20]
        break;
 8009474:	e00c      	b.n	8009490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009476:	f7fd f96b 	bl	8006750 <HAL_RCC_GetSysClockFreq>
 800947a:	6178      	str	r0, [r7, #20]
        break;
 800947c:	e008      	b.n	8009490 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009482:	617b      	str	r3, [r7, #20]
        break;
 8009484:	e004      	b.n	8009490 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	76bb      	strb	r3, [r7, #26]
        break;
 800948e:	bf00      	nop
    }

    if (pclk != 0U)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d018      	beq.n	80094c8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	085a      	lsrs	r2, r3, #1
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	441a      	add	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2b0f      	cmp	r3, #15
 80094b0:	d908      	bls.n	80094c4 <UART_SetConfig+0x4f4>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094b8:	d204      	bcs.n	80094c4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	e001      	b.n	80094c8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80094d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80094e0:	00f42400 	.word	0x00f42400

080094e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01a      	beq.n	80095fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e2:	d10a      	bne.n	80095fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	605a      	str	r2, [r3, #4]
  }
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af02      	add	r7, sp, #8
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009636:	f7fb fa7d 	bl	8004b34 <HAL_GetTick>
 800963a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0308 	and.w	r3, r3, #8
 8009646:	2b08      	cmp	r3, #8
 8009648:	d10e      	bne.n	8009668 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f82a 	bl	80096b2 <UART_WaitOnFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e020      	b.n	80096aa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b04      	cmp	r3, #4
 8009674:	d10e      	bne.n	8009694 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f814 	bl	80096b2 <UART_WaitOnFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e00a      	b.n	80096aa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	603b      	str	r3, [r7, #0]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096c2:	e05d      	b.n	8009780 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d059      	beq.n	8009780 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096cc:	f7fb fa32 	bl	8004b34 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d302      	bcc.n	80096e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d11b      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2220      	movs	r2, #32
 8009706:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2220      	movs	r2, #32
 800970c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e042      	b.n	80097a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02b      	beq.n	8009780 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009736:	d123      	bne.n	8009780 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009750:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2220      	movs	r2, #32
 8009772:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e00f      	b.n	80097a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69da      	ldr	r2, [r3, #28]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4013      	ands	r3, r2
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	bf0c      	ite	eq
 8009790:	2301      	moveq	r3, #1
 8009792:	2300      	movne	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	461a      	mov	r2, r3
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	429a      	cmp	r2, r3
 800979c:	d092      	beq.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <__errno>:
 80097a8:	4b01      	ldr	r3, [pc, #4]	; (80097b0 <__errno+0x8>)
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	20000010 	.word	0x20000010

080097b4 <__libc_init_array>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	4e0d      	ldr	r6, [pc, #52]	; (80097ec <__libc_init_array+0x38>)
 80097b8:	4c0d      	ldr	r4, [pc, #52]	; (80097f0 <__libc_init_array+0x3c>)
 80097ba:	1ba4      	subs	r4, r4, r6
 80097bc:	10a4      	asrs	r4, r4, #2
 80097be:	2500      	movs	r5, #0
 80097c0:	42a5      	cmp	r5, r4
 80097c2:	d109      	bne.n	80097d8 <__libc_init_array+0x24>
 80097c4:	4e0b      	ldr	r6, [pc, #44]	; (80097f4 <__libc_init_array+0x40>)
 80097c6:	4c0c      	ldr	r4, [pc, #48]	; (80097f8 <__libc_init_array+0x44>)
 80097c8:	f001 f9e8 	bl	800ab9c <_init>
 80097cc:	1ba4      	subs	r4, r4, r6
 80097ce:	10a4      	asrs	r4, r4, #2
 80097d0:	2500      	movs	r5, #0
 80097d2:	42a5      	cmp	r5, r4
 80097d4:	d105      	bne.n	80097e2 <__libc_init_array+0x2e>
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097dc:	4798      	blx	r3
 80097de:	3501      	adds	r5, #1
 80097e0:	e7ee      	b.n	80097c0 <__libc_init_array+0xc>
 80097e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097e6:	4798      	blx	r3
 80097e8:	3501      	adds	r5, #1
 80097ea:	e7f2      	b.n	80097d2 <__libc_init_array+0x1e>
 80097ec:	0800b97c 	.word	0x0800b97c
 80097f0:	0800b97c 	.word	0x0800b97c
 80097f4:	0800b97c 	.word	0x0800b97c
 80097f8:	0800b984 	.word	0x0800b984

080097fc <memcmp>:
 80097fc:	b530      	push	{r4, r5, lr}
 80097fe:	2400      	movs	r4, #0
 8009800:	42a2      	cmp	r2, r4
 8009802:	d101      	bne.n	8009808 <memcmp+0xc>
 8009804:	2000      	movs	r0, #0
 8009806:	e007      	b.n	8009818 <memcmp+0x1c>
 8009808:	5d03      	ldrb	r3, [r0, r4]
 800980a:	3401      	adds	r4, #1
 800980c:	190d      	adds	r5, r1, r4
 800980e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009812:	42ab      	cmp	r3, r5
 8009814:	d0f4      	beq.n	8009800 <memcmp+0x4>
 8009816:	1b58      	subs	r0, r3, r5
 8009818:	bd30      	pop	{r4, r5, pc}

0800981a <memcpy>:
 800981a:	b510      	push	{r4, lr}
 800981c:	1e43      	subs	r3, r0, #1
 800981e:	440a      	add	r2, r1
 8009820:	4291      	cmp	r1, r2
 8009822:	d100      	bne.n	8009826 <memcpy+0xc>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982e:	e7f7      	b.n	8009820 <memcpy+0x6>

08009830 <memset>:
 8009830:	4402      	add	r2, r0
 8009832:	4603      	mov	r3, r0
 8009834:	4293      	cmp	r3, r2
 8009836:	d100      	bne.n	800983a <memset+0xa>
 8009838:	4770      	bx	lr
 800983a:	f803 1b01 	strb.w	r1, [r3], #1
 800983e:	e7f9      	b.n	8009834 <memset+0x4>

08009840 <iprintf>:
 8009840:	b40f      	push	{r0, r1, r2, r3}
 8009842:	4b0a      	ldr	r3, [pc, #40]	; (800986c <iprintf+0x2c>)
 8009844:	b513      	push	{r0, r1, r4, lr}
 8009846:	681c      	ldr	r4, [r3, #0]
 8009848:	b124      	cbz	r4, 8009854 <iprintf+0x14>
 800984a:	69a3      	ldr	r3, [r4, #24]
 800984c:	b913      	cbnz	r3, 8009854 <iprintf+0x14>
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fae6 	bl	8009e20 <__sinit>
 8009854:	ab05      	add	r3, sp, #20
 8009856:	9a04      	ldr	r2, [sp, #16]
 8009858:	68a1      	ldr	r1, [r4, #8]
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fdf9 	bl	800a454 <_vfiprintf_r>
 8009862:	b002      	add	sp, #8
 8009864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009868:	b004      	add	sp, #16
 800986a:	4770      	bx	lr
 800986c:	20000010 	.word	0x20000010

08009870 <_puts_r>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	460e      	mov	r6, r1
 8009874:	4605      	mov	r5, r0
 8009876:	b118      	cbz	r0, 8009880 <_puts_r+0x10>
 8009878:	6983      	ldr	r3, [r0, #24]
 800987a:	b90b      	cbnz	r3, 8009880 <_puts_r+0x10>
 800987c:	f000 fad0 	bl	8009e20 <__sinit>
 8009880:	69ab      	ldr	r3, [r5, #24]
 8009882:	68ac      	ldr	r4, [r5, #8]
 8009884:	b913      	cbnz	r3, 800988c <_puts_r+0x1c>
 8009886:	4628      	mov	r0, r5
 8009888:	f000 faca 	bl	8009e20 <__sinit>
 800988c:	4b23      	ldr	r3, [pc, #140]	; (800991c <_puts_r+0xac>)
 800988e:	429c      	cmp	r4, r3
 8009890:	d117      	bne.n	80098c2 <_puts_r+0x52>
 8009892:	686c      	ldr	r4, [r5, #4]
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	071b      	lsls	r3, r3, #28
 8009898:	d51d      	bpl.n	80098d6 <_puts_r+0x66>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	b1db      	cbz	r3, 80098d6 <_puts_r+0x66>
 800989e:	3e01      	subs	r6, #1
 80098a0:	68a3      	ldr	r3, [r4, #8]
 80098a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098a6:	3b01      	subs	r3, #1
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	b9e9      	cbnz	r1, 80098e8 <_puts_r+0x78>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da2e      	bge.n	800990e <_puts_r+0x9e>
 80098b0:	4622      	mov	r2, r4
 80098b2:	210a      	movs	r1, #10
 80098b4:	4628      	mov	r0, r5
 80098b6:	f000 f903 	bl	8009ac0 <__swbuf_r>
 80098ba:	3001      	adds	r0, #1
 80098bc:	d011      	beq.n	80098e2 <_puts_r+0x72>
 80098be:	200a      	movs	r0, #10
 80098c0:	e011      	b.n	80098e6 <_puts_r+0x76>
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <_puts_r+0xb0>)
 80098c4:	429c      	cmp	r4, r3
 80098c6:	d101      	bne.n	80098cc <_puts_r+0x5c>
 80098c8:	68ac      	ldr	r4, [r5, #8]
 80098ca:	e7e3      	b.n	8009894 <_puts_r+0x24>
 80098cc:	4b15      	ldr	r3, [pc, #84]	; (8009924 <_puts_r+0xb4>)
 80098ce:	429c      	cmp	r4, r3
 80098d0:	bf08      	it	eq
 80098d2:	68ec      	ldreq	r4, [r5, #12]
 80098d4:	e7de      	b.n	8009894 <_puts_r+0x24>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 f943 	bl	8009b64 <__swsetup_r>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d0dd      	beq.n	800989e <_puts_r+0x2e>
 80098e2:	f04f 30ff 	mov.w	r0, #4294967295
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da04      	bge.n	80098f6 <_puts_r+0x86>
 80098ec:	69a2      	ldr	r2, [r4, #24]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	dc06      	bgt.n	8009900 <_puts_r+0x90>
 80098f2:	290a      	cmp	r1, #10
 80098f4:	d004      	beq.n	8009900 <_puts_r+0x90>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	6022      	str	r2, [r4, #0]
 80098fc:	7019      	strb	r1, [r3, #0]
 80098fe:	e7cf      	b.n	80098a0 <_puts_r+0x30>
 8009900:	4622      	mov	r2, r4
 8009902:	4628      	mov	r0, r5
 8009904:	f000 f8dc 	bl	8009ac0 <__swbuf_r>
 8009908:	3001      	adds	r0, #1
 800990a:	d1c9      	bne.n	80098a0 <_puts_r+0x30>
 800990c:	e7e9      	b.n	80098e2 <_puts_r+0x72>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	200a      	movs	r0, #10
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	7018      	strb	r0, [r3, #0]
 8009918:	e7e5      	b.n	80098e6 <_puts_r+0x76>
 800991a:	bf00      	nop
 800991c:	0800b900 	.word	0x0800b900
 8009920:	0800b920 	.word	0x0800b920
 8009924:	0800b8e0 	.word	0x0800b8e0

08009928 <puts>:
 8009928:	4b02      	ldr	r3, [pc, #8]	; (8009934 <puts+0xc>)
 800992a:	4601      	mov	r1, r0
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	f7ff bf9f 	b.w	8009870 <_puts_r>
 8009932:	bf00      	nop
 8009934:	20000010 	.word	0x20000010

08009938 <siprintf>:
 8009938:	b40e      	push	{r1, r2, r3}
 800993a:	b500      	push	{lr}
 800993c:	b09c      	sub	sp, #112	; 0x70
 800993e:	ab1d      	add	r3, sp, #116	; 0x74
 8009940:	9002      	str	r0, [sp, #8]
 8009942:	9006      	str	r0, [sp, #24]
 8009944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009948:	4809      	ldr	r0, [pc, #36]	; (8009970 <siprintf+0x38>)
 800994a:	9107      	str	r1, [sp, #28]
 800994c:	9104      	str	r1, [sp, #16]
 800994e:	4909      	ldr	r1, [pc, #36]	; (8009974 <siprintf+0x3c>)
 8009950:	f853 2b04 	ldr.w	r2, [r3], #4
 8009954:	9105      	str	r1, [sp, #20]
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	a902      	add	r1, sp, #8
 800995c:	f000 fc58 	bl	800a210 <_svfiprintf_r>
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	b01c      	add	sp, #112	; 0x70
 8009968:	f85d eb04 	ldr.w	lr, [sp], #4
 800996c:	b003      	add	sp, #12
 800996e:	4770      	bx	lr
 8009970:	20000010 	.word	0x20000010
 8009974:	ffff0208 	.word	0xffff0208

08009978 <strcat>:
 8009978:	b510      	push	{r4, lr}
 800997a:	4603      	mov	r3, r0
 800997c:	781a      	ldrb	r2, [r3, #0]
 800997e:	1c5c      	adds	r4, r3, #1
 8009980:	b93a      	cbnz	r2, 8009992 <strcat+0x1a>
 8009982:	3b01      	subs	r3, #1
 8009984:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009988:	f803 2f01 	strb.w	r2, [r3, #1]!
 800998c:	2a00      	cmp	r2, #0
 800998e:	d1f9      	bne.n	8009984 <strcat+0xc>
 8009990:	bd10      	pop	{r4, pc}
 8009992:	4623      	mov	r3, r4
 8009994:	e7f2      	b.n	800997c <strcat+0x4>

08009996 <strncmp>:
 8009996:	b510      	push	{r4, lr}
 8009998:	b16a      	cbz	r2, 80099b6 <strncmp+0x20>
 800999a:	3901      	subs	r1, #1
 800999c:	1884      	adds	r4, r0, r2
 800999e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80099a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d103      	bne.n	80099b2 <strncmp+0x1c>
 80099aa:	42a0      	cmp	r0, r4
 80099ac:	d001      	beq.n	80099b2 <strncmp+0x1c>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f5      	bne.n	800999e <strncmp+0x8>
 80099b2:	1a98      	subs	r0, r3, r2
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	4610      	mov	r0, r2
 80099b8:	e7fc      	b.n	80099b4 <strncmp+0x1e>

080099ba <strncpy>:
 80099ba:	b570      	push	{r4, r5, r6, lr}
 80099bc:	3901      	subs	r1, #1
 80099be:	4604      	mov	r4, r0
 80099c0:	b902      	cbnz	r2, 80099c4 <strncpy+0xa>
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	4623      	mov	r3, r4
 80099c6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80099ca:	f803 5b01 	strb.w	r5, [r3], #1
 80099ce:	1e56      	subs	r6, r2, #1
 80099d0:	b92d      	cbnz	r5, 80099de <strncpy+0x24>
 80099d2:	4414      	add	r4, r2
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	d0f4      	beq.n	80099c2 <strncpy+0x8>
 80099d8:	f803 5b01 	strb.w	r5, [r3], #1
 80099dc:	e7fa      	b.n	80099d4 <strncpy+0x1a>
 80099de:	461c      	mov	r4, r3
 80099e0:	4632      	mov	r2, r6
 80099e2:	e7ed      	b.n	80099c0 <strncpy+0x6>

080099e4 <strstr>:
 80099e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e6:	7803      	ldrb	r3, [r0, #0]
 80099e8:	b17b      	cbz	r3, 8009a0a <strstr+0x26>
 80099ea:	4604      	mov	r4, r0
 80099ec:	7823      	ldrb	r3, [r4, #0]
 80099ee:	4620      	mov	r0, r4
 80099f0:	1c66      	adds	r6, r4, #1
 80099f2:	b17b      	cbz	r3, 8009a14 <strstr+0x30>
 80099f4:	1e4a      	subs	r2, r1, #1
 80099f6:	1e63      	subs	r3, r4, #1
 80099f8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80099fc:	b14d      	cbz	r5, 8009a12 <strstr+0x2e>
 80099fe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009a02:	42af      	cmp	r7, r5
 8009a04:	4634      	mov	r4, r6
 8009a06:	d0f7      	beq.n	80099f8 <strstr+0x14>
 8009a08:	e7f0      	b.n	80099ec <strstr+0x8>
 8009a0a:	780b      	ldrb	r3, [r1, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bf18      	it	ne
 8009a10:	2000      	movne	r0, #0
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a14:	4618      	mov	r0, r3
 8009a16:	e7fc      	b.n	8009a12 <strstr+0x2e>

08009a18 <strtok>:
 8009a18:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <strtok+0x50>)
 8009a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1e:	681d      	ldr	r5, [r3, #0]
 8009a20:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	b9b4      	cbnz	r4, 8009a56 <strtok+0x3e>
 8009a28:	2050      	movs	r0, #80	; 0x50
 8009a2a:	f000 fae7 	bl	8009ffc <malloc>
 8009a2e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009a30:	e9c0 4400 	strd	r4, r4, [r0]
 8009a34:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a38:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a3c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009a40:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009a44:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009a48:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009a4c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009a50:	6184      	str	r4, [r0, #24]
 8009a52:	7704      	strb	r4, [r0, #28]
 8009a54:	6244      	str	r4, [r0, #36]	; 0x24
 8009a56:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f000 b803 	b.w	8009a6c <__strtok_r>
 8009a66:	bf00      	nop
 8009a68:	20000010 	.word	0x20000010

08009a6c <__strtok_r>:
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	b918      	cbnz	r0, 8009a78 <__strtok_r+0xc>
 8009a70:	6810      	ldr	r0, [r2, #0]
 8009a72:	b908      	cbnz	r0, 8009a78 <__strtok_r+0xc>
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a76:	4620      	mov	r0, r4
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460f      	mov	r7, r1
 8009a7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a80:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a84:	b91e      	cbnz	r6, 8009a8e <__strtok_r+0x22>
 8009a86:	b96d      	cbnz	r5, 8009aa4 <__strtok_r+0x38>
 8009a88:	6015      	str	r5, [r2, #0]
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	e7f2      	b.n	8009a74 <__strtok_r+0x8>
 8009a8e:	42b5      	cmp	r5, r6
 8009a90:	d1f6      	bne.n	8009a80 <__strtok_r+0x14>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1ef      	bne.n	8009a76 <__strtok_r+0xa>
 8009a96:	6014      	str	r4, [r2, #0]
 8009a98:	7003      	strb	r3, [r0, #0]
 8009a9a:	e7eb      	b.n	8009a74 <__strtok_r+0x8>
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	e00d      	b.n	8009abc <__strtok_r+0x50>
 8009aa0:	b926      	cbnz	r6, 8009aac <__strtok_r+0x40>
 8009aa2:	461c      	mov	r4, r3
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009aac:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ab0:	42b5      	cmp	r5, r6
 8009ab2:	d1f5      	bne.n	8009aa0 <__strtok_r+0x34>
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	d0f1      	beq.n	8009a9c <__strtok_r+0x30>
 8009ab8:	2100      	movs	r1, #0
 8009aba:	7021      	strb	r1, [r4, #0]
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	e7d9      	b.n	8009a74 <__strtok_r+0x8>

08009ac0 <__swbuf_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b118      	cbz	r0, 8009ad2 <__swbuf_r+0x12>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <__swbuf_r+0x12>
 8009ace:	f000 f9a7 	bl	8009e20 <__sinit>
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <__swbuf_r+0x98>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d12a      	bne.n	8009b2e <__swbuf_r+0x6e>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	69a3      	ldr	r3, [r4, #24]
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	071a      	lsls	r2, r3, #28
 8009ae2:	d52e      	bpl.n	8009b42 <__swbuf_r+0x82>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	b363      	cbz	r3, 8009b42 <__swbuf_r+0x82>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	1ac0      	subs	r0, r0, r3
 8009aee:	6963      	ldr	r3, [r4, #20]
 8009af0:	b2f6      	uxtb	r6, r6
 8009af2:	4283      	cmp	r3, r0
 8009af4:	4637      	mov	r7, r6
 8009af6:	dc04      	bgt.n	8009b02 <__swbuf_r+0x42>
 8009af8:	4621      	mov	r1, r4
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f926 	bl	8009d4c <_fflush_r>
 8009b00:	bb28      	cbnz	r0, 8009b4e <__swbuf_r+0x8e>
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	701e      	strb	r6, [r3, #0]
 8009b10:	6963      	ldr	r3, [r4, #20]
 8009b12:	3001      	adds	r0, #1
 8009b14:	4283      	cmp	r3, r0
 8009b16:	d004      	beq.n	8009b22 <__swbuf_r+0x62>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	07db      	lsls	r3, r3, #31
 8009b1c:	d519      	bpl.n	8009b52 <__swbuf_r+0x92>
 8009b1e:	2e0a      	cmp	r6, #10
 8009b20:	d117      	bne.n	8009b52 <__swbuf_r+0x92>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f911 	bl	8009d4c <_fflush_r>
 8009b2a:	b190      	cbz	r0, 8009b52 <__swbuf_r+0x92>
 8009b2c:	e00f      	b.n	8009b4e <__swbuf_r+0x8e>
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <__swbuf_r+0x9c>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d101      	bne.n	8009b38 <__swbuf_r+0x78>
 8009b34:	68ac      	ldr	r4, [r5, #8]
 8009b36:	e7d0      	b.n	8009ada <__swbuf_r+0x1a>
 8009b38:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <__swbuf_r+0xa0>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	bf08      	it	eq
 8009b3e:	68ec      	ldreq	r4, [r5, #12]
 8009b40:	e7cb      	b.n	8009ada <__swbuf_r+0x1a>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f80d 	bl	8009b64 <__swsetup_r>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0cc      	beq.n	8009ae8 <__swbuf_r+0x28>
 8009b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8009b52:	4638      	mov	r0, r7
 8009b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b56:	bf00      	nop
 8009b58:	0800b900 	.word	0x0800b900
 8009b5c:	0800b920 	.word	0x0800b920
 8009b60:	0800b8e0 	.word	0x0800b8e0

08009b64 <__swsetup_r>:
 8009b64:	4b32      	ldr	r3, [pc, #200]	; (8009c30 <__swsetup_r+0xcc>)
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b125      	cbz	r5, 8009b7a <__swsetup_r+0x16>
 8009b70:	69ab      	ldr	r3, [r5, #24]
 8009b72:	b913      	cbnz	r3, 8009b7a <__swsetup_r+0x16>
 8009b74:	4628      	mov	r0, r5
 8009b76:	f000 f953 	bl	8009e20 <__sinit>
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <__swsetup_r+0xd0>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	d10f      	bne.n	8009ba0 <__swsetup_r+0x3c>
 8009b80:	686c      	ldr	r4, [r5, #4]
 8009b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	0715      	lsls	r5, r2, #28
 8009b8a:	d42c      	bmi.n	8009be6 <__swsetup_r+0x82>
 8009b8c:	06d0      	lsls	r0, r2, #27
 8009b8e:	d411      	bmi.n	8009bb4 <__swsetup_r+0x50>
 8009b90:	2209      	movs	r2, #9
 8009b92:	6032      	str	r2, [r6, #0]
 8009b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	e03e      	b.n	8009c1e <__swsetup_r+0xba>
 8009ba0:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <__swsetup_r+0xd4>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <__swsetup_r+0x46>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7eb      	b.n	8009b82 <__swsetup_r+0x1e>
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <__swsetup_r+0xd8>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7e6      	b.n	8009b82 <__swsetup_r+0x1e>
 8009bb4:	0751      	lsls	r1, r2, #29
 8009bb6:	d512      	bpl.n	8009bde <__swsetup_r+0x7a>
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	b141      	cbz	r1, 8009bce <__swsetup_r+0x6a>
 8009bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <__swsetup_r+0x66>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 fa21 	bl	800a00c <_free_r>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0308 	orr.w	r3, r3, #8
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	b94b      	cbnz	r3, 8009bfe <__swsetup_r+0x9a>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf4:	d003      	beq.n	8009bfe <__swsetup_r+0x9a>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 f9bf 	bl	8009f7c <__smakebuf_r>
 8009bfe:	89a2      	ldrh	r2, [r4, #12]
 8009c00:	f012 0301 	ands.w	r3, r2, #1
 8009c04:	d00c      	beq.n	8009c20 <__swsetup_r+0xbc>
 8009c06:	2300      	movs	r3, #0
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	61a3      	str	r3, [r4, #24]
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	b953      	cbnz	r3, 8009c2a <__swsetup_r+0xc6>
 8009c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c1c:	d1ba      	bne.n	8009b94 <__swsetup_r+0x30>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	0792      	lsls	r2, r2, #30
 8009c22:	bf58      	it	pl
 8009c24:	6963      	ldrpl	r3, [r4, #20]
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	e7f2      	b.n	8009c10 <__swsetup_r+0xac>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7f7      	b.n	8009c1e <__swsetup_r+0xba>
 8009c2e:	bf00      	nop
 8009c30:	20000010 	.word	0x20000010
 8009c34:	0800b900 	.word	0x0800b900
 8009c38:	0800b920 	.word	0x0800b920
 8009c3c:	0800b8e0 	.word	0x0800b8e0

08009c40 <__sflush_r>:
 8009c40:	898a      	ldrh	r2, [r1, #12]
 8009c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	4605      	mov	r5, r0
 8009c48:	0710      	lsls	r0, r2, #28
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	d458      	bmi.n	8009d00 <__sflush_r+0xc0>
 8009c4e:	684b      	ldr	r3, [r1, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dc05      	bgt.n	8009c60 <__sflush_r+0x20>
 8009c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dc02      	bgt.n	8009c60 <__sflush_r+0x20>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	d0f9      	beq.n	8009c5a <__sflush_r+0x1a>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c6c:	682f      	ldr	r7, [r5, #0]
 8009c6e:	6a21      	ldr	r1, [r4, #32]
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	d032      	beq.n	8009cda <__sflush_r+0x9a>
 8009c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	075a      	lsls	r2, r3, #29
 8009c7a:	d505      	bpl.n	8009c88 <__sflush_r+0x48>
 8009c7c:	6863      	ldr	r3, [r4, #4]
 8009c7e:	1ac0      	subs	r0, r0, r3
 8009c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c82:	b10b      	cbz	r3, 8009c88 <__sflush_r+0x48>
 8009c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c86:	1ac0      	subs	r0, r0, r3
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c8e:	6a21      	ldr	r1, [r4, #32]
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b0      	blx	r6
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	d106      	bne.n	8009ca8 <__sflush_r+0x68>
 8009c9a:	6829      	ldr	r1, [r5, #0]
 8009c9c:	291d      	cmp	r1, #29
 8009c9e:	d848      	bhi.n	8009d32 <__sflush_r+0xf2>
 8009ca0:	4a29      	ldr	r2, [pc, #164]	; (8009d48 <__sflush_r+0x108>)
 8009ca2:	40ca      	lsrs	r2, r1
 8009ca4:	07d6      	lsls	r6, r2, #31
 8009ca6:	d544      	bpl.n	8009d32 <__sflush_r+0xf2>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	6062      	str	r2, [r4, #4]
 8009cac:	04d9      	lsls	r1, r3, #19
 8009cae:	6922      	ldr	r2, [r4, #16]
 8009cb0:	6022      	str	r2, [r4, #0]
 8009cb2:	d504      	bpl.n	8009cbe <__sflush_r+0x7e>
 8009cb4:	1c42      	adds	r2, r0, #1
 8009cb6:	d101      	bne.n	8009cbc <__sflush_r+0x7c>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b903      	cbnz	r3, 8009cbe <__sflush_r+0x7e>
 8009cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8009cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc0:	602f      	str	r7, [r5, #0]
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	d0c9      	beq.n	8009c5a <__sflush_r+0x1a>
 8009cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d002      	beq.n	8009cd4 <__sflush_r+0x94>
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f000 f99c 	bl	800a00c <_free_r>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8009cd8:	e7c0      	b.n	8009c5c <__sflush_r+0x1c>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4628      	mov	r0, r5
 8009cde:	47b0      	blx	r6
 8009ce0:	1c41      	adds	r1, r0, #1
 8009ce2:	d1c8      	bne.n	8009c76 <__sflush_r+0x36>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0c5      	beq.n	8009c76 <__sflush_r+0x36>
 8009cea:	2b1d      	cmp	r3, #29
 8009cec:	d001      	beq.n	8009cf2 <__sflush_r+0xb2>
 8009cee:	2b16      	cmp	r3, #22
 8009cf0:	d101      	bne.n	8009cf6 <__sflush_r+0xb6>
 8009cf2:	602f      	str	r7, [r5, #0]
 8009cf4:	e7b1      	b.n	8009c5a <__sflush_r+0x1a>
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	e7ad      	b.n	8009c5c <__sflush_r+0x1c>
 8009d00:	690f      	ldr	r7, [r1, #16]
 8009d02:	2f00      	cmp	r7, #0
 8009d04:	d0a9      	beq.n	8009c5a <__sflush_r+0x1a>
 8009d06:	0793      	lsls	r3, r2, #30
 8009d08:	680e      	ldr	r6, [r1, #0]
 8009d0a:	bf08      	it	eq
 8009d0c:	694b      	ldreq	r3, [r1, #20]
 8009d0e:	600f      	str	r7, [r1, #0]
 8009d10:	bf18      	it	ne
 8009d12:	2300      	movne	r3, #0
 8009d14:	eba6 0807 	sub.w	r8, r6, r7
 8009d18:	608b      	str	r3, [r1, #8]
 8009d1a:	f1b8 0f00 	cmp.w	r8, #0
 8009d1e:	dd9c      	ble.n	8009c5a <__sflush_r+0x1a>
 8009d20:	4643      	mov	r3, r8
 8009d22:	463a      	mov	r2, r7
 8009d24:	6a21      	ldr	r1, [r4, #32]
 8009d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	dc06      	bgt.n	8009d3e <__sflush_r+0xfe>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	e78e      	b.n	8009c5c <__sflush_r+0x1c>
 8009d3e:	4407      	add	r7, r0
 8009d40:	eba8 0800 	sub.w	r8, r8, r0
 8009d44:	e7e9      	b.n	8009d1a <__sflush_r+0xda>
 8009d46:	bf00      	nop
 8009d48:	20400001 	.word	0x20400001

08009d4c <_fflush_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	690b      	ldr	r3, [r1, #16]
 8009d50:	4605      	mov	r5, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b1db      	cbz	r3, 8009d8e <_fflush_r+0x42>
 8009d56:	b118      	cbz	r0, 8009d60 <_fflush_r+0x14>
 8009d58:	6983      	ldr	r3, [r0, #24]
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_fflush_r+0x14>
 8009d5c:	f000 f860 	bl	8009e20 <__sinit>
 8009d60:	4b0c      	ldr	r3, [pc, #48]	; (8009d94 <_fflush_r+0x48>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	d109      	bne.n	8009d7a <_fflush_r+0x2e>
 8009d66:	686c      	ldr	r4, [r5, #4]
 8009d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6c:	b17b      	cbz	r3, 8009d8e <_fflush_r+0x42>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d76:	f7ff bf63 	b.w	8009c40 <__sflush_r>
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <_fflush_r+0x4c>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	d101      	bne.n	8009d84 <_fflush_r+0x38>
 8009d80:	68ac      	ldr	r4, [r5, #8]
 8009d82:	e7f1      	b.n	8009d68 <_fflush_r+0x1c>
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <_fflush_r+0x50>)
 8009d86:	429c      	cmp	r4, r3
 8009d88:	bf08      	it	eq
 8009d8a:	68ec      	ldreq	r4, [r5, #12]
 8009d8c:	e7ec      	b.n	8009d68 <_fflush_r+0x1c>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	0800b900 	.word	0x0800b900
 8009d98:	0800b920 	.word	0x0800b920
 8009d9c:	0800b8e0 	.word	0x0800b8e0

08009da0 <std>:
 8009da0:	2300      	movs	r3, #0
 8009da2:	b510      	push	{r4, lr}
 8009da4:	4604      	mov	r4, r0
 8009da6:	e9c0 3300 	strd	r3, r3, [r0]
 8009daa:	6083      	str	r3, [r0, #8]
 8009dac:	8181      	strh	r1, [r0, #12]
 8009dae:	6643      	str	r3, [r0, #100]	; 0x64
 8009db0:	81c2      	strh	r2, [r0, #14]
 8009db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009db6:	6183      	str	r3, [r0, #24]
 8009db8:	4619      	mov	r1, r3
 8009dba:	2208      	movs	r2, #8
 8009dbc:	305c      	adds	r0, #92	; 0x5c
 8009dbe:	f7ff fd37 	bl	8009830 <memset>
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <std+0x38>)
 8009dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8009dc6:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <std+0x3c>)
 8009dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <std+0x40>)
 8009dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <std+0x44>)
 8009dd0:	6224      	str	r4, [r4, #32]
 8009dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800a9b1 	.word	0x0800a9b1
 8009ddc:	0800a9d3 	.word	0x0800a9d3
 8009de0:	0800aa0b 	.word	0x0800aa0b
 8009de4:	0800aa2f 	.word	0x0800aa2f

08009de8 <_cleanup_r>:
 8009de8:	4901      	ldr	r1, [pc, #4]	; (8009df0 <_cleanup_r+0x8>)
 8009dea:	f000 b885 	b.w	8009ef8 <_fwalk_reent>
 8009dee:	bf00      	nop
 8009df0:	08009d4d 	.word	0x08009d4d

08009df4 <__sfmoreglue>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	1e4a      	subs	r2, r1, #1
 8009df8:	2568      	movs	r5, #104	; 0x68
 8009dfa:	4355      	muls	r5, r2
 8009dfc:	460e      	mov	r6, r1
 8009dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e02:	f000 f951 	bl	800a0a8 <_malloc_r>
 8009e06:	4604      	mov	r4, r0
 8009e08:	b140      	cbz	r0, 8009e1c <__sfmoreglue+0x28>
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e10:	300c      	adds	r0, #12
 8009e12:	60a0      	str	r0, [r4, #8]
 8009e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e18:	f7ff fd0a 	bl	8009830 <memset>
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}

08009e20 <__sinit>:
 8009e20:	6983      	ldr	r3, [r0, #24]
 8009e22:	b510      	push	{r4, lr}
 8009e24:	4604      	mov	r4, r0
 8009e26:	bb33      	cbnz	r3, 8009e76 <__sinit+0x56>
 8009e28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009e2c:	6503      	str	r3, [r0, #80]	; 0x50
 8009e2e:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <__sinit+0x58>)
 8009e30:	4a12      	ldr	r2, [pc, #72]	; (8009e7c <__sinit+0x5c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6282      	str	r2, [r0, #40]	; 0x28
 8009e36:	4298      	cmp	r0, r3
 8009e38:	bf04      	itt	eq
 8009e3a:	2301      	moveq	r3, #1
 8009e3c:	6183      	streq	r3, [r0, #24]
 8009e3e:	f000 f81f 	bl	8009e80 <__sfp>
 8009e42:	6060      	str	r0, [r4, #4]
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 f81b 	bl	8009e80 <__sfp>
 8009e4a:	60a0      	str	r0, [r4, #8]
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 f817 	bl	8009e80 <__sfp>
 8009e52:	2200      	movs	r2, #0
 8009e54:	60e0      	str	r0, [r4, #12]
 8009e56:	2104      	movs	r1, #4
 8009e58:	6860      	ldr	r0, [r4, #4]
 8009e5a:	f7ff ffa1 	bl	8009da0 <std>
 8009e5e:	2201      	movs	r2, #1
 8009e60:	2109      	movs	r1, #9
 8009e62:	68a0      	ldr	r0, [r4, #8]
 8009e64:	f7ff ff9c 	bl	8009da0 <std>
 8009e68:	2202      	movs	r2, #2
 8009e6a:	2112      	movs	r1, #18
 8009e6c:	68e0      	ldr	r0, [r4, #12]
 8009e6e:	f7ff ff97 	bl	8009da0 <std>
 8009e72:	2301      	movs	r3, #1
 8009e74:	61a3      	str	r3, [r4, #24]
 8009e76:	bd10      	pop	{r4, pc}
 8009e78:	0800b8dc 	.word	0x0800b8dc
 8009e7c:	08009de9 	.word	0x08009de9

08009e80 <__sfp>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	4b1b      	ldr	r3, [pc, #108]	; (8009ef0 <__sfp+0x70>)
 8009e84:	681e      	ldr	r6, [r3, #0]
 8009e86:	69b3      	ldr	r3, [r6, #24]
 8009e88:	4607      	mov	r7, r0
 8009e8a:	b913      	cbnz	r3, 8009e92 <__sfp+0x12>
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff ffc7 	bl	8009e20 <__sinit>
 8009e92:	3648      	adds	r6, #72	; 0x48
 8009e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	d503      	bpl.n	8009ea4 <__sfp+0x24>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	b133      	cbz	r3, 8009eae <__sfp+0x2e>
 8009ea0:	6836      	ldr	r6, [r6, #0]
 8009ea2:	e7f7      	b.n	8009e94 <__sfp+0x14>
 8009ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ea8:	b16d      	cbz	r5, 8009ec6 <__sfp+0x46>
 8009eaa:	3468      	adds	r4, #104	; 0x68
 8009eac:	e7f4      	b.n	8009e98 <__sfp+0x18>
 8009eae:	2104      	movs	r1, #4
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff ff9f 	bl	8009df4 <__sfmoreglue>
 8009eb6:	6030      	str	r0, [r6, #0]
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1f1      	bne.n	8009ea0 <__sfp+0x20>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec6:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <__sfp+0x74>)
 8009ec8:	6665      	str	r5, [r4, #100]	; 0x64
 8009eca:	e9c4 5500 	strd	r5, r5, [r4]
 8009ece:	60a5      	str	r5, [r4, #8]
 8009ed0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ed4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ed8:	2208      	movs	r2, #8
 8009eda:	4629      	mov	r1, r5
 8009edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ee0:	f7ff fca6 	bl	8009830 <memset>
 8009ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009eec:	e7e9      	b.n	8009ec2 <__sfp+0x42>
 8009eee:	bf00      	nop
 8009ef0:	0800b8dc 	.word	0x0800b8dc
 8009ef4:	ffff0001 	.word	0xffff0001

08009ef8 <_fwalk_reent>:
 8009ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f04:	2600      	movs	r6, #0
 8009f06:	b914      	cbnz	r4, 8009f0e <_fwalk_reent+0x16>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009f12:	3f01      	subs	r7, #1
 8009f14:	d501      	bpl.n	8009f1a <_fwalk_reent+0x22>
 8009f16:	6824      	ldr	r4, [r4, #0]
 8009f18:	e7f5      	b.n	8009f06 <_fwalk_reent+0xe>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d907      	bls.n	8009f30 <_fwalk_reent+0x38>
 8009f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f24:	3301      	adds	r3, #1
 8009f26:	d003      	beq.n	8009f30 <_fwalk_reent+0x38>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	47c8      	blx	r9
 8009f2e:	4306      	orrs	r6, r0
 8009f30:	3568      	adds	r5, #104	; 0x68
 8009f32:	e7ee      	b.n	8009f12 <_fwalk_reent+0x1a>

08009f34 <__swhatbuf_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	460e      	mov	r6, r1
 8009f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	b096      	sub	sp, #88	; 0x58
 8009f40:	4614      	mov	r4, r2
 8009f42:	461d      	mov	r5, r3
 8009f44:	da07      	bge.n	8009f56 <__swhatbuf_r+0x22>
 8009f46:	2300      	movs	r3, #0
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	89b3      	ldrh	r3, [r6, #12]
 8009f4c:	061a      	lsls	r2, r3, #24
 8009f4e:	d410      	bmi.n	8009f72 <__swhatbuf_r+0x3e>
 8009f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f54:	e00e      	b.n	8009f74 <__swhatbuf_r+0x40>
 8009f56:	466a      	mov	r2, sp
 8009f58:	f000 fd90 	bl	800aa7c <_fstat_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	dbf2      	blt.n	8009f46 <__swhatbuf_r+0x12>
 8009f60:	9a01      	ldr	r2, [sp, #4]
 8009f62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f6a:	425a      	negs	r2, r3
 8009f6c:	415a      	adcs	r2, r3
 8009f6e:	602a      	str	r2, [r5, #0]
 8009f70:	e7ee      	b.n	8009f50 <__swhatbuf_r+0x1c>
 8009f72:	2340      	movs	r3, #64	; 0x40
 8009f74:	2000      	movs	r0, #0
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	b016      	add	sp, #88	; 0x58
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}

08009f7c <__smakebuf_r>:
 8009f7c:	898b      	ldrh	r3, [r1, #12]
 8009f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f80:	079d      	lsls	r5, r3, #30
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	d507      	bpl.n	8009f98 <__smakebuf_r+0x1c>
 8009f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	2301      	movs	r3, #1
 8009f92:	6163      	str	r3, [r4, #20]
 8009f94:	b002      	add	sp, #8
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	ab01      	add	r3, sp, #4
 8009f9a:	466a      	mov	r2, sp
 8009f9c:	f7ff ffca 	bl	8009f34 <__swhatbuf_r>
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f000 f87f 	bl	800a0a8 <_malloc_r>
 8009faa:	b948      	cbnz	r0, 8009fc0 <__smakebuf_r+0x44>
 8009fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d4ef      	bmi.n	8009f94 <__smakebuf_r+0x18>
 8009fb4:	f023 0303 	bic.w	r3, r3, #3
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	e7e3      	b.n	8009f88 <__smakebuf_r+0xc>
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <__smakebuf_r+0x7c>)
 8009fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	6020      	str	r0, [r4, #0]
 8009fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	6163      	str	r3, [r4, #20]
 8009fd2:	9b01      	ldr	r3, [sp, #4]
 8009fd4:	6120      	str	r0, [r4, #16]
 8009fd6:	b15b      	cbz	r3, 8009ff0 <__smakebuf_r+0x74>
 8009fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f000 fd5f 	bl	800aaa0 <_isatty_r>
 8009fe2:	b128      	cbz	r0, 8009ff0 <__smakebuf_r+0x74>
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f023 0303 	bic.w	r3, r3, #3
 8009fea:	f043 0301 	orr.w	r3, r3, #1
 8009fee:	81a3      	strh	r3, [r4, #12]
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	431d      	orrs	r5, r3
 8009ff4:	81a5      	strh	r5, [r4, #12]
 8009ff6:	e7cd      	b.n	8009f94 <__smakebuf_r+0x18>
 8009ff8:	08009de9 	.word	0x08009de9

08009ffc <malloc>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <malloc+0xc>)
 8009ffe:	4601      	mov	r1, r0
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f000 b851 	b.w	800a0a8 <_malloc_r>
 800a006:	bf00      	nop
 800a008:	20000010 	.word	0x20000010

0800a00c <_free_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4605      	mov	r5, r0
 800a010:	2900      	cmp	r1, #0
 800a012:	d045      	beq.n	800a0a0 <_free_r+0x94>
 800a014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a018:	1f0c      	subs	r4, r1, #4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfb8      	it	lt
 800a01e:	18e4      	addlt	r4, r4, r3
 800a020:	f000 fd79 	bl	800ab16 <__malloc_lock>
 800a024:	4a1f      	ldr	r2, [pc, #124]	; (800a0a4 <_free_r+0x98>)
 800a026:	6813      	ldr	r3, [r2, #0]
 800a028:	4610      	mov	r0, r2
 800a02a:	b933      	cbnz	r3, 800a03a <_free_r+0x2e>
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	6014      	str	r4, [r2, #0]
 800a030:	4628      	mov	r0, r5
 800a032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a036:	f000 bd6f 	b.w	800ab18 <__malloc_unlock>
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	d90c      	bls.n	800a058 <_free_r+0x4c>
 800a03e:	6821      	ldr	r1, [r4, #0]
 800a040:	1862      	adds	r2, r4, r1
 800a042:	4293      	cmp	r3, r2
 800a044:	bf04      	itt	eq
 800a046:	681a      	ldreq	r2, [r3, #0]
 800a048:	685b      	ldreq	r3, [r3, #4]
 800a04a:	6063      	str	r3, [r4, #4]
 800a04c:	bf04      	itt	eq
 800a04e:	1852      	addeq	r2, r2, r1
 800a050:	6022      	streq	r2, [r4, #0]
 800a052:	6004      	str	r4, [r0, #0]
 800a054:	e7ec      	b.n	800a030 <_free_r+0x24>
 800a056:	4613      	mov	r3, r2
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	b10a      	cbz	r2, 800a060 <_free_r+0x54>
 800a05c:	42a2      	cmp	r2, r4
 800a05e:	d9fa      	bls.n	800a056 <_free_r+0x4a>
 800a060:	6819      	ldr	r1, [r3, #0]
 800a062:	1858      	adds	r0, r3, r1
 800a064:	42a0      	cmp	r0, r4
 800a066:	d10b      	bne.n	800a080 <_free_r+0x74>
 800a068:	6820      	ldr	r0, [r4, #0]
 800a06a:	4401      	add	r1, r0
 800a06c:	1858      	adds	r0, r3, r1
 800a06e:	4282      	cmp	r2, r0
 800a070:	6019      	str	r1, [r3, #0]
 800a072:	d1dd      	bne.n	800a030 <_free_r+0x24>
 800a074:	6810      	ldr	r0, [r2, #0]
 800a076:	6852      	ldr	r2, [r2, #4]
 800a078:	605a      	str	r2, [r3, #4]
 800a07a:	4401      	add	r1, r0
 800a07c:	6019      	str	r1, [r3, #0]
 800a07e:	e7d7      	b.n	800a030 <_free_r+0x24>
 800a080:	d902      	bls.n	800a088 <_free_r+0x7c>
 800a082:	230c      	movs	r3, #12
 800a084:	602b      	str	r3, [r5, #0]
 800a086:	e7d3      	b.n	800a030 <_free_r+0x24>
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	1821      	adds	r1, r4, r0
 800a08c:	428a      	cmp	r2, r1
 800a08e:	bf04      	itt	eq
 800a090:	6811      	ldreq	r1, [r2, #0]
 800a092:	6852      	ldreq	r2, [r2, #4]
 800a094:	6062      	str	r2, [r4, #4]
 800a096:	bf04      	itt	eq
 800a098:	1809      	addeq	r1, r1, r0
 800a09a:	6021      	streq	r1, [r4, #0]
 800a09c:	605c      	str	r4, [r3, #4]
 800a09e:	e7c7      	b.n	800a030 <_free_r+0x24>
 800a0a0:	bd38      	pop	{r3, r4, r5, pc}
 800a0a2:	bf00      	nop
 800a0a4:	200007e0 	.word	0x200007e0

0800a0a8 <_malloc_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	1ccd      	adds	r5, r1, #3
 800a0ac:	f025 0503 	bic.w	r5, r5, #3
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	2d0c      	cmp	r5, #12
 800a0b4:	bf38      	it	cc
 800a0b6:	250c      	movcc	r5, #12
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	db01      	blt.n	800a0c2 <_malloc_r+0x1a>
 800a0be:	42a9      	cmp	r1, r5
 800a0c0:	d903      	bls.n	800a0ca <_malloc_r+0x22>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ca:	f000 fd24 	bl	800ab16 <__malloc_lock>
 800a0ce:	4a21      	ldr	r2, [pc, #132]	; (800a154 <_malloc_r+0xac>)
 800a0d0:	6814      	ldr	r4, [r2, #0]
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	b991      	cbnz	r1, 800a0fc <_malloc_r+0x54>
 800a0d6:	4c20      	ldr	r4, [pc, #128]	; (800a158 <_malloc_r+0xb0>)
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	b91b      	cbnz	r3, 800a0e4 <_malloc_r+0x3c>
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f000 fc57 	bl	800a990 <_sbrk_r>
 800a0e2:	6020      	str	r0, [r4, #0]
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 fc52 	bl	800a990 <_sbrk_r>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d124      	bne.n	800a13a <_malloc_r+0x92>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f000 fd0f 	bl	800ab18 <__malloc_unlock>
 800a0fa:	e7e4      	b.n	800a0c6 <_malloc_r+0x1e>
 800a0fc:	680b      	ldr	r3, [r1, #0]
 800a0fe:	1b5b      	subs	r3, r3, r5
 800a100:	d418      	bmi.n	800a134 <_malloc_r+0x8c>
 800a102:	2b0b      	cmp	r3, #11
 800a104:	d90f      	bls.n	800a126 <_malloc_r+0x7e>
 800a106:	600b      	str	r3, [r1, #0]
 800a108:	50cd      	str	r5, [r1, r3]
 800a10a:	18cc      	adds	r4, r1, r3
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 fd03 	bl	800ab18 <__malloc_unlock>
 800a112:	f104 000b 	add.w	r0, r4, #11
 800a116:	1d23      	adds	r3, r4, #4
 800a118:	f020 0007 	bic.w	r0, r0, #7
 800a11c:	1ac3      	subs	r3, r0, r3
 800a11e:	d0d3      	beq.n	800a0c8 <_malloc_r+0x20>
 800a120:	425a      	negs	r2, r3
 800a122:	50e2      	str	r2, [r4, r3]
 800a124:	e7d0      	b.n	800a0c8 <_malloc_r+0x20>
 800a126:	428c      	cmp	r4, r1
 800a128:	684b      	ldr	r3, [r1, #4]
 800a12a:	bf16      	itet	ne
 800a12c:	6063      	strne	r3, [r4, #4]
 800a12e:	6013      	streq	r3, [r2, #0]
 800a130:	460c      	movne	r4, r1
 800a132:	e7eb      	b.n	800a10c <_malloc_r+0x64>
 800a134:	460c      	mov	r4, r1
 800a136:	6849      	ldr	r1, [r1, #4]
 800a138:	e7cc      	b.n	800a0d4 <_malloc_r+0x2c>
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	f024 0403 	bic.w	r4, r4, #3
 800a140:	42a0      	cmp	r0, r4
 800a142:	d005      	beq.n	800a150 <_malloc_r+0xa8>
 800a144:	1a21      	subs	r1, r4, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f000 fc22 	bl	800a990 <_sbrk_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d0cf      	beq.n	800a0f0 <_malloc_r+0x48>
 800a150:	6025      	str	r5, [r4, #0]
 800a152:	e7db      	b.n	800a10c <_malloc_r+0x64>
 800a154:	200007e0 	.word	0x200007e0
 800a158:	200007e4 	.word	0x200007e4

0800a15c <__ssputs_r>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	688e      	ldr	r6, [r1, #8]
 800a162:	429e      	cmp	r6, r3
 800a164:	4682      	mov	sl, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4690      	mov	r8, r2
 800a16a:	4699      	mov	r9, r3
 800a16c:	d837      	bhi.n	800a1de <__ssputs_r+0x82>
 800a16e:	898a      	ldrh	r2, [r1, #12]
 800a170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a174:	d031      	beq.n	800a1da <__ssputs_r+0x7e>
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	6909      	ldr	r1, [r1, #16]
 800a17a:	1a6f      	subs	r7, r5, r1
 800a17c:	6965      	ldr	r5, [r4, #20]
 800a17e:	2302      	movs	r3, #2
 800a180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a184:	fb95 f5f3 	sdiv	r5, r5, r3
 800a188:	f109 0301 	add.w	r3, r9, #1
 800a18c:	443b      	add	r3, r7
 800a18e:	429d      	cmp	r5, r3
 800a190:	bf38      	it	cc
 800a192:	461d      	movcc	r5, r3
 800a194:	0553      	lsls	r3, r2, #21
 800a196:	d530      	bpl.n	800a1fa <__ssputs_r+0x9e>
 800a198:	4629      	mov	r1, r5
 800a19a:	f7ff ff85 	bl	800a0a8 <_malloc_r>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	b950      	cbnz	r0, 800a1b8 <__ssputs_r+0x5c>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	f8ca 3000 	str.w	r3, [sl]
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	463a      	mov	r2, r7
 800a1ba:	6921      	ldr	r1, [r4, #16]
 800a1bc:	f7ff fb2d 	bl	800981a <memcpy>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	6126      	str	r6, [r4, #16]
 800a1ce:	6165      	str	r5, [r4, #20]
 800a1d0:	443e      	add	r6, r7
 800a1d2:	1bed      	subs	r5, r5, r7
 800a1d4:	6026      	str	r6, [r4, #0]
 800a1d6:	60a5      	str	r5, [r4, #8]
 800a1d8:	464e      	mov	r6, r9
 800a1da:	454e      	cmp	r6, r9
 800a1dc:	d900      	bls.n	800a1e0 <__ssputs_r+0x84>
 800a1de:	464e      	mov	r6, r9
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	6820      	ldr	r0, [r4, #0]
 800a1e6:	f000 fc7d 	bl	800aae4 <memmove>
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	1b9b      	subs	r3, r3, r6
 800a1ee:	60a3      	str	r3, [r4, #8]
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	441e      	add	r6, r3
 800a1f4:	6026      	str	r6, [r4, #0]
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e7dc      	b.n	800a1b4 <__ssputs_r+0x58>
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	f000 fc8d 	bl	800ab1a <_realloc_r>
 800a200:	4606      	mov	r6, r0
 800a202:	2800      	cmp	r0, #0
 800a204:	d1e2      	bne.n	800a1cc <__ssputs_r+0x70>
 800a206:	6921      	ldr	r1, [r4, #16]
 800a208:	4650      	mov	r0, sl
 800a20a:	f7ff feff 	bl	800a00c <_free_r>
 800a20e:	e7c8      	b.n	800a1a2 <__ssputs_r+0x46>

0800a210 <_svfiprintf_r>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	461d      	mov	r5, r3
 800a216:	898b      	ldrh	r3, [r1, #12]
 800a218:	061f      	lsls	r7, r3, #24
 800a21a:	b09d      	sub	sp, #116	; 0x74
 800a21c:	4680      	mov	r8, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4616      	mov	r6, r2
 800a222:	d50f      	bpl.n	800a244 <_svfiprintf_r+0x34>
 800a224:	690b      	ldr	r3, [r1, #16]
 800a226:	b96b      	cbnz	r3, 800a244 <_svfiprintf_r+0x34>
 800a228:	2140      	movs	r1, #64	; 0x40
 800a22a:	f7ff ff3d 	bl	800a0a8 <_malloc_r>
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	6120      	str	r0, [r4, #16]
 800a232:	b928      	cbnz	r0, 800a240 <_svfiprintf_r+0x30>
 800a234:	230c      	movs	r3, #12
 800a236:	f8c8 3000 	str.w	r3, [r8]
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295
 800a23e:	e0c8      	b.n	800a3d2 <_svfiprintf_r+0x1c2>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	6163      	str	r3, [r4, #20]
 800a244:	2300      	movs	r3, #0
 800a246:	9309      	str	r3, [sp, #36]	; 0x24
 800a248:	2320      	movs	r3, #32
 800a24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a24e:	2330      	movs	r3, #48	; 0x30
 800a250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a254:	9503      	str	r5, [sp, #12]
 800a256:	f04f 0b01 	mov.w	fp, #1
 800a25a:	4637      	mov	r7, r6
 800a25c:	463d      	mov	r5, r7
 800a25e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a262:	b10b      	cbz	r3, 800a268 <_svfiprintf_r+0x58>
 800a264:	2b25      	cmp	r3, #37	; 0x25
 800a266:	d13e      	bne.n	800a2e6 <_svfiprintf_r+0xd6>
 800a268:	ebb7 0a06 	subs.w	sl, r7, r6
 800a26c:	d00b      	beq.n	800a286 <_svfiprintf_r+0x76>
 800a26e:	4653      	mov	r3, sl
 800a270:	4632      	mov	r2, r6
 800a272:	4621      	mov	r1, r4
 800a274:	4640      	mov	r0, r8
 800a276:	f7ff ff71 	bl	800a15c <__ssputs_r>
 800a27a:	3001      	adds	r0, #1
 800a27c:	f000 80a4 	beq.w	800a3c8 <_svfiprintf_r+0x1b8>
 800a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a282:	4453      	add	r3, sl
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	783b      	ldrb	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 809d 	beq.w	800a3c8 <_svfiprintf_r+0x1b8>
 800a28e:	2300      	movs	r3, #0
 800a290:	f04f 32ff 	mov.w	r2, #4294967295
 800a294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	9307      	str	r3, [sp, #28]
 800a29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2a2:	462f      	mov	r7, r5
 800a2a4:	2205      	movs	r2, #5
 800a2a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a2aa:	4850      	ldr	r0, [pc, #320]	; (800a3ec <_svfiprintf_r+0x1dc>)
 800a2ac:	f7f5 ff98 	bl	80001e0 <memchr>
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	b9d0      	cbnz	r0, 800a2ea <_svfiprintf_r+0xda>
 800a2b4:	06d9      	lsls	r1, r3, #27
 800a2b6:	bf44      	itt	mi
 800a2b8:	2220      	movmi	r2, #32
 800a2ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2be:	071a      	lsls	r2, r3, #28
 800a2c0:	bf44      	itt	mi
 800a2c2:	222b      	movmi	r2, #43	; 0x2b
 800a2c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2c8:	782a      	ldrb	r2, [r5, #0]
 800a2ca:	2a2a      	cmp	r2, #42	; 0x2a
 800a2cc:	d015      	beq.n	800a2fa <_svfiprintf_r+0xea>
 800a2ce:	9a07      	ldr	r2, [sp, #28]
 800a2d0:	462f      	mov	r7, r5
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	250a      	movs	r5, #10
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2dc:	3b30      	subs	r3, #48	; 0x30
 800a2de:	2b09      	cmp	r3, #9
 800a2e0:	d94d      	bls.n	800a37e <_svfiprintf_r+0x16e>
 800a2e2:	b1b8      	cbz	r0, 800a314 <_svfiprintf_r+0x104>
 800a2e4:	e00f      	b.n	800a306 <_svfiprintf_r+0xf6>
 800a2e6:	462f      	mov	r7, r5
 800a2e8:	e7b8      	b.n	800a25c <_svfiprintf_r+0x4c>
 800a2ea:	4a40      	ldr	r2, [pc, #256]	; (800a3ec <_svfiprintf_r+0x1dc>)
 800a2ec:	1a80      	subs	r0, r0, r2
 800a2ee:	fa0b f000 	lsl.w	r0, fp, r0
 800a2f2:	4318      	orrs	r0, r3
 800a2f4:	9004      	str	r0, [sp, #16]
 800a2f6:	463d      	mov	r5, r7
 800a2f8:	e7d3      	b.n	800a2a2 <_svfiprintf_r+0x92>
 800a2fa:	9a03      	ldr	r2, [sp, #12]
 800a2fc:	1d11      	adds	r1, r2, #4
 800a2fe:	6812      	ldr	r2, [r2, #0]
 800a300:	9103      	str	r1, [sp, #12]
 800a302:	2a00      	cmp	r2, #0
 800a304:	db01      	blt.n	800a30a <_svfiprintf_r+0xfa>
 800a306:	9207      	str	r2, [sp, #28]
 800a308:	e004      	b.n	800a314 <_svfiprintf_r+0x104>
 800a30a:	4252      	negs	r2, r2
 800a30c:	f043 0302 	orr.w	r3, r3, #2
 800a310:	9207      	str	r2, [sp, #28]
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	783b      	ldrb	r3, [r7, #0]
 800a316:	2b2e      	cmp	r3, #46	; 0x2e
 800a318:	d10c      	bne.n	800a334 <_svfiprintf_r+0x124>
 800a31a:	787b      	ldrb	r3, [r7, #1]
 800a31c:	2b2a      	cmp	r3, #42	; 0x2a
 800a31e:	d133      	bne.n	800a388 <_svfiprintf_r+0x178>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	9203      	str	r2, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfb8      	it	lt
 800a32c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a330:	3702      	adds	r7, #2
 800a332:	9305      	str	r3, [sp, #20]
 800a334:	4d2e      	ldr	r5, [pc, #184]	; (800a3f0 <_svfiprintf_r+0x1e0>)
 800a336:	7839      	ldrb	r1, [r7, #0]
 800a338:	2203      	movs	r2, #3
 800a33a:	4628      	mov	r0, r5
 800a33c:	f7f5 ff50 	bl	80001e0 <memchr>
 800a340:	b138      	cbz	r0, 800a352 <_svfiprintf_r+0x142>
 800a342:	2340      	movs	r3, #64	; 0x40
 800a344:	1b40      	subs	r0, r0, r5
 800a346:	fa03 f000 	lsl.w	r0, r3, r0
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	4303      	orrs	r3, r0
 800a34e:	3701      	adds	r7, #1
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	7839      	ldrb	r1, [r7, #0]
 800a354:	4827      	ldr	r0, [pc, #156]	; (800a3f4 <_svfiprintf_r+0x1e4>)
 800a356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a35a:	2206      	movs	r2, #6
 800a35c:	1c7e      	adds	r6, r7, #1
 800a35e:	f7f5 ff3f 	bl	80001e0 <memchr>
 800a362:	2800      	cmp	r0, #0
 800a364:	d038      	beq.n	800a3d8 <_svfiprintf_r+0x1c8>
 800a366:	4b24      	ldr	r3, [pc, #144]	; (800a3f8 <_svfiprintf_r+0x1e8>)
 800a368:	bb13      	cbnz	r3, 800a3b0 <_svfiprintf_r+0x1a0>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	3307      	adds	r3, #7
 800a36e:	f023 0307 	bic.w	r3, r3, #7
 800a372:	3308      	adds	r3, #8
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a378:	444b      	add	r3, r9
 800a37a:	9309      	str	r3, [sp, #36]	; 0x24
 800a37c:	e76d      	b.n	800a25a <_svfiprintf_r+0x4a>
 800a37e:	fb05 3202 	mla	r2, r5, r2, r3
 800a382:	2001      	movs	r0, #1
 800a384:	460f      	mov	r7, r1
 800a386:	e7a6      	b.n	800a2d6 <_svfiprintf_r+0xc6>
 800a388:	2300      	movs	r3, #0
 800a38a:	3701      	adds	r7, #1
 800a38c:	9305      	str	r3, [sp, #20]
 800a38e:	4619      	mov	r1, r3
 800a390:	250a      	movs	r5, #10
 800a392:	4638      	mov	r0, r7
 800a394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a398:	3a30      	subs	r2, #48	; 0x30
 800a39a:	2a09      	cmp	r2, #9
 800a39c:	d903      	bls.n	800a3a6 <_svfiprintf_r+0x196>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0c8      	beq.n	800a334 <_svfiprintf_r+0x124>
 800a3a2:	9105      	str	r1, [sp, #20]
 800a3a4:	e7c6      	b.n	800a334 <_svfiprintf_r+0x124>
 800a3a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	e7f0      	b.n	800a392 <_svfiprintf_r+0x182>
 800a3b0:	ab03      	add	r3, sp, #12
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4b11      	ldr	r3, [pc, #68]	; (800a3fc <_svfiprintf_r+0x1ec>)
 800a3b8:	a904      	add	r1, sp, #16
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a3c4:	4681      	mov	r9, r0
 800a3c6:	d1d6      	bne.n	800a376 <_svfiprintf_r+0x166>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	065b      	lsls	r3, r3, #25
 800a3cc:	f53f af35 	bmi.w	800a23a <_svfiprintf_r+0x2a>
 800a3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d2:	b01d      	add	sp, #116	; 0x74
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	ab03      	add	r3, sp, #12
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <_svfiprintf_r+0x1ec>)
 800a3e0:	a904      	add	r1, sp, #16
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f000 f9c2 	bl	800a76c <_printf_i>
 800a3e8:	e7ea      	b.n	800a3c0 <_svfiprintf_r+0x1b0>
 800a3ea:	bf00      	nop
 800a3ec:	0800b940 	.word	0x0800b940
 800a3f0:	0800b946 	.word	0x0800b946
 800a3f4:	0800b94a 	.word	0x0800b94a
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	0800a15d 	.word	0x0800a15d

0800a400 <__sfputc_r>:
 800a400:	6893      	ldr	r3, [r2, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	b410      	push	{r4}
 800a408:	6093      	str	r3, [r2, #8]
 800a40a:	da08      	bge.n	800a41e <__sfputc_r+0x1e>
 800a40c:	6994      	ldr	r4, [r2, #24]
 800a40e:	42a3      	cmp	r3, r4
 800a410:	db01      	blt.n	800a416 <__sfputc_r+0x16>
 800a412:	290a      	cmp	r1, #10
 800a414:	d103      	bne.n	800a41e <__sfputc_r+0x1e>
 800a416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a41a:	f7ff bb51 	b.w	8009ac0 <__swbuf_r>
 800a41e:	6813      	ldr	r3, [r2, #0]
 800a420:	1c58      	adds	r0, r3, #1
 800a422:	6010      	str	r0, [r2, #0]
 800a424:	7019      	strb	r1, [r3, #0]
 800a426:	4608      	mov	r0, r1
 800a428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <__sfputs_r>:
 800a42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a430:	4606      	mov	r6, r0
 800a432:	460f      	mov	r7, r1
 800a434:	4614      	mov	r4, r2
 800a436:	18d5      	adds	r5, r2, r3
 800a438:	42ac      	cmp	r4, r5
 800a43a:	d101      	bne.n	800a440 <__sfputs_r+0x12>
 800a43c:	2000      	movs	r0, #0
 800a43e:	e007      	b.n	800a450 <__sfputs_r+0x22>
 800a440:	463a      	mov	r2, r7
 800a442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ffda 	bl	800a400 <__sfputc_r>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d1f3      	bne.n	800a438 <__sfputs_r+0xa>
 800a450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a454 <_vfiprintf_r>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	460c      	mov	r4, r1
 800a45a:	b09d      	sub	sp, #116	; 0x74
 800a45c:	4617      	mov	r7, r2
 800a45e:	461d      	mov	r5, r3
 800a460:	4606      	mov	r6, r0
 800a462:	b118      	cbz	r0, 800a46c <_vfiprintf_r+0x18>
 800a464:	6983      	ldr	r3, [r0, #24]
 800a466:	b90b      	cbnz	r3, 800a46c <_vfiprintf_r+0x18>
 800a468:	f7ff fcda 	bl	8009e20 <__sinit>
 800a46c:	4b7c      	ldr	r3, [pc, #496]	; (800a660 <_vfiprintf_r+0x20c>)
 800a46e:	429c      	cmp	r4, r3
 800a470:	d158      	bne.n	800a524 <_vfiprintf_r+0xd0>
 800a472:	6874      	ldr	r4, [r6, #4]
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	0718      	lsls	r0, r3, #28
 800a478:	d55e      	bpl.n	800a538 <_vfiprintf_r+0xe4>
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d05b      	beq.n	800a538 <_vfiprintf_r+0xe4>
 800a480:	2300      	movs	r3, #0
 800a482:	9309      	str	r3, [sp, #36]	; 0x24
 800a484:	2320      	movs	r3, #32
 800a486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a48a:	2330      	movs	r3, #48	; 0x30
 800a48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a490:	9503      	str	r5, [sp, #12]
 800a492:	f04f 0b01 	mov.w	fp, #1
 800a496:	46b8      	mov	r8, r7
 800a498:	4645      	mov	r5, r8
 800a49a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a49e:	b10b      	cbz	r3, 800a4a4 <_vfiprintf_r+0x50>
 800a4a0:	2b25      	cmp	r3, #37	; 0x25
 800a4a2:	d154      	bne.n	800a54e <_vfiprintf_r+0xfa>
 800a4a4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a4a8:	d00b      	beq.n	800a4c2 <_vfiprintf_r+0x6e>
 800a4aa:	4653      	mov	r3, sl
 800a4ac:	463a      	mov	r2, r7
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff ffbc 	bl	800a42e <__sfputs_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f000 80c2 	beq.w	800a640 <_vfiprintf_r+0x1ec>
 800a4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4be:	4453      	add	r3, sl
 800a4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c2:	f898 3000 	ldrb.w	r3, [r8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80ba 	beq.w	800a640 <_vfiprintf_r+0x1ec>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4de:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e0:	46a8      	mov	r8, r5
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a4e8:	485e      	ldr	r0, [pc, #376]	; (800a664 <_vfiprintf_r+0x210>)
 800a4ea:	f7f5 fe79 	bl	80001e0 <memchr>
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	bb78      	cbnz	r0, 800a552 <_vfiprintf_r+0xfe>
 800a4f2:	06d9      	lsls	r1, r3, #27
 800a4f4:	bf44      	itt	mi
 800a4f6:	2220      	movmi	r2, #32
 800a4f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4fc:	071a      	lsls	r2, r3, #28
 800a4fe:	bf44      	itt	mi
 800a500:	222b      	movmi	r2, #43	; 0x2b
 800a502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a506:	782a      	ldrb	r2, [r5, #0]
 800a508:	2a2a      	cmp	r2, #42	; 0x2a
 800a50a:	d02a      	beq.n	800a562 <_vfiprintf_r+0x10e>
 800a50c:	9a07      	ldr	r2, [sp, #28]
 800a50e:	46a8      	mov	r8, r5
 800a510:	2000      	movs	r0, #0
 800a512:	250a      	movs	r5, #10
 800a514:	4641      	mov	r1, r8
 800a516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51a:	3b30      	subs	r3, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d969      	bls.n	800a5f4 <_vfiprintf_r+0x1a0>
 800a520:	b360      	cbz	r0, 800a57c <_vfiprintf_r+0x128>
 800a522:	e024      	b.n	800a56e <_vfiprintf_r+0x11a>
 800a524:	4b50      	ldr	r3, [pc, #320]	; (800a668 <_vfiprintf_r+0x214>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <_vfiprintf_r+0xda>
 800a52a:	68b4      	ldr	r4, [r6, #8]
 800a52c:	e7a2      	b.n	800a474 <_vfiprintf_r+0x20>
 800a52e:	4b4f      	ldr	r3, [pc, #316]	; (800a66c <_vfiprintf_r+0x218>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68f4      	ldreq	r4, [r6, #12]
 800a536:	e79d      	b.n	800a474 <_vfiprintf_r+0x20>
 800a538:	4621      	mov	r1, r4
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff fb12 	bl	8009b64 <__swsetup_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d09d      	beq.n	800a480 <_vfiprintf_r+0x2c>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	b01d      	add	sp, #116	; 0x74
 800a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54e:	46a8      	mov	r8, r5
 800a550:	e7a2      	b.n	800a498 <_vfiprintf_r+0x44>
 800a552:	4a44      	ldr	r2, [pc, #272]	; (800a664 <_vfiprintf_r+0x210>)
 800a554:	1a80      	subs	r0, r0, r2
 800a556:	fa0b f000 	lsl.w	r0, fp, r0
 800a55a:	4318      	orrs	r0, r3
 800a55c:	9004      	str	r0, [sp, #16]
 800a55e:	4645      	mov	r5, r8
 800a560:	e7be      	b.n	800a4e0 <_vfiprintf_r+0x8c>
 800a562:	9a03      	ldr	r2, [sp, #12]
 800a564:	1d11      	adds	r1, r2, #4
 800a566:	6812      	ldr	r2, [r2, #0]
 800a568:	9103      	str	r1, [sp, #12]
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	db01      	blt.n	800a572 <_vfiprintf_r+0x11e>
 800a56e:	9207      	str	r2, [sp, #28]
 800a570:	e004      	b.n	800a57c <_vfiprintf_r+0x128>
 800a572:	4252      	negs	r2, r2
 800a574:	f043 0302 	orr.w	r3, r3, #2
 800a578:	9207      	str	r2, [sp, #28]
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	f898 3000 	ldrb.w	r3, [r8]
 800a580:	2b2e      	cmp	r3, #46	; 0x2e
 800a582:	d10e      	bne.n	800a5a2 <_vfiprintf_r+0x14e>
 800a584:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a588:	2b2a      	cmp	r3, #42	; 0x2a
 800a58a:	d138      	bne.n	800a5fe <_vfiprintf_r+0x1aa>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	1d1a      	adds	r2, r3, #4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	bfb8      	it	lt
 800a598:	f04f 33ff 	movlt.w	r3, #4294967295
 800a59c:	f108 0802 	add.w	r8, r8, #2
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	4d33      	ldr	r5, [pc, #204]	; (800a670 <_vfiprintf_r+0x21c>)
 800a5a4:	f898 1000 	ldrb.w	r1, [r8]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7f5 fe18 	bl	80001e0 <memchr>
 800a5b0:	b140      	cbz	r0, 800a5c4 <_vfiprintf_r+0x170>
 800a5b2:	2340      	movs	r3, #64	; 0x40
 800a5b4:	1b40      	subs	r0, r0, r5
 800a5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	4303      	orrs	r3, r0
 800a5be:	f108 0801 	add.w	r8, r8, #1
 800a5c2:	9304      	str	r3, [sp, #16]
 800a5c4:	f898 1000 	ldrb.w	r1, [r8]
 800a5c8:	482a      	ldr	r0, [pc, #168]	; (800a674 <_vfiprintf_r+0x220>)
 800a5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ce:	2206      	movs	r2, #6
 800a5d0:	f108 0701 	add.w	r7, r8, #1
 800a5d4:	f7f5 fe04 	bl	80001e0 <memchr>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d037      	beq.n	800a64c <_vfiprintf_r+0x1f8>
 800a5dc:	4b26      	ldr	r3, [pc, #152]	; (800a678 <_vfiprintf_r+0x224>)
 800a5de:	bb1b      	cbnz	r3, 800a628 <_vfiprintf_r+0x1d4>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	3307      	adds	r3, #7
 800a5e4:	f023 0307 	bic.w	r3, r3, #7
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	9303      	str	r3, [sp, #12]
 800a5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ee:	444b      	add	r3, r9
 800a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f2:	e750      	b.n	800a496 <_vfiprintf_r+0x42>
 800a5f4:	fb05 3202 	mla	r2, r5, r2, r3
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	e78a      	b.n	800a514 <_vfiprintf_r+0xc0>
 800a5fe:	2300      	movs	r3, #0
 800a600:	f108 0801 	add.w	r8, r8, #1
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	4619      	mov	r1, r3
 800a608:	250a      	movs	r5, #10
 800a60a:	4640      	mov	r0, r8
 800a60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a610:	3a30      	subs	r2, #48	; 0x30
 800a612:	2a09      	cmp	r2, #9
 800a614:	d903      	bls.n	800a61e <_vfiprintf_r+0x1ca>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0c3      	beq.n	800a5a2 <_vfiprintf_r+0x14e>
 800a61a:	9105      	str	r1, [sp, #20]
 800a61c:	e7c1      	b.n	800a5a2 <_vfiprintf_r+0x14e>
 800a61e:	fb05 2101 	mla	r1, r5, r1, r2
 800a622:	2301      	movs	r3, #1
 800a624:	4680      	mov	r8, r0
 800a626:	e7f0      	b.n	800a60a <_vfiprintf_r+0x1b6>
 800a628:	ab03      	add	r3, sp, #12
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4622      	mov	r2, r4
 800a62e:	4b13      	ldr	r3, [pc, #76]	; (800a67c <_vfiprintf_r+0x228>)
 800a630:	a904      	add	r1, sp, #16
 800a632:	4630      	mov	r0, r6
 800a634:	f3af 8000 	nop.w
 800a638:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a63c:	4681      	mov	r9, r0
 800a63e:	d1d5      	bne.n	800a5ec <_vfiprintf_r+0x198>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	065b      	lsls	r3, r3, #25
 800a644:	f53f af7e 	bmi.w	800a544 <_vfiprintf_r+0xf0>
 800a648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64a:	e77d      	b.n	800a548 <_vfiprintf_r+0xf4>
 800a64c:	ab03      	add	r3, sp, #12
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	4622      	mov	r2, r4
 800a652:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <_vfiprintf_r+0x228>)
 800a654:	a904      	add	r1, sp, #16
 800a656:	4630      	mov	r0, r6
 800a658:	f000 f888 	bl	800a76c <_printf_i>
 800a65c:	e7ec      	b.n	800a638 <_vfiprintf_r+0x1e4>
 800a65e:	bf00      	nop
 800a660:	0800b900 	.word	0x0800b900
 800a664:	0800b940 	.word	0x0800b940
 800a668:	0800b920 	.word	0x0800b920
 800a66c:	0800b8e0 	.word	0x0800b8e0
 800a670:	0800b946 	.word	0x0800b946
 800a674:	0800b94a 	.word	0x0800b94a
 800a678:	00000000 	.word	0x00000000
 800a67c:	0800a42f 	.word	0x0800a42f

0800a680 <_printf_common>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	4691      	mov	r9, r2
 800a686:	461f      	mov	r7, r3
 800a688:	688a      	ldr	r2, [r1, #8]
 800a68a:	690b      	ldr	r3, [r1, #16]
 800a68c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a690:	4293      	cmp	r3, r2
 800a692:	bfb8      	it	lt
 800a694:	4613      	movlt	r3, r2
 800a696:	f8c9 3000 	str.w	r3, [r9]
 800a69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a69e:	4606      	mov	r6, r0
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	b112      	cbz	r2, 800a6aa <_printf_common+0x2a>
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	f8c9 3000 	str.w	r3, [r9]
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	0699      	lsls	r1, r3, #26
 800a6ae:	bf42      	ittt	mi
 800a6b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6b4:	3302      	addmi	r3, #2
 800a6b6:	f8c9 3000 	strmi.w	r3, [r9]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	f015 0506 	ands.w	r5, r5, #6
 800a6c0:	d107      	bne.n	800a6d2 <_printf_common+0x52>
 800a6c2:	f104 0a19 	add.w	sl, r4, #25
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a6cc:	1a9b      	subs	r3, r3, r2
 800a6ce:	42ab      	cmp	r3, r5
 800a6d0:	dc28      	bgt.n	800a724 <_printf_common+0xa4>
 800a6d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	3300      	adds	r3, #0
 800a6da:	bf18      	it	ne
 800a6dc:	2301      	movne	r3, #1
 800a6de:	0692      	lsls	r2, r2, #26
 800a6e0:	d42d      	bmi.n	800a73e <_printf_common+0xbe>
 800a6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	47c0      	blx	r8
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	d020      	beq.n	800a732 <_printf_common+0xb2>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	68e5      	ldr	r5, [r4, #12]
 800a6f4:	f8d9 2000 	ldr.w	r2, [r9]
 800a6f8:	f003 0306 	and.w	r3, r3, #6
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	bf08      	it	eq
 800a700:	1aad      	subeq	r5, r5, r2
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	6922      	ldr	r2, [r4, #16]
 800a706:	bf0c      	ite	eq
 800a708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a70c:	2500      	movne	r5, #0
 800a70e:	4293      	cmp	r3, r2
 800a710:	bfc4      	itt	gt
 800a712:	1a9b      	subgt	r3, r3, r2
 800a714:	18ed      	addgt	r5, r5, r3
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	341a      	adds	r4, #26
 800a71c:	454d      	cmp	r5, r9
 800a71e:	d11a      	bne.n	800a756 <_printf_common+0xd6>
 800a720:	2000      	movs	r0, #0
 800a722:	e008      	b.n	800a736 <_printf_common+0xb6>
 800a724:	2301      	movs	r3, #1
 800a726:	4652      	mov	r2, sl
 800a728:	4639      	mov	r1, r7
 800a72a:	4630      	mov	r0, r6
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d103      	bne.n	800a73a <_printf_common+0xba>
 800a732:	f04f 30ff 	mov.w	r0, #4294967295
 800a736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73a:	3501      	adds	r5, #1
 800a73c:	e7c3      	b.n	800a6c6 <_printf_common+0x46>
 800a73e:	18e1      	adds	r1, r4, r3
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	2030      	movs	r0, #48	; 0x30
 800a744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a748:	4422      	add	r2, r4
 800a74a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a74e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a752:	3302      	adds	r3, #2
 800a754:	e7c5      	b.n	800a6e2 <_printf_common+0x62>
 800a756:	2301      	movs	r3, #1
 800a758:	4622      	mov	r2, r4
 800a75a:	4639      	mov	r1, r7
 800a75c:	4630      	mov	r0, r6
 800a75e:	47c0      	blx	r8
 800a760:	3001      	adds	r0, #1
 800a762:	d0e6      	beq.n	800a732 <_printf_common+0xb2>
 800a764:	f109 0901 	add.w	r9, r9, #1
 800a768:	e7d8      	b.n	800a71c <_printf_common+0x9c>
	...

0800a76c <_printf_i>:
 800a76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a770:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a774:	460c      	mov	r4, r1
 800a776:	7e09      	ldrb	r1, [r1, #24]
 800a778:	b085      	sub	sp, #20
 800a77a:	296e      	cmp	r1, #110	; 0x6e
 800a77c:	4617      	mov	r7, r2
 800a77e:	4606      	mov	r6, r0
 800a780:	4698      	mov	r8, r3
 800a782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a784:	f000 80b3 	beq.w	800a8ee <_printf_i+0x182>
 800a788:	d822      	bhi.n	800a7d0 <_printf_i+0x64>
 800a78a:	2963      	cmp	r1, #99	; 0x63
 800a78c:	d036      	beq.n	800a7fc <_printf_i+0x90>
 800a78e:	d80a      	bhi.n	800a7a6 <_printf_i+0x3a>
 800a790:	2900      	cmp	r1, #0
 800a792:	f000 80b9 	beq.w	800a908 <_printf_i+0x19c>
 800a796:	2958      	cmp	r1, #88	; 0x58
 800a798:	f000 8083 	beq.w	800a8a2 <_printf_i+0x136>
 800a79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a7a4:	e032      	b.n	800a80c <_printf_i+0xa0>
 800a7a6:	2964      	cmp	r1, #100	; 0x64
 800a7a8:	d001      	beq.n	800a7ae <_printf_i+0x42>
 800a7aa:	2969      	cmp	r1, #105	; 0x69
 800a7ac:	d1f6      	bne.n	800a79c <_printf_i+0x30>
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	6813      	ldr	r3, [r2, #0]
 800a7b2:	0605      	lsls	r5, r0, #24
 800a7b4:	f103 0104 	add.w	r1, r3, #4
 800a7b8:	d52a      	bpl.n	800a810 <_printf_i+0xa4>
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6011      	str	r1, [r2, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da03      	bge.n	800a7ca <_printf_i+0x5e>
 800a7c2:	222d      	movs	r2, #45	; 0x2d
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a7ca:	486f      	ldr	r0, [pc, #444]	; (800a988 <_printf_i+0x21c>)
 800a7cc:	220a      	movs	r2, #10
 800a7ce:	e039      	b.n	800a844 <_printf_i+0xd8>
 800a7d0:	2973      	cmp	r1, #115	; 0x73
 800a7d2:	f000 809d 	beq.w	800a910 <_printf_i+0x1a4>
 800a7d6:	d808      	bhi.n	800a7ea <_printf_i+0x7e>
 800a7d8:	296f      	cmp	r1, #111	; 0x6f
 800a7da:	d020      	beq.n	800a81e <_printf_i+0xb2>
 800a7dc:	2970      	cmp	r1, #112	; 0x70
 800a7de:	d1dd      	bne.n	800a79c <_printf_i+0x30>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	f043 0320 	orr.w	r3, r3, #32
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	e003      	b.n	800a7f2 <_printf_i+0x86>
 800a7ea:	2975      	cmp	r1, #117	; 0x75
 800a7ec:	d017      	beq.n	800a81e <_printf_i+0xb2>
 800a7ee:	2978      	cmp	r1, #120	; 0x78
 800a7f0:	d1d4      	bne.n	800a79c <_printf_i+0x30>
 800a7f2:	2378      	movs	r3, #120	; 0x78
 800a7f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7f8:	4864      	ldr	r0, [pc, #400]	; (800a98c <_printf_i+0x220>)
 800a7fa:	e055      	b.n	800a8a8 <_printf_i+0x13c>
 800a7fc:	6813      	ldr	r3, [r2, #0]
 800a7fe:	1d19      	adds	r1, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6011      	str	r1, [r2, #0]
 800a804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80c:	2301      	movs	r3, #1
 800a80e:	e08c      	b.n	800a92a <_printf_i+0x1be>
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6011      	str	r1, [r2, #0]
 800a814:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a818:	bf18      	it	ne
 800a81a:	b21b      	sxthne	r3, r3
 800a81c:	e7cf      	b.n	800a7be <_printf_i+0x52>
 800a81e:	6813      	ldr	r3, [r2, #0]
 800a820:	6825      	ldr	r5, [r4, #0]
 800a822:	1d18      	adds	r0, r3, #4
 800a824:	6010      	str	r0, [r2, #0]
 800a826:	0628      	lsls	r0, r5, #24
 800a828:	d501      	bpl.n	800a82e <_printf_i+0xc2>
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	e002      	b.n	800a834 <_printf_i+0xc8>
 800a82e:	0668      	lsls	r0, r5, #25
 800a830:	d5fb      	bpl.n	800a82a <_printf_i+0xbe>
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	4854      	ldr	r0, [pc, #336]	; (800a988 <_printf_i+0x21c>)
 800a836:	296f      	cmp	r1, #111	; 0x6f
 800a838:	bf14      	ite	ne
 800a83a:	220a      	movne	r2, #10
 800a83c:	2208      	moveq	r2, #8
 800a83e:	2100      	movs	r1, #0
 800a840:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a844:	6865      	ldr	r5, [r4, #4]
 800a846:	60a5      	str	r5, [r4, #8]
 800a848:	2d00      	cmp	r5, #0
 800a84a:	f2c0 8095 	blt.w	800a978 <_printf_i+0x20c>
 800a84e:	6821      	ldr	r1, [r4, #0]
 800a850:	f021 0104 	bic.w	r1, r1, #4
 800a854:	6021      	str	r1, [r4, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d13d      	bne.n	800a8d6 <_printf_i+0x16a>
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	f040 808e 	bne.w	800a97c <_printf_i+0x210>
 800a860:	4665      	mov	r5, ip
 800a862:	2a08      	cmp	r2, #8
 800a864:	d10b      	bne.n	800a87e <_printf_i+0x112>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	07db      	lsls	r3, r3, #31
 800a86a:	d508      	bpl.n	800a87e <_printf_i+0x112>
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	6862      	ldr	r2, [r4, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	bfde      	ittt	le
 800a874:	2330      	movle	r3, #48	; 0x30
 800a876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a87a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a87e:	ebac 0305 	sub.w	r3, ip, r5
 800a882:	6123      	str	r3, [r4, #16]
 800a884:	f8cd 8000 	str.w	r8, [sp]
 800a888:	463b      	mov	r3, r7
 800a88a:	aa03      	add	r2, sp, #12
 800a88c:	4621      	mov	r1, r4
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff fef6 	bl	800a680 <_printf_common>
 800a894:	3001      	adds	r0, #1
 800a896:	d14d      	bne.n	800a934 <_printf_i+0x1c8>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	b005      	add	sp, #20
 800a89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	4839      	ldr	r0, [pc, #228]	; (800a988 <_printf_i+0x21c>)
 800a8a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a8a8:	6813      	ldr	r3, [r2, #0]
 800a8aa:	6821      	ldr	r1, [r4, #0]
 800a8ac:	1d1d      	adds	r5, r3, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6015      	str	r5, [r2, #0]
 800a8b2:	060a      	lsls	r2, r1, #24
 800a8b4:	d50b      	bpl.n	800a8ce <_printf_i+0x162>
 800a8b6:	07ca      	lsls	r2, r1, #31
 800a8b8:	bf44      	itt	mi
 800a8ba:	f041 0120 	orrmi.w	r1, r1, #32
 800a8be:	6021      	strmi	r1, [r4, #0]
 800a8c0:	b91b      	cbnz	r3, 800a8ca <_printf_i+0x15e>
 800a8c2:	6822      	ldr	r2, [r4, #0]
 800a8c4:	f022 0220 	bic.w	r2, r2, #32
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	e7b7      	b.n	800a83e <_printf_i+0xd2>
 800a8ce:	064d      	lsls	r5, r1, #25
 800a8d0:	bf48      	it	mi
 800a8d2:	b29b      	uxthmi	r3, r3
 800a8d4:	e7ef      	b.n	800a8b6 <_printf_i+0x14a>
 800a8d6:	4665      	mov	r5, ip
 800a8d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8dc:	fb02 3311 	mls	r3, r2, r1, r3
 800a8e0:	5cc3      	ldrb	r3, [r0, r3]
 800a8e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d1f5      	bne.n	800a8d8 <_printf_i+0x16c>
 800a8ec:	e7b9      	b.n	800a862 <_printf_i+0xf6>
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	6825      	ldr	r5, [r4, #0]
 800a8f2:	6961      	ldr	r1, [r4, #20]
 800a8f4:	1d18      	adds	r0, r3, #4
 800a8f6:	6010      	str	r0, [r2, #0]
 800a8f8:	0628      	lsls	r0, r5, #24
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	d501      	bpl.n	800a902 <_printf_i+0x196>
 800a8fe:	6019      	str	r1, [r3, #0]
 800a900:	e002      	b.n	800a908 <_printf_i+0x19c>
 800a902:	066a      	lsls	r2, r5, #25
 800a904:	d5fb      	bpl.n	800a8fe <_printf_i+0x192>
 800a906:	8019      	strh	r1, [r3, #0]
 800a908:	2300      	movs	r3, #0
 800a90a:	6123      	str	r3, [r4, #16]
 800a90c:	4665      	mov	r5, ip
 800a90e:	e7b9      	b.n	800a884 <_printf_i+0x118>
 800a910:	6813      	ldr	r3, [r2, #0]
 800a912:	1d19      	adds	r1, r3, #4
 800a914:	6011      	str	r1, [r2, #0]
 800a916:	681d      	ldr	r5, [r3, #0]
 800a918:	6862      	ldr	r2, [r4, #4]
 800a91a:	2100      	movs	r1, #0
 800a91c:	4628      	mov	r0, r5
 800a91e:	f7f5 fc5f 	bl	80001e0 <memchr>
 800a922:	b108      	cbz	r0, 800a928 <_printf_i+0x1bc>
 800a924:	1b40      	subs	r0, r0, r5
 800a926:	6060      	str	r0, [r4, #4]
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	6123      	str	r3, [r4, #16]
 800a92c:	2300      	movs	r3, #0
 800a92e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a932:	e7a7      	b.n	800a884 <_printf_i+0x118>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	462a      	mov	r2, r5
 800a938:	4639      	mov	r1, r7
 800a93a:	4630      	mov	r0, r6
 800a93c:	47c0      	blx	r8
 800a93e:	3001      	adds	r0, #1
 800a940:	d0aa      	beq.n	800a898 <_printf_i+0x12c>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	079b      	lsls	r3, r3, #30
 800a946:	d413      	bmi.n	800a970 <_printf_i+0x204>
 800a948:	68e0      	ldr	r0, [r4, #12]
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	4298      	cmp	r0, r3
 800a94e:	bfb8      	it	lt
 800a950:	4618      	movlt	r0, r3
 800a952:	e7a3      	b.n	800a89c <_printf_i+0x130>
 800a954:	2301      	movs	r3, #1
 800a956:	464a      	mov	r2, r9
 800a958:	4639      	mov	r1, r7
 800a95a:	4630      	mov	r0, r6
 800a95c:	47c0      	blx	r8
 800a95e:	3001      	adds	r0, #1
 800a960:	d09a      	beq.n	800a898 <_printf_i+0x12c>
 800a962:	3501      	adds	r5, #1
 800a964:	68e3      	ldr	r3, [r4, #12]
 800a966:	9a03      	ldr	r2, [sp, #12]
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	42ab      	cmp	r3, r5
 800a96c:	dcf2      	bgt.n	800a954 <_printf_i+0x1e8>
 800a96e:	e7eb      	b.n	800a948 <_printf_i+0x1dc>
 800a970:	2500      	movs	r5, #0
 800a972:	f104 0919 	add.w	r9, r4, #25
 800a976:	e7f5      	b.n	800a964 <_printf_i+0x1f8>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1ac      	bne.n	800a8d6 <_printf_i+0x16a>
 800a97c:	7803      	ldrb	r3, [r0, #0]
 800a97e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a986:	e76c      	b.n	800a862 <_printf_i+0xf6>
 800a988:	0800b951 	.word	0x0800b951
 800a98c:	0800b962 	.word	0x0800b962

0800a990 <_sbrk_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4c06      	ldr	r4, [pc, #24]	; (800a9ac <_sbrk_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4605      	mov	r5, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	f7f9 fe66 	bl	800466c <_sbrk>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_sbrk_r+0x1a>
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_sbrk_r+0x1a>
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	20001150 	.word	0x20001150

0800a9b0 <__sread>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	f000 f8d6 	bl	800ab68 <_read_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	bfab      	itete	ge
 800a9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9c4:	181b      	addge	r3, r3, r0
 800a9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9ca:	bfac      	ite	ge
 800a9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ce:	81a3      	strhlt	r3, [r4, #12]
 800a9d0:	bd10      	pop	{r4, pc}

0800a9d2 <__swrite>:
 800a9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	461f      	mov	r7, r3
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	05db      	lsls	r3, r3, #23
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4616      	mov	r6, r2
 800a9e2:	d505      	bpl.n	800a9f0 <__swrite+0x1e>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ec:	f000 f868 	bl	800aac0 <_lseek_r>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	463b      	mov	r3, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	f000 b817 	b.w	800aa38 <_write_r>

0800aa0a <__sseek>:
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	f000 f855 	bl	800aac0 <_lseek_r>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	bf15      	itete	ne
 800aa1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa26:	81a3      	strheq	r3, [r4, #12]
 800aa28:	bf18      	it	ne
 800aa2a:	81a3      	strhne	r3, [r4, #12]
 800aa2c:	bd10      	pop	{r4, pc}

0800aa2e <__sclose>:
 800aa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa32:	f000 b813 	b.w	800aa5c <_close_r>
	...

0800aa38 <_write_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4c07      	ldr	r4, [pc, #28]	; (800aa58 <_write_r+0x20>)
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	4608      	mov	r0, r1
 800aa40:	4611      	mov	r1, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	6022      	str	r2, [r4, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	f7f9 fdbf 	bl	80045ca <_write>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_write_r+0x1e>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_write_r+0x1e>
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20001150 	.word	0x20001150

0800aa5c <_close_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4c06      	ldr	r4, [pc, #24]	; (800aa78 <_close_r+0x1c>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4605      	mov	r5, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	f7f9 fdcb 	bl	8004602 <_close>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_close_r+0x1a>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_close_r+0x1a>
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20001150 	.word	0x20001150

0800aa7c <_fstat_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4c07      	ldr	r4, [pc, #28]	; (800aa9c <_fstat_r+0x20>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4605      	mov	r5, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	f7f9 fdc6 	bl	800461a <_fstat>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d102      	bne.n	800aa98 <_fstat_r+0x1c>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	b103      	cbz	r3, 800aa98 <_fstat_r+0x1c>
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	bd38      	pop	{r3, r4, r5, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20001150 	.word	0x20001150

0800aaa0 <_isatty_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4c06      	ldr	r4, [pc, #24]	; (800aabc <_isatty_r+0x1c>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	f7f9 fdc5 	bl	800463a <_isatty>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_isatty_r+0x1a>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_isatty_r+0x1a>
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20001150 	.word	0x20001150

0800aac0 <_lseek_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4c07      	ldr	r4, [pc, #28]	; (800aae0 <_lseek_r+0x20>)
 800aac4:	4605      	mov	r5, r0
 800aac6:	4608      	mov	r0, r1
 800aac8:	4611      	mov	r1, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	6022      	str	r2, [r4, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	f7f9 fdbe 	bl	8004650 <_lseek>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_lseek_r+0x1e>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	b103      	cbz	r3, 800aade <_lseek_r+0x1e>
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20001150 	.word	0x20001150

0800aae4 <memmove>:
 800aae4:	4288      	cmp	r0, r1
 800aae6:	b510      	push	{r4, lr}
 800aae8:	eb01 0302 	add.w	r3, r1, r2
 800aaec:	d807      	bhi.n	800aafe <memmove+0x1a>
 800aaee:	1e42      	subs	r2, r0, #1
 800aaf0:	4299      	cmp	r1, r3
 800aaf2:	d00a      	beq.n	800ab0a <memmove+0x26>
 800aaf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aafc:	e7f8      	b.n	800aaf0 <memmove+0xc>
 800aafe:	4283      	cmp	r3, r0
 800ab00:	d9f5      	bls.n	800aaee <memmove+0xa>
 800ab02:	1881      	adds	r1, r0, r2
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	42d3      	cmn	r3, r2
 800ab08:	d100      	bne.n	800ab0c <memmove+0x28>
 800ab0a:	bd10      	pop	{r4, pc}
 800ab0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab14:	e7f7      	b.n	800ab06 <memmove+0x22>

0800ab16 <__malloc_lock>:
 800ab16:	4770      	bx	lr

0800ab18 <__malloc_unlock>:
 800ab18:	4770      	bx	lr

0800ab1a <_realloc_r>:
 800ab1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	4614      	mov	r4, r2
 800ab20:	460e      	mov	r6, r1
 800ab22:	b921      	cbnz	r1, 800ab2e <_realloc_r+0x14>
 800ab24:	4611      	mov	r1, r2
 800ab26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab2a:	f7ff babd 	b.w	800a0a8 <_malloc_r>
 800ab2e:	b922      	cbnz	r2, 800ab3a <_realloc_r+0x20>
 800ab30:	f7ff fa6c 	bl	800a00c <_free_r>
 800ab34:	4625      	mov	r5, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3a:	f000 f827 	bl	800ab8c <_malloc_usable_size_r>
 800ab3e:	42a0      	cmp	r0, r4
 800ab40:	d20f      	bcs.n	800ab62 <_realloc_r+0x48>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4638      	mov	r0, r7
 800ab46:	f7ff faaf 	bl	800a0a8 <_malloc_r>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d0f2      	beq.n	800ab36 <_realloc_r+0x1c>
 800ab50:	4631      	mov	r1, r6
 800ab52:	4622      	mov	r2, r4
 800ab54:	f7fe fe61 	bl	800981a <memcpy>
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f7ff fa56 	bl	800a00c <_free_r>
 800ab60:	e7e9      	b.n	800ab36 <_realloc_r+0x1c>
 800ab62:	4635      	mov	r5, r6
 800ab64:	e7e7      	b.n	800ab36 <_realloc_r+0x1c>
	...

0800ab68 <_read_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4c07      	ldr	r4, [pc, #28]	; (800ab88 <_read_r+0x20>)
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	4608      	mov	r0, r1
 800ab70:	4611      	mov	r1, r2
 800ab72:	2200      	movs	r2, #0
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	f7f9 fd0a 	bl	8004590 <_read>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_read_r+0x1e>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_read_r+0x1e>
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	20001150 	.word	0x20001150

0800ab8c <_malloc_usable_size_r>:
 800ab8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab90:	1f18      	subs	r0, r3, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bfbc      	itt	lt
 800ab96:	580b      	ldrlt	r3, [r1, r0]
 800ab98:	18c0      	addlt	r0, r0, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
